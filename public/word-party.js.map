{
  "version": 3,
  "sources": ["../node_modules/matter-js/build/matter.js", "../src/lib/js-confetti.js", "../src/modules/popper.ts", "../src/modules/dropper.ts", "../src/sdk/sdk.ts", "../src/modules/notify.ts", "../src/index.ts"],
  "sourcesContent": ["/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 21);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('\uD83D\uDD05 deprecated \uD83D\uDD05', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick \u2705 indicates a dependency was resolved and installed.\n     * - An orange diamond \uD83D\uDD36 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross \u274C indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('\u274C ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('\uD83D\uDD36 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('\u2705 ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(13);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(14);\nvar Pairs = __webpack_require__(20);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // update the detector bodies if they have changed\n        if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n        }\n\n        // reset all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen,\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            restingThresh = Resolver._restingThresh * timeScaleSquared,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n            restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n            NumberMaxValue = Number.MAX_VALUE,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n                \n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                    maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = NumberMaxValue;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(22);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(23);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(14);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(24);\r\nMatter.Mouse = __webpack_require__(13);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run \u27A4 use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.18.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle \u27A4 moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car \u27A4 moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody \u27A4 moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update \u27A4 replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear \u27A4 replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(13);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(14);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides \u27A4 replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction normalizeComputedStyleValue(string) {\n  // \"250px\" --> 250\n  return +string.replace(/px/, '');\n}\n\nfunction fixDPR(canvas) {\n  var dpr = window.devicePixelRatio;\n  var computedStyles = getComputedStyle(canvas);\n  var width = normalizeComputedStyleValue(computedStyles.getPropertyValue('width'));\n  var height = normalizeComputedStyleValue(computedStyles.getPropertyValue('height'));\n  canvas.setAttribute('width', (width * dpr).toString());\n  canvas.setAttribute('height', (height * dpr).toString());\n}\n\nfunction generateRandomNumber(min, max) {\n  var fractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var randomNumber = Math.random() * (max - min) + min;\n  return Math.floor(randomNumber * Math.pow(10, fractionDigits)) / Math.pow(10, fractionDigits);\n}\n\nfunction generateRandomArrayElement(arr) {\n  return arr[generateRandomNumber(0, arr.length)];\n}\n\nvar FREE_FALLING_OBJECT_ACCELERATION = 0.00125;\nvar MIN_DRAG_FORCE_COEFFICIENT = 0.0005;\nvar MAX_DRAG_FORCE_COEFFICIENT = 0.0009;\nvar ROTATION_SLOWDOWN_ACCELERATION = 0.00001;\nvar INITIAL_SHAPE_RADIUS = 6;\nvar INITIAL_EMOJI_SIZE = 80;\nvar MIN_INITIAL_CONFETTI_SPEED = 0.9;\nvar MAX_INITIAL_CONFETTI_SPEED = 1.7;\nvar MIN_FINAL_X_CONFETTI_SPEED = 0.2;\nvar MAX_FINAL_X_CONFETTI_SPEED = 0.6;\nvar MIN_INITIAL_ROTATION_SPEED = 0.03;\nvar MAX_INITIAL_ROTATION_SPEED = 0.07;\nvar MIN_CONFETTI_ANGLE = 15;\nvar MAX_CONFETTI_ANGLE = 82;\nvar MAX_CONFETTI_POSITION_SHIFT = 150;\nvar SHAPE_VISIBILITY_TRESHOLD = 100;\nvar DEFAULT_CONFETTI_NUMBER = 250;\nvar DEFAULT_EMOJIS_NUMBER = 40;\nvar DEFAULT_CONFETTI_COLORS = ['#fcf403', '#62fc03', '#f4fc03', '#03e7fc', '#03fca5', '#a503fc', '#fc03ad', '#fc03c2'];\n\nfunction getWindowWidthCoefficient(canvasWidth) {\n  var HD_SCREEN_WIDTH = 1920;\n  return Math.log(canvasWidth) / Math.log(HD_SCREEN_WIDTH);\n}\n\nvar ConfettiShape = /*#__PURE__*/function () {\n  function ConfettiShape(args) {\n    _classCallCheck(this, ConfettiShape);\n\n    var initialPosition = args.initialPosition,\n        direction = args.direction,\n        confettiRadius = args.confettiRadius,\n        confettiColors = args.confettiColors,\n        emojis = args.emojis,\n        emojiSize = args.emojiSize,\n        canvasWidth = args.canvasWidth;\n        args.images;\n        var resources = args.resources;\n    var randomConfettiSpeed = generateRandomNumber(MIN_INITIAL_CONFETTI_SPEED, MAX_INITIAL_CONFETTI_SPEED, 3);\n    var initialSpeed = randomConfettiSpeed * getWindowWidthCoefficient(canvasWidth);\n    this.confettiSpeed = {\n      x: initialSpeed,\n      y: initialSpeed\n    };\n    this.finalConfettiSpeedX = generateRandomNumber(MIN_FINAL_X_CONFETTI_SPEED, MAX_FINAL_X_CONFETTI_SPEED, 3);\n    this.rotationSpeed = emojis.length || resources.length ? 0.01 : generateRandomNumber(MIN_INITIAL_ROTATION_SPEED, MAX_INITIAL_ROTATION_SPEED, 3) * getWindowWidthCoefficient(canvasWidth);\n    this.dragForceCoefficient = generateRandomNumber(MIN_DRAG_FORCE_COEFFICIENT, MAX_DRAG_FORCE_COEFFICIENT, 6);\n    this.radius = {\n      x: confettiRadius,\n      y: confettiRadius\n    };\n    this.initialRadius = confettiRadius;\n    this.rotationAngle = direction === 'left' ? generateRandomNumber(0, 0.2, 3) : generateRandomNumber(-0.2, 0, 3);\n    this.emojiSize = emojiSize;\n    this.emojiRotationAngle = generateRandomNumber(0, 2 * Math.PI);\n    this.radiusYUpdateDirection = 'down';\n    var angle = direction === 'left' ? generateRandomNumber(MAX_CONFETTI_ANGLE, MIN_CONFETTI_ANGLE) * Math.PI / 180 : generateRandomNumber(-MIN_CONFETTI_ANGLE, -MAX_CONFETTI_ANGLE) * Math.PI / 180;\n    this.absCos = Math.abs(Math.cos(angle));\n    this.absSin = Math.abs(Math.sin(angle));\n    var positionShift = generateRandomNumber(-MAX_CONFETTI_POSITION_SHIFT, 0);\n    var shiftedInitialPosition = {\n      x: initialPosition.x + (direction === 'left' ? -positionShift : positionShift) * this.absCos,\n      y: initialPosition.y - positionShift * this.absSin\n    };\n    this.currentPosition = Object.assign({}, shiftedInitialPosition);\n    this.initialPosition = Object.assign({}, shiftedInitialPosition);\n    this.color = emojis.length || resources.length ? null : generateRandomArrayElement(confettiColors);\n    this.emoji = emojis.length ? generateRandomArrayElement(emojis) : null;\n    this.image = resources.length ? generateRandomArrayElement(resources) : null;\n    this.createdAt = new Date().getTime();\n    this.direction = direction;\n  }\n\n  _createClass(ConfettiShape, [{\n    key: \"draw\",\n    value: function draw(canvasContext) {\n      var currentPosition = this.currentPosition,\n          radius = this.radius,\n          color = this.color,\n          emoji = this.emoji,\n          rotationAngle = this.rotationAngle,\n          emojiRotationAngle = this.emojiRotationAngle,\n          emojiSize = this.emojiSize,\n          image = this.image;\n      var dpr = window.devicePixelRatio;\n\n      if (color) {\n        canvasContext.fillStyle = color;\n        canvasContext.beginPath();\n        canvasContext.ellipse(currentPosition.x * dpr, currentPosition.y * dpr, radius.x * dpr, radius.y * dpr, rotationAngle, 0, 2 * Math.PI);\n        canvasContext.fill();\n      } else if (image) {\n        canvasContext.save();\n        canvasContext.translate(dpr * currentPosition.x, dpr * currentPosition.y);\n        canvasContext.rotate(emojiRotationAngle);\n        canvasContext.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);\n        canvasContext.restore();\n      } else if (emoji) {\n        canvasContext.font = \"\".concat(emojiSize, \"px serif\");\n        canvasContext.save();\n        canvasContext.translate(dpr * currentPosition.x, dpr * currentPosition.y);\n        canvasContext.rotate(emojiRotationAngle);\n        canvasContext.textAlign = 'center';\n        canvasContext.fillText(emoji, 0, 0);\n        canvasContext.restore();\n      }\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(iterationTimeDelta, currentTime) {\n      var confettiSpeed = this.confettiSpeed,\n          dragForceCoefficient = this.dragForceCoefficient,\n          finalConfettiSpeedX = this.finalConfettiSpeedX,\n          radiusYUpdateDirection = this.radiusYUpdateDirection,\n          rotationSpeed = this.rotationSpeed,\n          createdAt = this.createdAt,\n          direction = this.direction;\n      var timeDeltaSinceCreation = currentTime - createdAt;\n      if (confettiSpeed.x > finalConfettiSpeedX) this.confettiSpeed.x -= dragForceCoefficient * iterationTimeDelta;\n      this.currentPosition.x += confettiSpeed.x * (direction === 'left' ? -this.absCos : this.absCos) * iterationTimeDelta;\n      this.currentPosition.y = this.initialPosition.y - confettiSpeed.y * this.absSin * timeDeltaSinceCreation + FREE_FALLING_OBJECT_ACCELERATION * Math.pow(timeDeltaSinceCreation, 2) / 2;\n      this.rotationSpeed -= this.emoji || this.image ? 0.0001 : ROTATION_SLOWDOWN_ACCELERATION * iterationTimeDelta;\n      if (this.rotationSpeed < 0) this.rotationSpeed = 0; // no need to update rotation radius for emoji\n\n      if (this.emoji || this.image) {\n        this.emojiRotationAngle += this.rotationSpeed * iterationTimeDelta % (2 * Math.PI);\n        return;\n      }\n\n      if (radiusYUpdateDirection === 'down') {\n        this.radius.y -= iterationTimeDelta * rotationSpeed;\n\n        if (this.radius.y <= 0) {\n          this.radius.y = 0;\n          this.radiusYUpdateDirection = 'up';\n        }\n      } else {\n        this.radius.y += iterationTimeDelta * rotationSpeed;\n\n        if (this.radius.y >= this.initialRadius) {\n          this.radius.y = this.initialRadius;\n          this.radiusYUpdateDirection = 'down';\n        }\n      }\n    }\n  }, {\n    key: \"getIsVisibleOnCanvas\",\n    value: function getIsVisibleOnCanvas(canvasHeight) {\n      return this.currentPosition.y < canvasHeight + SHAPE_VISIBILITY_TRESHOLD;\n    }\n  }]);\n\n  return ConfettiShape;\n}();\n\nfunction createCanvas() {\n  var canvas = document.createElement('canvas');\n  canvas.style.position = 'fixed';\n  canvas.style.width = '100%';\n  canvas.style.height = '100%';\n  canvas.style.top = '0';\n  canvas.style.left = '0';\n  canvas.style.zIndex = '1000';\n  canvas.style.pointerEvents = 'none';\n  document.body.appendChild(canvas);\n  return canvas;\n}\n\nfunction normalizeConfettiConfig(confettiConfig) {\n  var _confettiConfig$confe = confettiConfig.confettiRadius,\n      confettiRadius = _confettiConfig$confe === void 0 ? INITIAL_SHAPE_RADIUS : _confettiConfig$confe,\n      _confettiConfig$confe2 = confettiConfig.confettiNumber,\n      confettiNumber = _confettiConfig$confe2 === void 0 ? confettiConfig.confettiesNumber || (confettiConfig.emojis ? DEFAULT_EMOJIS_NUMBER : DEFAULT_CONFETTI_NUMBER) : _confettiConfig$confe2,\n      _confettiConfig$confe3 = confettiConfig.confettiColors,\n      confettiColors = _confettiConfig$confe3 === void 0 ? DEFAULT_CONFETTI_COLORS : _confettiConfig$confe3,\n      _confettiConfig$emoji = confettiConfig.emojis,\n      emojis = _confettiConfig$emoji === void 0 ? confettiConfig.emojies || [] : _confettiConfig$emoji,\n      _confettiConfig$emoji2 = confettiConfig.emojiSize,\n      emojiSize = _confettiConfig$emoji2 === void 0 ? INITIAL_EMOJI_SIZE : _confettiConfig$emoji2,\n      _confettiConfig$image = confettiConfig.images,\n      images = _confettiConfig$image === void 0 ? [] : _confettiConfig$image; // deprecate wrong plural forms, used in early releases\n\n  if (confettiConfig.emojies) console.error(\"emojies argument is deprecated, please use emojis instead\");\n  if (confettiConfig.confettiesNumber) console.error(\"confettiesNumber argument is deprecated, please use confettiNumber instead\");\n  return {\n    confettiRadius: confettiRadius,\n    confettiNumber: confettiNumber,\n    confettiColors: confettiColors,\n    emojis: emojis,\n    emojiSize: emojiSize,\n    images: images\n  };\n}\n\nvar ConfettiBatch = /*#__PURE__*/function () {\n  function ConfettiBatch(canvasContext) {\n    var _this = this;\n\n    _classCallCheck(this, ConfettiBatch);\n\n    this.canvasContext = canvasContext;\n    this.shapes = [];\n    this.promise = new Promise(function (completionCallback) {\n      return _this.resolvePromise = completionCallback;\n    });\n  }\n\n  _createClass(ConfettiBatch, [{\n    key: \"getBatchCompletePromise\",\n    value: function getBatchCompletePromise() {\n      return this.promise;\n    }\n  }, {\n    key: \"addShapes\",\n    value: function addShapes() {\n      var _this$shapes;\n\n      (_this$shapes = this.shapes).push.apply(_this$shapes, arguments);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      var _a;\n\n      if (this.shapes.length) {\n        return false;\n      }\n\n      (_a = this.resolvePromise) === null || _a === void 0 ? void 0 : _a.call(this);\n      return true;\n    }\n  }, {\n    key: \"processShapes\",\n    value: function processShapes(time, canvasHeight, cleanupInvisibleShapes) {\n      var _this2 = this;\n\n      var timeDelta = time.timeDelta,\n          currentTime = time.currentTime;\n      this.shapes = this.shapes.filter(function (shape) {\n        // Render the shapes in this batch\n        shape.updatePosition(timeDelta, currentTime);\n        shape.draw(_this2.canvasContext); // Only cleanup the shapes if we're being asked to\n\n        if (!cleanupInvisibleShapes) {\n          return true;\n        }\n\n        return shape.getIsVisibleOnCanvas(canvasHeight);\n      });\n    }\n  }]);\n\n  return ConfettiBatch;\n}();\n\nvar JSConfetti = /*#__PURE__*/function () {\n  function JSConfetti() {\n    var jsConfettiConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, JSConfetti);\n\n    this.activeConfettiBatches = [];\n    this.canvas = jsConfettiConfig.canvas || createCanvas();\n    this.canvasContext = this.canvas.getContext('2d');\n    this.requestAnimationFrameRequested = false;\n    this.lastUpdated = new Date().getTime();\n    this.iterationIndex = 0;\n    this.loop = this.loop.bind(this);\n    requestAnimationFrame(this.loop);\n  }\n\n  _createClass(JSConfetti, [{\n    key: \"loop\",\n    value: function loop() {\n      this.requestAnimationFrameRequested = false;\n      fixDPR(this.canvas);\n      var currentTime = new Date().getTime();\n      var timeDelta = currentTime - this.lastUpdated;\n      var canvasHeight = this.canvas.offsetHeight;\n      var cleanupInvisibleShapes = this.iterationIndex % 10 === 0;\n      this.activeConfettiBatches = this.activeConfettiBatches.filter(function (batch) {\n        batch.processShapes({\n          timeDelta: timeDelta,\n          currentTime: currentTime\n        }, canvasHeight, cleanupInvisibleShapes); // Do not remove invisible shapes on every iteration\n\n        if (!cleanupInvisibleShapes) {\n          return true;\n        }\n\n        return !batch.complete();\n      });\n      this.iterationIndex++;\n      this.queueAnimationFrameIfNeeded(currentTime);\n    }\n  }, {\n    key: \"queueAnimationFrameIfNeeded\",\n    value: function queueAnimationFrameIfNeeded(currentTime) {\n      if (this.requestAnimationFrameRequested) {\n        // We already have a pended animation frame, so there is no more work\n        return;\n      }\n\n      if (this.activeConfettiBatches.length < 1) {\n        // No shapes to animate, so don't queue another frame\n        return;\n      }\n\n      this.requestAnimationFrameRequested = true; // Capture the last updated time for animation\n\n      this.lastUpdated = currentTime || new Date().getTime();\n      requestAnimationFrame(this.loop);\n    }\n  }, {\n    key: \"_load\",\n    value: function _load(url) {\n      return new Promise(function (resolve, reject) {\n        var img = new Image();\n\n        img.onload = function () {\n          resolve(img);\n        };\n\n        img.onerror = function (e) {\n          reject(e);\n        };\n\n        img.src = url;\n\n        if (img.complete) {\n          img.onload = null;\n          resolve(img);\n        }\n      });\n    }\n  }, {\n    key: \"_loadImages\",\n    value: function _loadImages(images) {\n      var _this3 = this;\n\n      if (images.length === 0) return Promise.resolve([]);\n      var promises = images.map(function (src) {\n        return _this3._load(src);\n      });\n      return Promise.all(promises);\n    }\n  }, {\n    key: \"addConfetti\",\n    value: function addConfetti() {\n      var _this4 = this;\n\n      var confettiConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _normalizeConfettiCon = normalizeConfettiConfig(confettiConfig),\n          confettiRadius = _normalizeConfettiCon.confettiRadius,\n          confettiNumber = _normalizeConfettiCon.confettiNumber,\n          confettiColors = _normalizeConfettiCon.confettiColors,\n          emojis = _normalizeConfettiCon.emojis,\n          emojiSize = _normalizeConfettiCon.emojiSize,\n          images = _normalizeConfettiCon.images; // Use the bounding rect rather tahn the canvas width / height, because\n      // .width / .height are unset until a layout pass has been completed. Upon\n      // confetti being immediately queued on a page load, this hasn't happened so\n      // the default of 300x150 will be returned, causing an improper source point\n      // for the confetti animation.\n\n\n      var canvasRect = this.canvas.getBoundingClientRect();\n      var canvasWidth = canvasRect.width;\n      var canvasHeight = canvasRect.height;\n      var yPosition = canvasHeight * 5 / 7;\n      var leftConfettiPosition = {\n        x: 0,\n        y: yPosition\n      };\n      var rightConfettiPosition = {\n        x: canvasWidth,\n        y: yPosition\n      };\n      var confettiGroup = new ConfettiBatch(this.canvasContext);\n\n      this._loadImages(images).then(function (resources) {\n        for (var i = 0; i < confettiNumber / 2; i++) {\n          var confettiOnTheRight = new ConfettiShape({\n            initialPosition: leftConfettiPosition,\n            direction: 'right',\n            confettiRadius: confettiRadius,\n            confettiColors: confettiColors,\n            confettiNumber: confettiNumber,\n            emojis: emojis,\n            emojiSize: emojiSize,\n            canvasWidth: canvasWidth,\n            images: images,\n            resources: resources\n          });\n          var confettiOnTheLeft = new ConfettiShape({\n            initialPosition: rightConfettiPosition,\n            direction: 'left',\n            confettiRadius: confettiRadius,\n            confettiColors: confettiColors,\n            confettiNumber: confettiNumber,\n            emojis: emojis,\n            emojiSize: emojiSize,\n            canvasWidth: canvasWidth,\n            images: images,\n            resources: resources\n          });\n          confettiGroup.addShapes(confettiOnTheRight, confettiOnTheLeft);\n        }\n\n        _this4.activeConfettiBatches.push(confettiGroup);\n\n        _this4.queueAnimationFrameIfNeeded();\n      });\n\n      return confettiGroup.getBatchCompletePromise();\n    }\n  }]);\n\n  return JSConfetti;\n}();\n\nexport default JSConfetti;\n", "import { Comment } from 'common/types/Comment'\r\n// \u72EC\u81EA\u62E1\u5F35\u3067\u753B\u50CF\u304C\u4F7F\u3048\u308B\u30D0\u30FC\u30B8\u30E7\u30F3\r\n// @ts-ignore\r\nimport JSConfetti from 'lib/js-confetti'\r\nimport { WordPartyModule } from 'modules'\r\nexport interface PopperConfig {\r\n  pattern: (RegExp | string)[]\r\n  confettiRadius?: number,\r\n  confettiNumber?: number,\r\n  confettiColors?: string[],\r\n  emojis?: string[],\r\n  emojiSize?: number,\r\n  images?: string[]\r\n}\r\nexport class Popper implements WordPartyModule {\r\n  private confetti = new JSConfetti({\r\n    canvas: document.getElementById('popper') as HTMLCanvasElement\r\n  })\r\n  private options: PopperConfig = {\r\n    pattern: [/8+|\uD83D\uDC4F+/gim]\r\n  }\r\n  constructor(_op: Partial<PopperConfig> = {}) {\r\n    Object.assign(this.options, _op)\r\n    document.body.addEventListener('click', () => this._confetti())\r\n  }\r\n  _confetti = async () => {\r\n    return this.confetti.addConfetti(this.options)\r\n  }\r\n  verify(comments: Comment[]) {\r\n    const total = comments.reduce((count, comment) => {\r\n      return this.options.pattern.reduce((c, ptt) => {\r\n        if (typeof ptt === 'string') {\r\n          ptt = new RegExp(ptt, 'igm')\r\n        }\r\n        console.log(comment.data.comment, ptt)\r\n        if (comment.data.comment.search(ptt) !== -1) {\r\n          return c + 1\r\n        }\r\n        return c\r\n      }, count)\r\n    }, 0)\r\n    for (let i = 0; i < Math.min(total, 10); i++) {\r\n      setTimeout(this._confetti, i * 200)\r\n    }\r\n  }\r\n}\r\n\r\n", "import { Engine, Render, Runner, Bodies, Composite } from 'matter-js'\r\nimport { Comment } from 'common/types/Comment'\r\nimport { WordPartyModule } from './index'\r\nconst WALL_SIZE = 30\r\nconst WALL_OPTION = {\r\n  isStatic: true,\r\n  render: {\r\n    fillStyle: 'transparent'\r\n  }\r\n}\r\nconst LIFE_TIME = 3000\r\ninterface SpliteTexture {\r\n  src: string\r\n  size: number\r\n  xScale?: number\r\n  yScale?: number\r\n}\r\nexport interface DropperConfig {\r\n  pattern: (RegExp | string)[]\r\n  textures: SpliteTexture[]\r\n  lifeTime?: number\r\n  magnification?: number\r\n  maxItems?: number\r\n}\r\nconst DEFAULT_CONFIG: Required<DropperConfig> = {\r\n  pattern: [/w/gim],\r\n  lifeTime: 3000,\r\n  textures: [],\r\n  magnification: 3,\r\n  maxItems: 50,\r\n}\r\nclass DropItem {\r\n  private _item: Matter.Body\r\n  private _timer: number\r\n  get body() {\r\n    return this._item\r\n  }\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n    public lifeTime: number,\r\n    public texture: SpliteTexture,\r\n    public callback: (item: Matter.Body) => void\r\n  ) {\r\n    this._item = Bodies.circle(\r\n      x,\r\n      y,\r\n      texture.size,\r\n      {\r\n        // density: 0.0005, // \u5BC6\u5EA6: \u5358\u4F4D\u9762\u7A4D\u3042\u305F\u308A\u306E\u8CEA\u91CF\r\n        // frictionAir: 0.06, // \u7A7A\u6C17\u62B5\u6297(\u7A7A\u6C17\u6469\u64E6)\r\n        restitution: 0.9, // \u5F3E\u529B\u6027\r\n        // friction: 0.01, // \u672C\u4F53\u306E\u6469\u64E6\r\n        // angle: -Math.PI * 0.15,\r\n        render: {\r\n          sprite: {\r\n            texture: texture.src,\r\n            xScale: texture.xScale || 1,\r\n            yScale: texture.yScale || 1,\r\n          }\r\n        }\r\n      })\r\n    this._timer = setTimeout(() => {\r\n      callback(this._item)\r\n    }, lifeTime)\r\n  }\r\n  remove() {\r\n    clearTimeout(this._timer)\r\n    this.callback(this._item)\r\n  }\r\n}\r\nexport class Dropper implements WordPartyModule {\r\n  public stageWidth = window.innerWidth\r\n  public stageHeight = window.innerHeight\r\n  public engine = Engine.create()\r\n  public render: Render\r\n  public options: DropperConfig = Object.assign({}, DEFAULT_CONFIG)\r\n  private _items: DropItem[] = []\r\n  constructor(_op: DropperConfig) {\r\n    Object.assign(this.options, _op)\r\n    const canvas = document.getElementById('dropper') as HTMLCanvasElement\r\n    this.render = Render.create({\r\n      canvas,\r\n      engine: this.engine,\r\n      options: {\r\n        background: 'transparent',\r\n        width: this.stageWidth,\r\n        height: this.stageHeight,\r\n        // hasBounds: true,\r\n        wireframes: false,\r\n        // showSleeping: true,\r\n        // showDebug: true,\r\n        // showBroadphase: true,\r\n        // showBounds: true,\r\n        // showVelocity: true,\r\n        // showCollisions: true,\r\n        // showSeparations: true,\r\n        // showAxes: true,\r\n        // showPositions: true,\r\n        // showAngleIndicator: false,\r\n        // showIds: false,\r\n        // showShadows: false,\r\n        // showVertexNumbers: false,\r\n        // showConvexHulls: true,\r\n        // showInternalEdges: true\r\n      }\r\n    })\r\n\r\n    const leftWall = Bodies.rectangle(-(WALL_SIZE / 2 - 1), this.stageHeight / 2, WALL_SIZE, this.stageHeight, WALL_OPTION)\r\n    const rightWall = Bodies.rectangle(this.stageWidth + WALL_SIZE / 2 - 1, this.stageHeight / 2, WALL_SIZE, this.stageHeight, WALL_OPTION)\r\n    const ground = Bodies.rectangle(this.stageWidth / 2, this.stageHeight + WALL_SIZE / 2 - 1, this.stageWidth, WALL_SIZE, WALL_OPTION)\r\n\r\n    Composite.add(this.engine.world, [ground, leftWall, rightWall])\r\n    Render.run(this.render)\r\n\r\n    const runner = Runner.create()\r\n    Runner.run(runner, this.engine)\r\n\r\n    document.body.addEventListener('click', () => this.drop())\r\n  }\r\n  drop() {\r\n    const x = Math.random() * this.stageWidth\r\n    const y = Math.random() * this.stageHeight / 3\r\n    const texture = this.options.textures[Math.floor(Math.random() * this.options.textures.length)]\r\n    const item = new DropItem(x, y, this.options.lifeTime || DEFAULT_CONFIG.lifeTime, texture, (body) => {\r\n      Composite.remove(this.engine.world, body)\r\n    })\r\n    this._items.unshift(item)\r\n    Composite.add(this.engine.world, [item.body])\r\n\r\n    const max = this.options.maxItems || DEFAULT_CONFIG.maxItems\r\n    if (this._items.length > max) {\r\n      const deleted = this._items.splice(max, this._items.length)\r\n      deleted.forEach((d) => {\r\n        d.remove()\r\n      })\r\n    }\r\n  }\r\n  verify(comments: Comment[]) {\r\n    const total = comments.reduce((count, comment) => {\r\n      return this.options.pattern.reduce((c, ptt) => {\r\n        if (typeof ptt === 'string') {\r\n          ptt = new RegExp(ptt, 'igm')\r\n        }\r\n        const len = comment.data.comment.split(ptt).length - 1\r\n       return c + len\r\n      }, count)\r\n    }, 0)\r\n    const mag = this.options.magnification || DEFAULT_CONFIG.magnification\r\n    for (let i = 0; i < total * mag; i++) {\r\n      this.drop()\r\n    }\r\n  }\r\n}\r\n\r\n", "import { Comment, CommentData, Listener } from '../common/types/Comment'\r\ntype CommentSubscriber = (comments: Comment[]) => void\r\ntype ListenerSubscriber = (listeners: Listener[]) => void\r\n\r\nexport const ONE_SDK = {\r\n  _timer: -1,\r\n  _lastId: '',\r\n  _commentSubscribers: new Map<CommentSubscriber, CommentSubscriber>(),\r\n  _listenerSubscribers: new Map<ListenerSubscriber, ListenerSubscriber>(),\r\n  init(jsonPath: string) {\r\n    const request = () => {\r\n      fetch(jsonPath)\r\n        .then(res => res.json())\r\n        .then(async(res: CommentData) => {\r\n          const { comments, listeners } = res\r\n          let index = comments.findIndex((comment) => {\r\n            return this._lastId === comment.data.id\r\n          })\r\n          if (index === -1) {\r\n            index = 0\r\n          }\r\n          const newComments = comments.slice(index + 1)\r\n          if (newComments.length !== 0) {\r\n            this._lastId = newComments[newComments.length - 1].data.id\r\n            this._publishComment(newComments)\r\n          }\r\n          this._publishListener(listeners)\r\n          this._timer = setTimeout(request, 2000)\r\n        })\r\n        .catch((e) => {\r\n          console.error(e)\r\n          this._timer = setTimeout(request, 5000)\r\n        })\r\n    }\r\n    request()\r\n  },\r\n  _publishComment(comments: Comment[]) {\r\n    this._commentSubscribers.forEach(subscriber => {\r\n      subscriber(comments)\r\n    })\r\n  },\r\n  _publishListener(listeners: Listener[]) {\r\n    this._listenerSubscribers.forEach(subscriber => {\r\n      subscriber(listeners)\r\n    })\r\n  },\r\n  subscribeComment(subscriber: CommentSubscriber) {\r\n    this._commentSubscribers.set(subscriber, subscriber)\r\n  },\r\n  unsbscribeComment(subscriber: CommentSubscriber) {\r\n    this._commentSubscribers.delete(subscriber)\r\n  },\r\n  subscribeListener(subscriber: ListenerSubscriber) {\r\n    this._listenerSubscribers.set(subscriber, subscriber)\r\n  },\r\n  unsubscribeListener(subscriber: ListenerSubscriber) {\r\n    this._listenerSubscribers.delete(subscriber)\r\n  }\r\n}\r\n", "import { Comment } from 'common/types/Comment'\r\nimport { WordPartyModule } from 'modules'\r\ninterface NotifyItemConfig {\r\n  pattern: (RegExp | string)[],\r\n  image: string\r\n  lifeTime: number\r\n  only?: boolean\r\n  width?: number\r\n  height?: number\r\n  x?: number\r\n  y?: number\r\n}\r\nexport interface NitifyConfig {\r\n  items: NotifyItemConfig[]\r\n  maxItems?: number\r\n}\r\nconst SAFE_MARGIN = 300\r\nclass NotifyItem {\r\n  private _element: HTMLDivElement = document.createElement('div')\r\n  private _timer: number\r\n  constructor(public parent: HTMLElement, public conf: NotifyItemConfig, callback: (item: NotifyItem) => void) {\r\n    const img = new Image()\r\n    img.src = conf.image\r\n    if (conf.width) {\r\n      img.width = conf.width\r\n    }\r\n    if (conf.height) {\r\n      img.height = conf.height\r\n    }\r\n    const x = conf.x || Math.floor(Math.random() * window.innerWidth - SAFE_MARGIN + SAFE_MARGIN / 2)\r\n    const y = conf.y || Math.floor(Math.random() * window.innerHeight - SAFE_MARGIN + SAFE_MARGIN / 2)\r\n    this._element.className = 'notify'\r\n    this._element.style.transform = `translate(${x}px, ${y}px)`;\r\n    this._element.appendChild(img)\r\n    this.parent.appendChild(this._element)\r\n    this._timer = setTimeout(() => {\r\n      this.remove()\r\n    }, conf.lifeTime || 5000)\r\n  }\r\n  remove() {\r\n    clearInterval(this._timer)\r\n    if (this._element) {\r\n      this.parent.removeChild(this._element)\r\n      // @ts-ignore\r\n      this._element = null\r\n    }\r\n  }\r\n}\r\nexport class Notify implements WordPartyModule {\r\n  private _options: NitifyConfig = {\r\n    items: [],\r\n    maxItems: 20\r\n  }\r\n  private _container: HTMLElement = document.getElementById('notify') as HTMLElement\r\n  private _items: NotifyItem[] =[]\r\n  constructor(_op: NitifyConfig) {\r\n    Object.assign(this._options, _op)\r\n    document.body.addEventListener('click', () => {\r\n      const item = this._options.items[Math.floor(Math.random() * this._options.items.length)]\r\n      this.showItem(item)\r\n    })\r\n  }\r\n  showItem(conf: NotifyItemConfig) {\r\n    const n = new NotifyItem(this._container, conf, (item) => {\r\n      item.remove()\r\n    })\r\n    \r\n    if (conf.only) {\r\n      const index = this._items.findIndex(item => item.conf === conf)\r\n      console.log(index)\r\n      if (index !== -1) {\r\n        const deleted = this._items.splice(index, 1)\r\n        deleted.forEach((d) => {\r\n          d.remove()\r\n       })\r\n      }\r\n    }\r\n    this._items.unshift(n)\r\n    const max = this._options.maxItems || 20\r\n    if (this._items.length > max) {\r\n      const deleted = this._items.splice(max, this._items.length)\r\n      deleted.forEach((d) => {\r\n        d.remove()\r\n      })\r\n    }\r\n  }\r\n  verify(comments: Comment[]): void {\r\n    const hits: NotifyItemConfig[] = []\r\n    comments.forEach((comment) => {\r\n      const hit = this._options.items.find((item) => {\r\n        return item.pattern.some((ptt) => {\r\n          if (typeof ptt === 'string') {\r\n            ptt = new RegExp(ptt, 'gim')\r\n          }\r\n          if (comment.data.comment.search(ptt) !== -1) {\r\n            return true\r\n          }\r\n          return false\r\n        })\r\n      })\r\n      if (hit) {\r\n        hits.push(hit)\r\n      }\r\n    })\r\n    console.log(hits)\r\n    if (hits.length !== 0) {\r\n      hits.forEach(item => {\r\n        this.showItem(item)\r\n      })\r\n    }\r\n  }\r\n}", "import { Popper, PopperConfig } from './modules/popper';\r\nimport { Dropper, DropperConfig } from './modules/dropper';\r\nimport { ONE_SDK  } from './sdk/sdk'\r\nimport { Comment } from './common/types/Comment'\r\nimport { WordPartyModule } from 'modules';\r\nimport { NitifyConfig, Notify } from 'modules/notify';\r\n\r\ninterface WordPartyOptions {\r\n  jsonPath: string\r\n  use: {\r\n    popper: boolean\r\n    dropper: boolean\r\n    notify: boolean\r\n  }\r\n  popperConfig: PopperConfig\r\n  dropperConfig: DropperConfig\r\n  notifyConfig: NitifyConfig\r\n}\r\n\r\nconst DEFAULT_OPTIONS: WordPartyOptions = {\r\n  jsonPath: '../../comment.json',\r\n  use: {\r\n    popper: true,\r\n    dropper: true,\r\n    notify: true\r\n  },\r\n  popperConfig: {\r\n    pattern: ['88', '\uD83D\uDC4F'],\r\n  },\r\n  dropperConfig: {\r\n    pattern: ['ww', '\u8349'],\r\n    textures: [\r\n      {\r\n        src: './paw.png',\r\n        size: 24,\r\n        xScale: 1.5,\r\n        yScale: 1.5\r\n      }\r\n    ]\r\n  },\r\n  notifyConfig: {\r\n    items: [],\r\n    maxItems: 20\r\n  }\r\n}\r\n\r\nfunction main(_op: Partial<WordPartyOptions> = {}) {\r\n  const options = Object.assign({}, DEFAULT_OPTIONS, _op)\r\n  const modules: WordPartyModule[] = []\r\n  if (options.use.popper) {\r\n    const popper = new Popper(options.popperConfig)\r\n    modules.push(popper)\r\n  }\r\n  if (options.use.dropper) {\r\n    const dropper = new Dropper(options.dropperConfig)\r\n    modules.push(dropper)\r\n  }\r\n  if (options.use.notify) {\r\n    const notify = new Notify(options.notifyConfig)\r\n    modules.push(notify)\r\n  }\r\n  ONE_SDK.init(options.jsonPath)\r\n  ONE_SDK.subscribeComment((comments: Comment[]) => {\r\n    modules.forEach(mod => {\r\n      mod.verify(comments)\r\n    })\r\n  })\r\n}\r\n\r\n(window as any).WordParty = {\r\n  start: main\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AA2BA,MAAC,2CAA0C,MAAM,SAAS;AACzD,YAAG,OAAO,YAAY,YAAY,OAAO,WAAW;AACnD,iBAAO,UAAU;AAAA,iBACV,OAAO,WAAW,cAAc,OAAO;AAC9C,iBAAO,UAAU,IAAI;AAAA,iBACd,OAAO,YAAY;AAC1B,kBAAQ,YAAY;AAAA;AAEpB,eAAK,YAAY;AAAA,SAChB,SAAM,WAAW;AACpB,eAAiB,SAAS,SAAS;AAEzB,cAAI,mBAAmB;AAGvB,uCAA6B,UAAU;AAGtC,gBAAG,iBAAiB,WAAW;AAC9B,qBAAO,iBAAiB,UAAU;AAAA;AAGnC,gBAAI,UAAS,iBAAiB,YAAY;AAAA,cACzC,GAAG;AAAA,cACH,GAAG;AAAA,cACH,SAAS;AAAA;AAIV,oBAAQ,UAAU,KAAK,QAAO,SAAS,SAAQ,QAAO,SAAS;AAG/D,oBAAO,IAAI;AAGX,mBAAO,QAAO;AAAA;AAKf,8BAAoB,IAAI;AAGxB,8BAAoB,IAAI;AAGxB,8BAAoB,IAAI,SAAS,UAAS,MAAM,QAAQ;AACvD,gBAAG,CAAC,oBAAoB,EAAE,UAAS,OAAO;AACzC,qBAAO,eAAe,UAAS,MAAM,EAAE,YAAY,MAAM,KAAK;AAAA;AAAA;AAKhE,8BAAoB,IAAI,SAAS,UAAS;AACzC,gBAAG,OAAO,WAAW,eAAe,OAAO,aAAa;AACvD,qBAAO,eAAe,UAAS,OAAO,aAAa,EAAE,OAAO;AAAA;AAE7D,mBAAO,eAAe,UAAS,cAAc,EAAE,OAAO;AAAA;AAQvD,8BAAoB,IAAI,SAAS,OAAO,MAAM;AAC7C,gBAAG,OAAO;AAAG,sBAAQ,oBAAoB;AACzC,gBAAG,OAAO;AAAG,qBAAO;AACpB,gBAAI,OAAO,KAAM,OAAO,UAAU,YAAY,SAAS,MAAM;AAAY,qBAAO;AAChF,gBAAI,KAAK,uBAAO,OAAO;AACvB,gCAAoB,EAAE;AACtB,mBAAO,eAAe,IAAI,WAAW,EAAE,YAAY,MAAM;AACzD,gBAAG,OAAO,KAAK,OAAO,SAAS;AAAU,uBAAQ,OAAO;AAAO,oCAAoB,EAAE,IAAI,KAAK,SAAS,MAAK;AAAE,yBAAO,MAAM;AAAA,kBAAQ,KAAK,MAAM;AAC9I,mBAAO;AAAA;AAIR,8BAAoB,IAAI,SAAS,SAAQ;AACxC,gBAAI,SAAS,WAAU,QAAO,aAC7B,sBAAsB;AAAE,qBAAO,QAAO;AAAA,gBACtC,4BAA4B;AAAE,qBAAO;AAAA;AACtC,gCAAoB,EAAE,QAAQ,KAAK;AACnC,mBAAO;AAAA;AAIR,8BAAoB,IAAI,SAAS,QAAQ,UAAU;AAAE,mBAAO,OAAO,UAAU,eAAe,KAAK,QAAQ;AAAA;AAGzG,8BAAoB,IAAI;AAIxB,iBAAO,oBAAoB,oBAAoB,IAAI;AAAA,UAGnD;AAAA,UAEH,SAAS,SAAQ,UAAS;AAQjC,gBAAI,SAAS;AAEb,oBAAO,UAAU;AAEjB,YAAC,YAAW;AAER,qBAAO,UAAU;AACjB,qBAAO,QAAQ;AACf,qBAAO,gBAAgB,CAAE,IAAI;AAC7B,qBAAO,cAAc;AACrB,qBAAO,UAAU;AASjB,qBAAO,SAAS,SAAS,KAAK,MAAM;AAChC,oBAAI,WACA,MACA;AAEJ,oBAAI,OAAO,SAAS,WAAW;AAC3B,8BAAY;AACZ,8BAAY;AAAA,uBACT;AACH,8BAAY;AACZ,8BAAY;AAAA;AAGhB,yBAAS,IAAI,WAAW,IAAI,UAAU,QAAQ,KAAK;AAC/C,sBAAI,SAAS,UAAU;AAEvB,sBAAI,QAAQ;AACR,6BAAS,QAAQ,QAAQ;AACrB,0BAAI,aAAa,OAAO,SAAS,OAAO,MAAM,gBAAgB,QAAQ;AAClE,4BAAI,CAAC,IAAI,SAAS,IAAI,MAAM,gBAAgB,QAAQ;AAChD,8BAAI,QAAQ,IAAI,SAAS;AACzB,iCAAO,OAAO,IAAI,OAAO,WAAW,OAAO;AAAA,+BACxC;AACH,8BAAI,QAAQ,OAAO;AAAA;AAAA,6BAEpB;AACH,4BAAI,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAMnC,uBAAO;AAAA;AAUX,qBAAO,QAAQ,SAAS,KAAK,MAAM;AAC/B,uBAAO,OAAO,OAAO,IAAI,MAAM;AAAA;AASnC,qBAAO,OAAO,SAAS,KAAK;AACxB,oBAAI,OAAO;AACP,yBAAO,OAAO,KAAK;AAGvB,oBAAI,OAAO;AACX,yBAAS,OAAO;AACZ,uBAAK,KAAK;AACd,uBAAO;AAAA;AASX,qBAAO,SAAS,SAAS,KAAK;AAC1B,oBAAI,SAAS;AAEb,oBAAI,OAAO,MAAM;AACb,sBAAI,OAAO,OAAO,KAAK;AACvB,2BAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,2BAAO,KAAK,IAAI,KAAK;AAAA;AAEzB,yBAAO;AAAA;AAIX,yBAAS,OAAO;AACZ,yBAAO,KAAK,IAAI;AACpB,uBAAO;AAAA;AAYX,qBAAO,MAAM,SAAS,KAAK,MAAM,OAAO,KAAK;AACzC,uBAAO,KAAK,MAAM,KAAK,MAAM,OAAO;AAEpC,yBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACrC,wBAAM,IAAI,KAAK;AAAA;AAGnB,uBAAO;AAAA;AAaX,qBAAO,MAAM,SAAS,KAAK,MAAM,KAAK,OAAO,KAAK;AAC9C,oBAAI,QAAQ,KAAK,MAAM,KAAK,MAAM,OAAO;AACzC,uBAAO,IAAI,KAAK,MAAM,GAAG,IAAI,MAAM,MAAM,SAAS,MAAM;AACxD,uBAAO;AAAA;AAUX,qBAAO,UAAU,SAAS,OAAO;AAC7B,yBAAS,IAAI,MAAM,SAAS,GAAG,IAAI,GAAG,KAAK;AACvC,sBAAI,IAAI,KAAK,MAAM,OAAO,WAAY,KAAI;AAC1C,sBAAI,OAAO,MAAM;AACjB,wBAAM,KAAK,MAAM;AACjB,wBAAM,KAAK;AAAA;AAEf,uBAAO;AAAA;AAUX,qBAAO,SAAS,SAAS,SAAS;AAC9B,uBAAO,QAAQ,KAAK,MAAM,OAAO,WAAW,QAAQ;AAAA;AASxD,qBAAO,YAAY,SAAS,KAAK;AAC7B,oBAAI,OAAO,gBAAgB,aAAa;AACpC,yBAAO,eAAe;AAAA;AAG1B,uBAAO,CAAC,CAAE,QAAO,IAAI,YAAY,IAAI;AAAA;AASzC,qBAAO,UAAU,SAAS,KAAK;AAC3B,uBAAO,OAAO,UAAU,SAAS,KAAK,SAAS;AAAA;AASnD,qBAAO,aAAa,SAAS,KAAK;AAC9B,uBAAO,OAAO,QAAQ;AAAA;AAS1B,qBAAO,gBAAgB,SAAS,KAAK;AACjC,uBAAO,OAAO,QAAQ,YAAY,IAAI,gBAAgB;AAAA;AAS1D,qBAAO,WAAW,SAAS,KAAK;AAC5B,uBAAO,SAAS,KAAK,SAAS;AAAA;AAWlC,qBAAO,QAAQ,SAAS,OAAO,KAAK,KAAK;AACrC,oBAAI,QAAQ;AACR,yBAAO;AACX,oBAAI,QAAQ;AACR,yBAAO;AACX,uBAAO;AAAA;AASX,qBAAO,OAAO,SAAS,OAAO;AAC1B,uBAAO,QAAQ,IAAI,KAAK;AAAA;AAS5B,qBAAO,MAAM,WAAW;AACpB,oBAAI,OAAO,WAAW,eAAe,OAAO,aAAa;AACrD,sBAAI,OAAO,YAAY,KAAK;AACxB,2BAAO,OAAO,YAAY;AAAA,6BACnB,OAAO,YAAY,WAAW;AACrC,2BAAO,OAAO,YAAY;AAAA;AAAA;AAIlC,oBAAI,KAAK,KAAK;AACV,yBAAO,KAAK;AAAA;AAGhB,uBAAQ,IAAI,SAAU,OAAO;AAAA;AAWjC,qBAAO,SAAS,SAAS,KAAK,KAAK;AAC/B,sBAAO,OAAO,QAAQ,cAAe,MAAM;AAC3C,sBAAO,OAAO,QAAQ,cAAe,MAAM;AAC3C,uBAAO,MAAM,kBAAmB,OAAM;AAAA;AAG1C,kBAAI,gBAAgB,WAAW;AAE3B,uBAAO,QAAS,QAAO,QAAQ,OAAO,SAAS;AAC/C,uBAAO,OAAO,QAAQ;AAAA;AAS1B,qBAAO,gBAAgB,SAAS,aAAa;AACzC,8BAAc,YAAY,QAAQ,KAAI;AAEtC,oBAAI,YAAY,UAAU,GAAG;AACzB,gCAAc,YAAY,OAAO,KAAK,YAAY,OAAO,KAC3C,YAAY,OAAO,KAAK,YAAY,OAAO,KAC3C,YAAY,OAAO,KAAK,YAAY,OAAO;AAAA;AAG7D,uBAAO,SAAS,aAAa;AAAA;AAiBjC,qBAAO,WAAW;AAQlB,qBAAO,MAAM,WAAW;AACpB,oBAAI,WAAW,OAAO,WAAW,KAAK,OAAO,YAAY,GAAG;AACxD,0BAAQ,IAAI,MAAM,SAAS,CAAC,cAAc,OAAO,MAAM,UAAU,MAAM,KAAK;AAAA;AAAA;AAUpF,qBAAO,OAAO,WAAW;AACrB,oBAAI,WAAW,OAAO,WAAW,KAAK,OAAO,YAAY,GAAG;AACxD,0BAAQ,KAAK,MAAM,SAAS,CAAC,cAAc,OAAO,MAAM,UAAU,MAAM,KAAK;AAAA;AAAA;AAUrF,qBAAO,OAAO,WAAW;AACrB,oBAAI,WAAW,OAAO,WAAW,KAAK,OAAO,YAAY,GAAG;AACxD,0BAAQ,KAAK,MAAM,SAAS,CAAC,cAAc,OAAO,MAAM,UAAU,MAAM,KAAK;AAAA;AAAA;AASrF,qBAAO,WAAW,WAAW;AACzB,oBAAI,UAAU,MAAM,UAAU,MAAM,KAAK,WAAW,KAAK;AAEzD,oBAAI,CAAC,OAAO,YAAY,UAAU;AAC9B,yBAAO,KAAK;AACZ,yBAAO,YAAY,WAAW;AAAA;AAAA;AAatC,qBAAO,aAAa,SAAS,KAAK,MAAM,SAAS;AAC7C,oBAAI,QAAQ,OAAO,MAAM,WAAW;AAChC,yBAAO,SAAS,kCAAoB;AAAA,mBACrC,IAAI;AAAA;AAQX,qBAAO,SAAS,WAAW;AACvB,uBAAO,OAAO;AAAA;AAUlB,qBAAO,UAAU,SAAS,UAAU,QAAQ;AACxC,oBAAI,SAAS;AACT,yBAAO,SAAS,QAAQ;AAE5B,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAI,SAAS,OAAO;AAChB,2BAAO;AAAA;AAGf,uBAAO;AAAA;AAUX,qBAAO,MAAM,SAAS,MAAM,MAAM;AAC9B,oBAAI,KAAK,KAAK;AACV,yBAAO,KAAK,IAAI;AAAA;AAGpB,oBAAI,SAAS;AAEb,yBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACrC,yBAAO,KAAK,KAAK,KAAK;AAAA;AAG1B,uBAAO;AAAA;AAUX,qBAAO,kBAAkB,SAAS,OAAO;AAIrC,oBAAI,SAAS,IACT,UAAU,IACV,OAAO;AAEX,yBAAS,QAAQ,OAAO;AACpB,sBAAI,CAAC,QAAQ,SAAS,CAAC,KAAK,OAAO;AAC/B,2BAAO,iBAAiB,MAAM,SAAS,MAAM,OAAO;AAAA;AAAA;AAI5D,uBAAO;AAAA;AAGX,qBAAO,mBAAmB,SAAS,MAAM,SAAS,MAAM,OAAO,QAAQ;AACnE,oBAAI,YAAY,MAAM,SAAS;AAC/B,qBAAK,QAAQ;AAEb,yBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC1C,sBAAI,WAAW,UAAU;AAEzB,sBAAI,KAAK,WAAW;AAEhB;AAAA;AAGJ,sBAAI,CAAC,QAAQ,WAAW;AACpB,2BAAO,iBAAiB,UAAU,SAAS,MAAM,OAAO;AAAA;AAAA;AAIhE,qBAAK,QAAQ;AACb,wBAAQ,QAAQ;AAEhB,uBAAO,KAAK;AAAA;AAchB,qBAAO,QAAQ,WAAW;AACtB,oBAAI,QAAQ;AAEZ,yBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC1C,sBAAI,OAAO,UAAU;AAErB,sBAAI,KAAK,UAAU;AAEf,0BAAM,KAAK,MAAM,OAAO,KAAK;AAAA,yBAC1B;AACH,0BAAM,KAAK;AAAA;AAAA;AAInB,oBAAI,QAAQ,WAAW;AAEnB,sBAAI,YACA,OAAO,IAAI,MAAM,UAAU;AAE/B,2BAAS,KAAI,GAAG,IAAI,UAAU,QAAQ,KAAI,GAAG,MAAK;AAC9C,yBAAK,MAAK,UAAU;AAAA;AAGxB,uBAAK,KAAI,GAAG,KAAI,MAAM,QAAQ,MAAK,GAAG;AAClC,wBAAI,SAAS,MAAM,IAAG,MAAM,YAAY;AAExC,wBAAI,OAAO,WAAW,aAAa;AAC/B,mCAAa;AAAA;AAAA;AAIrB,yBAAO;AAAA;AAGX,sBAAM,WAAW;AAEjB,uBAAO;AAAA;AAYX,qBAAO,kBAAkB,SAAS,MAAM,MAAM,MAAM;AAChD,uBAAO,OAAO,IAAI,MAAM,MAAM,OAAO,MACjC,MACA,OAAO,IAAI,MAAM;AAAA;AAazB,qBAAO,iBAAiB,SAAS,MAAM,MAAM,MAAM;AAC/C,uBAAO,OAAO,IAAI,MAAM,MAAM,OAAO,MACjC,OAAO,IAAI,MAAM,OACjB;AAAA;AAUR,qBAAO,YAAY,SAAS,QAAQ;AAChC,uBAAO,UAAU;AAAA;AASrB,qBAAO,YAAY,WAAW;AAE1B,oBAAI,SAAS,OAAO;AAEpB,oBAAI;AAEA,sBAAI,CAAC,UAAU,OAAO,WAAW,aAAa;AAC1C,6BAAS,OAAO;AAAA;AAIpB,sBAAI,CAAC,UAAU,OAAO,WAAW,aAAa;AAC1C,6BAAS,OAAO;AAAA;AAAA,yBAEf,GAAP;AAEE,2BAAS;AAAA;AAGb,uBAAO;AAAA;AAAA;AAAA;AAAA,UAOR,SAAS,SAAQ,UAAS;AAQjC,gBAAI,SAAS;AAEb,oBAAO,UAAU;AAEjB,YAAC,YAAW;AAQR,qBAAO,SAAS,SAAS,UAAU;AAC/B,oBAAI,SAAS;AAAA,kBACT,KAAK,EAAE,GAAG,GAAG,GAAG;AAAA,kBAChB,KAAK,EAAE,GAAG,GAAG,GAAG;AAAA;AAGpB,oBAAI;AACA,yBAAO,OAAO,QAAQ;AAE1B,uBAAO;AAAA;AAUX,qBAAO,SAAS,SAAS,QAAQ,UAAU,UAAU;AACjD,uBAAO,IAAI,IAAI;AACf,uBAAO,IAAI,IAAI;AACf,uBAAO,IAAI,IAAI;AACf,uBAAO,IAAI,IAAI;AAEf,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAI,SAAS,SAAS;AACtB,sBAAI,OAAO,IAAI,OAAO,IAAI;AAAG,2BAAO,IAAI,IAAI,OAAO;AACnD,sBAAI,OAAO,IAAI,OAAO,IAAI;AAAG,2BAAO,IAAI,IAAI,OAAO;AACnD,sBAAI,OAAO,IAAI,OAAO,IAAI;AAAG,2BAAO,IAAI,IAAI,OAAO;AACnD,sBAAI,OAAO,IAAI,OAAO,IAAI;AAAG,2BAAO,IAAI,IAAI,OAAO;AAAA;AAGvD,oBAAI,UAAU;AACV,sBAAI,SAAS,IAAI,GAAG;AAChB,2BAAO,IAAI,KAAK,SAAS;AAAA,yBACtB;AACH,2BAAO,IAAI,KAAK,SAAS;AAAA;AAG7B,sBAAI,SAAS,IAAI,GAAG;AAChB,2BAAO,IAAI,KAAK,SAAS;AAAA,yBACtB;AACH,2BAAO,IAAI,KAAK,SAAS;AAAA;AAAA;AAAA;AAYrC,qBAAO,WAAW,SAAS,QAAQ,OAAO;AACtC,uBAAO,MAAM,KAAK,OAAO,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,KAC9C,MAAM,KAAK,OAAO,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI;AAAA;AAU/D,qBAAO,WAAW,SAAS,SAAS,SAAS;AACzC,uBAAQ,QAAQ,IAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,IAAI,KAC5D,QAAQ,IAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,IAAI;AAAA;AAS9E,qBAAO,YAAY,SAAS,QAAQ,QAAQ;AACxC,uBAAO,IAAI,KAAK,OAAO;AACvB,uBAAO,IAAI,KAAK,OAAO;AACvB,uBAAO,IAAI,KAAK,OAAO;AACvB,uBAAO,IAAI,KAAK,OAAO;AAAA;AAS3B,qBAAO,QAAQ,SAAS,QAAQ,UAAU;AACtC,oBAAI,SAAS,OAAO,IAAI,IAAI,OAAO,IAAI,GACnC,SAAS,OAAO,IAAI,IAAI,OAAO,IAAI;AAEvC,uBAAO,IAAI,IAAI,SAAS;AACxB,uBAAO,IAAI,IAAI,SAAS,IAAI;AAC5B,uBAAO,IAAI,IAAI,SAAS;AACxB,uBAAO,IAAI,IAAI,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA,UAQ7B,SAAS,SAAQ,UAAS;AAcjC,gBAAI,SAAS;AAEb,oBAAO,UAAU;AAEjB,YAAC,YAAW;AASR,qBAAO,SAAS,SAAS,GAAG,GAAG;AAC3B,uBAAO,EAAE,GAAG,KAAK,GAAG,GAAG,KAAK;AAAA;AAShC,qBAAO,QAAQ,SAAS,QAAQ;AAC5B,uBAAO,EAAE,GAAG,OAAO,GAAG,GAAG,OAAO;AAAA;AASpC,qBAAO,YAAY,SAAS,QAAQ;AAChC,uBAAO,KAAK,KAAM,OAAO,IAAI,OAAO,IAAM,OAAO,IAAI,OAAO;AAAA;AAShE,qBAAO,mBAAmB,SAAS,QAAQ;AACvC,uBAAQ,OAAO,IAAI,OAAO,IAAM,OAAO,IAAI,OAAO;AAAA;AAWtD,qBAAO,SAAS,SAAS,QAAQ,OAAO,QAAQ;AAC5C,oBAAI,MAAM,KAAK,IAAI,QAAQ,MAAM,KAAK,IAAI;AAC1C,oBAAI,CAAC;AAAQ,2BAAS;AACtB,oBAAI,IAAI,OAAO,IAAI,MAAM,OAAO,IAAI;AACpC,uBAAO,IAAI,OAAO,IAAI,MAAM,OAAO,IAAI;AACvC,uBAAO,IAAI;AACX,uBAAO;AAAA;AAYX,qBAAO,cAAc,SAAS,QAAQ,OAAO,OAAO,QAAQ;AACxD,oBAAI,MAAM,KAAK,IAAI,QAAQ,MAAM,KAAK,IAAI;AAC1C,oBAAI,CAAC;AAAQ,2BAAS;AACtB,oBAAI,IAAI,MAAM,IAAM,SAAO,IAAI,MAAM,KAAK,MAAO,QAAO,IAAI,MAAM,KAAK;AACvE,uBAAO,IAAI,MAAM,IAAM,SAAO,IAAI,MAAM,KAAK,MAAO,QAAO,IAAI,MAAM,KAAK;AAC1E,uBAAO,IAAI;AACX,uBAAO;AAAA;AASX,qBAAO,YAAY,SAAS,QAAQ;AAChC,oBAAI,YAAY,OAAO,UAAU;AACjC,oBAAI,cAAc;AACd,yBAAO,EAAE,GAAG,GAAG,GAAG;AACtB,uBAAO,EAAE,GAAG,OAAO,IAAI,WAAW,GAAG,OAAO,IAAI;AAAA;AAUpD,qBAAO,MAAM,SAAS,SAAS,SAAS;AACpC,uBAAQ,QAAQ,IAAI,QAAQ,IAAM,QAAQ,IAAI,QAAQ;AAAA;AAU1D,qBAAO,QAAQ,SAAS,SAAS,SAAS;AACtC,uBAAQ,QAAQ,IAAI,QAAQ,IAAM,QAAQ,IAAI,QAAQ;AAAA;AAW1D,qBAAO,SAAS,SAAS,SAAS,SAAS,SAAS;AAChD,uBAAQ,SAAQ,IAAI,QAAQ,KAAM,SAAQ,IAAI,QAAQ,KAAM,SAAQ,IAAI,QAAQ,KAAM,SAAQ,IAAI,QAAQ;AAAA;AAW9G,qBAAO,MAAM,SAAS,SAAS,SAAS,QAAQ;AAC5C,oBAAI,CAAC;AAAQ,2BAAS;AACtB,uBAAO,IAAI,QAAQ,IAAI,QAAQ;AAC/B,uBAAO,IAAI,QAAQ,IAAI,QAAQ;AAC/B,uBAAO;AAAA;AAWX,qBAAO,MAAM,SAAS,SAAS,SAAS,QAAQ;AAC5C,oBAAI,CAAC;AAAQ,2BAAS;AACtB,uBAAO,IAAI,QAAQ,IAAI,QAAQ;AAC/B,uBAAO,IAAI,QAAQ,IAAI,QAAQ;AAC/B,uBAAO;AAAA;AAUX,qBAAO,OAAO,SAAS,QAAQ,QAAQ;AACnC,uBAAO,EAAE,GAAG,OAAO,IAAI,QAAQ,GAAG,OAAO,IAAI;AAAA;AAUjD,qBAAO,MAAM,SAAS,QAAQ,QAAQ;AAClC,uBAAO,EAAE,GAAG,OAAO,IAAI,QAAQ,GAAG,OAAO,IAAI;AAAA;AAUjD,qBAAO,OAAO,SAAS,QAAQ,QAAQ;AACnC,yBAAS,WAAW,OAAO,KAAK;AAChC,uBAAO,EAAE,GAAG,SAAS,CAAC,OAAO,GAAG,GAAG,SAAS,OAAO;AAAA;AASvD,qBAAO,MAAM,SAAS,QAAQ;AAC1B,uBAAO,EAAE,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO;AAAA;AAUtC,qBAAO,QAAQ,SAAS,SAAS,SAAS;AACtC,uBAAO,KAAK,MAAM,QAAQ,IAAI,QAAQ,GAAG,QAAQ,IAAI,QAAQ;AAAA;AASjE,qBAAO,QAAQ;AAAA,gBACX,OAAO;AAAA,gBAAU,OAAO;AAAA,gBACxB,OAAO;AAAA,gBAAU,OAAO;AAAA,gBACxB,OAAO;AAAA,gBAAU,OAAO;AAAA;AAAA;AAAA;AAAA,UAOzB,SAAS,SAAQ,UAAS,qBAAqB;AAYtD,gBAAI,WAAW;AAEf,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAmBR,uBAAS,SAAS,SAAS,QAAQ,MAAM;AACrC,oBAAI,WAAW;AAEf,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,QAAQ,OAAO,IACf,SAAS;AAAA,oBACL,GAAG,MAAM;AAAA,oBACT,GAAG,MAAM;AAAA,oBACT,OAAO;AAAA,oBACP;AAAA,oBACA,YAAY;AAAA;AAGpB,2BAAS,KAAK;AAAA;AAGlB,uBAAO;AAAA;AAYX,uBAAS,WAAW,SAAS,MAAM,MAAM;AACrC,oBAAI,cAAc,sCACd,SAAS;AAEb,qBAAK,QAAQ,aAAa,SAAS,OAAO,GAAG,GAAG;AAC5C,yBAAO,KAAK,EAAE,GAAG,WAAW,IAAI,GAAG,WAAW;AAAA;AAGlD,uBAAO,SAAS,OAAO,QAAQ;AAAA;AASnC,uBAAS,SAAS,SAAS,UAAU;AACjC,oBAAI,OAAO,SAAS,KAAK,UAAU,OAC/B,SAAS,EAAE,GAAG,GAAG,GAAG,KACpB,OACA,MACA;AAEJ,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAK,KAAI,KAAK,SAAS;AACvB,0BAAQ,OAAO,MAAM,SAAS,IAAI,SAAS;AAC3C,yBAAO,OAAO,KAAK,OAAO,IAAI,SAAS,IAAI,SAAS,KAAK;AACzD,2BAAS,OAAO,IAAI,QAAQ;AAAA;AAGhC,uBAAO,OAAO,IAAI,QAAQ,IAAI;AAAA;AASlC,uBAAS,OAAO,SAAS,UAAU;AAC/B,oBAAI,UAAU,EAAE,GAAG,GAAG,GAAG;AAEzB,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,0BAAQ,KAAK,SAAS,GAAG;AACzB,0BAAQ,KAAK,SAAS,GAAG;AAAA;AAG7B,uBAAO,OAAO,IAAI,SAAS,SAAS;AAAA;AAUxC,uBAAS,OAAO,SAAS,UAAU,QAAQ;AACvC,oBAAI,OAAO,GACP,IAAI,SAAS,SAAS;AAE1B,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,0BAAS,UAAS,GAAG,IAAI,SAAS,GAAG,KAAM,UAAS,GAAG,IAAI,SAAS,GAAG;AACvE,sBAAI;AAAA;AAGR,oBAAI;AACA,yBAAO,OAAO;AAElB,uBAAO,KAAK,IAAI,QAAQ;AAAA;AAU5B,uBAAS,UAAU,SAAS,UAAU,MAAM;AACxC,oBAAI,YAAY,GACZ,cAAc,GACd,IAAI,UACJ,OACA;AAIJ,yBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,sBAAK,KAAI,KAAK,EAAE;AAChB,0BAAQ,KAAK,IAAI,OAAO,MAAM,EAAE,IAAI,EAAE;AACtC,+BAAa,QAAS,QAAO,IAAI,EAAE,IAAI,EAAE,MAAM,OAAO,IAAI,EAAE,IAAI,EAAE,MAAM,OAAO,IAAI,EAAE,IAAI,EAAE;AAC3F,iCAAe;AAAA;AAGnB,uBAAQ,OAAO,IAAM,aAAY;AAAA;AAUrC,uBAAS,YAAY,SAAS,UAAU,QAAQ,QAAQ;AACpD,yBAAS,OAAO,WAAW,cAAc,SAAS;AAElD,oBAAI,iBAAiB,SAAS,QAC1B,aAAa,OAAO,IAAI,QACxB,aAAa,OAAO,IAAI,QACxB;AAEJ,qBAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACjC,2BAAS,GAAG,KAAK;AACjB,2BAAS,GAAG,KAAK;AAAA;AAGrB,uBAAO;AAAA;AAUX,uBAAS,SAAS,SAAS,UAAU,OAAO,OAAO;AAC/C,oBAAI,UAAU;AACV;AAEJ,oBAAI,MAAM,KAAK,IAAI,QACf,MAAM,KAAK,IAAI,QACf,SAAS,MAAM,GACf,SAAS,MAAM,GACf,iBAAiB,SAAS,QAC1B,QACA,IACA,IACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACjC,2BAAS,SAAS;AAClB,uBAAK,OAAO,IAAI;AAChB,uBAAK,OAAO,IAAI;AAChB,yBAAO,IAAI,SAAU,MAAK,MAAM,KAAK;AACrC,yBAAO,IAAI,SAAU,MAAK,MAAM,KAAK;AAAA;AAGzC,uBAAO;AAAA;AAUX,uBAAS,WAAW,SAAS,UAAU,OAAO;AAC1C,oBAAI,SAAS,MAAM,GACf,SAAS,MAAM,GACf,iBAAiB,SAAS,QAC1B,SAAS,SAAS,iBAAiB,IACnC;AAEJ,yBAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACrC,+BAAa,SAAS;AAEtB,sBAAK,UAAS,OAAO,KAAM,YAAW,IAAI,OAAO,KAC1C,UAAS,OAAO,KAAM,QAAO,IAAI,WAAW,KAAK,GAAG;AACvD,2BAAO;AAAA;AAGX,2BAAS;AAAA;AAGb,uBAAO;AAAA;AAWX,uBAAS,QAAQ,SAAS,UAAU,QAAQ,QAAQ,OAAO;AACvD,oBAAI,WAAW,KAAK,WAAW;AAC3B,yBAAO;AAEX,wBAAQ,SAAS,SAAS,OAAO;AAEjC,oBAAI,QACA;AAEJ,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,2BAAS,SAAS;AAClB,0BAAQ,OAAO,IAAI,QAAQ;AAC3B,2BAAS,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI;AACpC,2BAAS,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI;AAAA;AAGxC,uBAAO;AAAA;AAaX,uBAAS,UAAU,SAAS,UAAU,QAAQ,SAAS,YAAY,YAAY;AAC3E,oBAAI,OAAO,WAAW,UAAU;AAC5B,2BAAS,CAAC;AAAA,uBACP;AACH,2BAAS,UAAU,CAAC;AAAA;AAIxB,0BAAW,OAAO,YAAY,cAAe,UAAU;AACvD,6BAAa,cAAc;AAC3B,6BAAa,cAAc;AAE3B,oBAAI,cAAc;AAElB,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAI,aAAa,SAAS,IAAI,KAAK,IAAI,IAAI,IAAI,SAAS,SAAS,IAC7D,SAAS,SAAS,IAClB,aAAa,SAAU,KAAI,KAAK,SAAS,SACzC,gBAAgB,OAAO,IAAI,OAAO,SAAS,IAAI,OAAO,SAAS;AAEnE,sBAAI,kBAAkB,GAAG;AACrB,gCAAY,KAAK;AACjB;AAAA;AAGJ,sBAAI,aAAa,OAAO,UAAU;AAAA,oBAC9B,GAAG,OAAO,IAAI,WAAW;AAAA,oBACzB,GAAG,WAAW,IAAI,OAAO;AAAA;AAG7B,sBAAI,aAAa,OAAO,UAAU;AAAA,oBAC9B,GAAG,WAAW,IAAI,OAAO;AAAA,oBACzB,GAAG,OAAO,IAAI,WAAW;AAAA;AAG7B,sBAAI,iBAAiB,KAAK,KAAK,IAAI,KAAK,IAAI,eAAe,KACvD,eAAe,OAAO,KAAK,OAAO,MAAM,aAAa,gBACrD,YAAY,OAAO,UAAU,OAAO,KAAK,OAAO,IAAI,YAAY,aAAa,OAC7E,eAAe,OAAO,IAAI,QAAQ,OAAO,KAAK,WAAW;AAE7D,sBAAI,YAAY;AAEhB,sBAAI,YAAY,IAAI;AAEhB,gCAAY,KAAK,IAAI,eAAe,QAAQ;AAAA;AAGhD,8BAAY,OAAO,MAAM,WAAW,YAAY;AAGhD,sBAAI,YAAY,MAAM;AAClB,iCAAa;AAEjB,sBAAI,QAAQ,KAAK,KAAK,OAAO,IAAI,YAAY,cACzC,QAAQ,QAAQ;AAEpB,2BAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,gCAAY,KAAK,OAAO,IAAI,OAAO,OAAO,cAAc,QAAQ,IAAI;AAAA;AAAA;AAI5E,uBAAO;AAAA;AASX,uBAAS,gBAAgB,SAAS,UAAU;AACxC,oBAAI,SAAS,SAAS,KAAK;AAE3B,yBAAS,KAAK,SAAS,SAAS,SAAS;AACrC,yBAAO,OAAO,MAAM,QAAQ,WAAW,OAAO,MAAM,QAAQ;AAAA;AAGhE,uBAAO;AAAA;AASX,uBAAS,WAAW,SAAS,UAAU;AAInC,oBAAI,OAAO,GACP,IAAI,SAAS,QACb,GACA,GACA,GACA;AAEJ,oBAAI,IAAI;AACJ,yBAAO;AAEX,qBAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACpB,sBAAK,KAAI,KAAK;AACd,sBAAK,KAAI,KAAK;AACd,sBAAK,UAAS,GAAG,IAAI,SAAS,GAAG,KAAM,UAAS,GAAG,IAAI,SAAS,GAAG;AACnE,uBAAM,UAAS,GAAG,IAAI,SAAS,GAAG,KAAM,UAAS,GAAG,IAAI,SAAS,GAAG;AAEpE,sBAAI,IAAI,GAAG;AACP,4BAAQ;AAAA,6BACD,IAAI,GAAG;AACd,4BAAQ;AAAA;AAGZ,sBAAI,SAAS,GAAG;AACZ,2BAAO;AAAA;AAAA;AAIf,oBAAI,SAAS,GAAE;AACX,yBAAO;AAAA,uBACJ;AACH,yBAAO;AAAA;AAAA;AAUf,uBAAS,OAAO,SAAS,UAAU;AAG/B,oBAAI,QAAQ,IACR,QAAQ,IACR,QACA;AAGJ,2BAAW,SAAS,MAAM;AAC1B,yBAAS,KAAK,SAAS,SAAS,SAAS;AACrC,sBAAI,KAAK,QAAQ,IAAI,QAAQ;AAC7B,yBAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,QAAQ;AAAA;AAI/C,qBAAK,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AACrC,2BAAS,SAAS;AAElB,yBAAO,MAAM,UAAU,KACb,OAAO,OAAO,MAAM,MAAM,SAAS,IAAI,MAAM,MAAM,SAAS,IAAI,WAAW,GAAG;AACpF,0BAAM;AAAA;AAGV,wBAAM,KAAK;AAAA;AAIf,qBAAK,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AAC1C,2BAAS,SAAS;AAElB,yBAAO,MAAM,UAAU,KACb,OAAO,OAAO,MAAM,MAAM,SAAS,IAAI,MAAM,MAAM,SAAS,IAAI,WAAW,GAAG;AACpF,0BAAM;AAAA;AAGV,wBAAM,KAAK;AAAA;AAKf,sBAAM;AACN,sBAAM;AAEN,uBAAO,MAAM,OAAO;AAAA;AAAA;AAAA;AAAA,UAQrB,SAAS,SAAQ,UAAS,qBAAqB;AAUtD,gBAAI,SAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AASR,qBAAO,KAAK,SAAS,QAAQ,YAAY,UAAU;AAC/C,oBAAI,QAAQ,WAAW,MAAM,MACzB;AAEJ,yBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,yBAAO,MAAM;AACb,yBAAO,SAAS,OAAO,UAAU;AACjC,yBAAO,OAAO,QAAQ,OAAO,OAAO,SAAS;AAC7C,yBAAO,OAAO,MAAM,KAAK;AAAA;AAG7B,uBAAO;AAAA;AAUX,qBAAO,MAAM,SAAS,QAAQ,YAAY,UAAU;AAChD,oBAAI,CAAC,YAAY;AACb,yBAAO,SAAS;AAChB;AAAA;AAIJ,oBAAI,OAAO,eAAe,YAAY;AAClC,6BAAW;AACX,+BAAa,OAAO,KAAK,OAAO,QAAQ,KAAK;AAAA;AAGjD,oBAAI,QAAQ,WAAW,MAAM;AAE7B,yBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,sBAAI,YAAY,OAAO,OAAO,MAAM,KAChC,eAAe;AAEnB,sBAAI,YAAY,WAAW;AACvB,6BAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,0BAAI,UAAU,OAAO;AACjB,qCAAa,KAAK,UAAU;AAAA;AAAA;AAIxC,yBAAO,OAAO,MAAM,MAAM;AAAA;AAAA;AAWlC,qBAAO,UAAU,SAAS,QAAQ,YAAY,OAAO;AACjD,oBAAI,OACA,MACA,WACA;AAEJ,oBAAI,SAAS,OAAO;AAEpB,oBAAI,UAAU,OAAO,KAAK,QAAQ,SAAS,GAAG;AAC1C,sBAAI,CAAC;AACD,4BAAQ;AAEZ,0BAAQ,WAAW,MAAM;AAEzB,2BAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,2BAAO,MAAM;AACb,gCAAY,OAAO;AAEnB,wBAAI,WAAW;AACX,mCAAa,OAAO,MAAM,OAAO;AACjC,iCAAW,OAAO;AAClB,iCAAW,SAAS;AAEpB,+BAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,kCAAU,GAAG,MAAM,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAY7C,SAAS,SAAQ,UAAS,qBAAqB;AAetD,gBAAI,aAAY;AAEhB,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,OAAO,oBAAoB;AAE/B,YAAC,YAAW;AASR,yBAAU,SAAS,SAAS,SAAS;AACjC,uBAAO,OAAO,OAAO;AAAA,kBACjB,IAAI,OAAO;AAAA,kBACX,MAAM;AAAA,kBACN,QAAQ;AAAA,kBACR,YAAY;AAAA,kBACZ,QAAQ;AAAA,kBACR,aAAa;AAAA,kBACb,YAAY;AAAA,kBACZ,OAAO;AAAA,kBACP,QAAQ;AAAA,kBACR,OAAO;AAAA,oBACH,WAAW;AAAA,oBACX,gBAAgB;AAAA,oBAChB,eAAe;AAAA;AAAA,mBAEpB;AAAA;AAcP,yBAAU,cAAc,SAAS,WAAW,YAAY,eAAe,gBAAgB;AACnF,0BAAU,aAAa;AAEvB,oBAAI,cAAc,UAAU,OAAO;AAC/B,4BAAU,MAAM,YAAY;AAC5B,4BAAU,MAAM,iBAAiB;AACjC,4BAAU,MAAM,gBAAgB;AAAA;AAGpC,oBAAI,iBAAiB,UAAU,QAAQ;AACnC,6BAAU,YAAY,UAAU,QAAQ,YAAY,eAAe;AAAA;AAGvE,oBAAI,gBAAgB;AAChB,2BAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ,KAAK;AAClD,wBAAI,iBAAiB,UAAU,WAAW;AAC1C,+BAAU,YAAY,gBAAgB,YAAY,eAAe;AAAA;AAAA;AAAA;AAa7E,yBAAU,MAAM,SAAS,WAAW,QAAQ;AACxC,oBAAI,UAAU,GAAG,OAAO;AAExB,uBAAO,QAAQ,WAAW,aAAa,EAAE;AAEzC,yBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,sBAAI,MAAM,QAAQ;AAElB,0BAAQ,IAAI;AAAA,yBAEP;AAED,0BAAI,IAAI,WAAW,KAAK;AACpB,+BAAO,KAAK;AACZ;AAAA;AAGJ,iCAAU,QAAQ,WAAW;AAC7B;AAAA,yBACC;AACD,iCAAU,cAAc,WAAW;AACnC;AAAA,yBACC;AACD,iCAAU,aAAa,WAAW;AAClC;AAAA,yBACC;AACD,iCAAU,cAAc,WAAW,IAAI;AACvC;AAAA;AAAA;AAKR,uBAAO,QAAQ,WAAW,YAAY,EAAE;AAExC,uBAAO;AAAA;AAaX,yBAAU,SAAS,SAAS,WAAW,QAAQ,MAAM;AACjD,oBAAI,UAAU,GAAG,OAAO;AAExB,uBAAO,QAAQ,WAAW,gBAAgB,EAAE;AAE5C,yBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,sBAAI,MAAM,QAAQ;AAElB,0BAAQ,IAAI;AAAA,yBAEP;AACD,iCAAU,WAAW,WAAW,KAAK;AACrC;AAAA,yBACC;AACD,iCAAU,iBAAiB,WAAW,KAAK;AAC3C;AAAA,yBACC;AACD,iCAAU,gBAAgB,WAAW,KAAK;AAC1C;AAAA,yBACC;AACD,iCAAU,iBAAiB,WAAW,IAAI;AAC1C;AAAA;AAAA;AAKR,uBAAO,QAAQ,WAAW,eAAe,EAAE;AAE3C,uBAAO;AAAA;AAWX,yBAAU,eAAe,SAAS,YAAY,YAAY;AACtD,2BAAW,WAAW,KAAK;AAC3B,2BAAW,SAAS;AACpB,2BAAU,YAAY,YAAY,MAAM,MAAM;AAC9C,uBAAO;AAAA;AAYX,yBAAU,kBAAkB,SAAS,YAAY,YAAY,MAAM;AAC/D,oBAAI,WAAW,OAAO,QAAQ,WAAW,YAAY;AACrD,oBAAI,aAAa,IAAI;AACjB,6BAAU,kBAAkB,YAAY;AAAA;AAG5C,oBAAI,MAAM;AACN,2BAAS,IAAI,GAAG,IAAI,WAAW,WAAW,QAAQ,KAAI;AAClD,+BAAU,gBAAgB,WAAW,WAAW,IAAI,YAAY;AAAA;AAAA;AAIxE,uBAAO;AAAA;AAWX,yBAAU,oBAAoB,SAAS,WAAW,UAAU;AACxD,0BAAU,WAAW,OAAO,UAAU;AACtC,2BAAU,YAAY,WAAW,MAAM,MAAM;AAC7C,uBAAO;AAAA;AAWX,yBAAU,UAAU,SAAS,WAAW,MAAM;AAC1C,0BAAU,OAAO,KAAK;AACtB,2BAAU,YAAY,WAAW,MAAM,MAAM;AAC7C,uBAAO;AAAA;AAYX,yBAAU,aAAa,SAAS,WAAW,MAAM,MAAM;AACnD,oBAAI,WAAW,OAAO,QAAQ,UAAU,QAAQ;AAChD,oBAAI,aAAa,IAAI;AACjB,6BAAU,aAAa,WAAW;AAAA;AAGtC,oBAAI,MAAM;AACN,2BAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ,KAAI;AACjD,+BAAU,WAAW,UAAU,WAAW,IAAI,MAAM;AAAA;AAAA;AAI5D,uBAAO;AAAA;AAWX,yBAAU,eAAe,SAAS,WAAW,UAAU;AACnD,0BAAU,OAAO,OAAO,UAAU;AAClC,2BAAU,YAAY,WAAW,MAAM,MAAM;AAC7C,uBAAO;AAAA;AAWX,yBAAU,gBAAgB,SAAS,WAAW,YAAY;AACtD,0BAAU,YAAY,KAAK;AAC3B,2BAAU,YAAY,WAAW,MAAM,MAAM;AAC7C,uBAAO;AAAA;AAYX,yBAAU,mBAAmB,SAAS,WAAW,YAAY,MAAM;AAC/D,oBAAI,WAAW,OAAO,QAAQ,UAAU,aAAa;AACrD,oBAAI,aAAa,IAAI;AACjB,6BAAU,mBAAmB,WAAW;AAAA;AAG5C,oBAAI,MAAM;AACN,2BAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ,KAAI;AACjD,+BAAU,iBAAiB,UAAU,WAAW,IAAI,YAAY;AAAA;AAAA;AAIxE,uBAAO;AAAA;AAWX,yBAAU,qBAAqB,SAAS,WAAW,UAAU;AACzD,0BAAU,YAAY,OAAO,UAAU;AACvC,2BAAU,YAAY,WAAW,MAAM,MAAM;AAC7C,uBAAO;AAAA;AAWX,yBAAU,QAAQ,SAAS,WAAW,YAAY,MAAM;AACpD,oBAAI,MAAM;AACN,2BAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ,KAAI;AACjD,+BAAU,MAAM,UAAU,WAAW,IAAI,YAAY;AAAA;AAAA;AAI7D,oBAAI,YAAY;AACZ,4BAAU,SAAS,UAAU,OAAO,OAAO,SAAS,MAAM;AAAE,2BAAO,KAAK;AAAA;AAAA,uBACrE;AACH,4BAAU,OAAO,SAAS;AAAA;AAG9B,0BAAU,YAAY,SAAS;AAC/B,0BAAU,WAAW,SAAS;AAE9B,2BAAU,YAAY,WAAW,MAAM,MAAM;AAE7C,uBAAO;AAAA;AASX,yBAAU,YAAY,SAAS,WAAW;AACtC,oBAAI,UAAU,SAAS,UAAU,MAAM,WAAW;AAC9C,yBAAO,UAAU,MAAM;AAAA;AAG3B,oBAAI,SAAS,GAAG,OAAO,UAAU;AAEjC,yBAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ;AAC7C,2BAAS,OAAO,OAAO,WAAU,UAAU,UAAU,WAAW;AAEpE,oBAAI,UAAU,OAAO;AACjB,4BAAU,MAAM,YAAY;AAAA;AAGhC,uBAAO;AAAA;AASX,yBAAU,iBAAiB,SAAS,WAAW;AAC3C,oBAAI,UAAU,SAAS,UAAU,MAAM,gBAAgB;AACnD,yBAAO,UAAU,MAAM;AAAA;AAG3B,oBAAI,cAAc,GAAG,OAAO,UAAU;AAEtC,yBAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ;AAC7C,gCAAc,YAAY,OAAO,WAAU,eAAe,UAAU,WAAW;AAEnF,oBAAI,UAAU,OAAO;AACjB,4BAAU,MAAM,iBAAiB;AAAA;AAGrC,uBAAO;AAAA;AASX,yBAAU,gBAAgB,SAAS,WAAW;AAC1C,oBAAI,UAAU,SAAS,UAAU,MAAM,eAAe;AAClD,yBAAO,UAAU,MAAM;AAAA;AAG3B,oBAAI,aAAa,GAAG,OAAO,UAAU;AAErC,yBAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ;AAC7C,+BAAa,WAAW,OAAO,WAAU,cAAc,UAAU,WAAW;AAEhF,oBAAI,UAAU,OAAO;AACjB,4BAAU,MAAM,gBAAgB;AAAA;AAGpC,uBAAO;AAAA;AAWX,yBAAU,MAAM,SAAS,WAAW,IAAI,MAAM;AAC1C,oBAAI,SACA;AAEJ,wBAAQ;AAAA,uBACH;AACD,8BAAU,WAAU,UAAU;AAC9B;AAAA,uBACC;AACD,8BAAU,WAAU,eAAe;AACnC;AAAA,uBACC;AACD,8BAAU,WAAU,cAAc,WAAW,OAAO;AACpD;AAAA;AAGJ,oBAAI,CAAC;AACD,yBAAO;AAEX,yBAAS,QAAQ,OAAO,SAAS,SAAQ;AACrC,yBAAO,QAAO,GAAG,eAAe,GAAG;AAAA;AAGvC,uBAAO,OAAO,WAAW,IAAI,OAAO,OAAO;AAAA;AAW/C,yBAAU,OAAO,SAAS,YAAY,SAAS,YAAY;AACvD,2BAAU,OAAO,YAAY;AAC7B,2BAAU,IAAI,YAAY;AAC1B,uBAAO;AAAA;AASX,yBAAU,SAAS,SAAS,WAAW;AACnC,oBAAI,UAAU,WAAU,UAAU,WAC7B,OAAO,WAAU,eAAe,YAChC,OAAO,WAAU,cAAc;AAEpC,yBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,0BAAQ,GAAG,KAAK,OAAO;AAAA;AAG3B,uBAAO;AAAA;AAWX,yBAAU,YAAY,SAAS,WAAW,aAAa,WAAW;AAC9D,oBAAI,SAAS,YAAY,WAAU,UAAU,aAAa,UAAU;AAEpE,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,uBAAK,UAAU,OAAO,IAAI;AAAA;AAG9B,uBAAO;AAAA;AAWX,yBAAU,SAAS,SAAS,WAAW,UAAU,OAAO,WAAW;AAC/D,oBAAI,MAAM,KAAK,IAAI,WACf,MAAM,KAAK,IAAI,WACf,SAAS,YAAY,WAAU,UAAU,aAAa,UAAU;AAEpE,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO,IACd,KAAK,KAAK,SAAS,IAAI,MAAM,GAC7B,KAAK,KAAK,SAAS,IAAI,MAAM;AAEjC,uBAAK,YAAY,MAAM;AAAA,oBACnB,GAAG,MAAM,IAAK,MAAK,MAAM,KAAK;AAAA,oBAC9B,GAAG,MAAM,IAAK,MAAK,MAAM,KAAK;AAAA;AAGlC,uBAAK,OAAO,MAAM;AAAA;AAGtB,uBAAO;AAAA;AAYX,yBAAU,QAAQ,SAAS,WAAW,QAAQ,QAAQ,OAAO,WAAW;AACpE,oBAAI,SAAS,YAAY,WAAU,UAAU,aAAa,UAAU;AAEpE,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO,IACd,KAAK,KAAK,SAAS,IAAI,MAAM,GAC7B,KAAK,KAAK,SAAS,IAAI,MAAM;AAEjC,uBAAK,YAAY,MAAM;AAAA,oBACnB,GAAG,MAAM,IAAI,KAAK;AAAA,oBAClB,GAAG,MAAM,IAAI,KAAK;AAAA;AAGtB,uBAAK,MAAM,MAAM,QAAQ;AAAA;AAG7B,uBAAO;AAAA;AASX,yBAAU,SAAS,SAAS,WAAW;AACnC,oBAAI,SAAS,WAAU,UAAU,YAC7B,WAAW;AAEf,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACvC,sBAAI,OAAO,OAAO;AAClB,2BAAS,KAAK,KAAK,OAAO,KAAK,KAAK,OAAO;AAAA;AAG/C,uBAAO,OAAO,OAAO;AAAA;AAAA;AAAA;AAAA,UAmJtB,SAAS,SAAQ,UAAS,qBAAqB;AAYtD,gBAAI,OAAO;AAEX,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,UAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,OAAO,oBAAoB;AAE/B,YAAC,YAAW;AAER,mBAAK,gBAAgB;AACrB,mBAAK,wBAAwB;AAC7B,mBAAK,2BAA2B;AAChC,mBAAK,gBAAgB;AAWrB,mBAAK,SAAS,SAAS,SAAS;AAC5B,oBAAI,WAAW;AAAA,kBACX,IAAI,OAAO;AAAA,kBACX,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,OAAO;AAAA,kBACP,QAAQ;AAAA,kBACR,OAAO;AAAA,kBACP,UAAU,SAAS,SAAS;AAAA,kBAC5B,UAAU,EAAE,GAAG,GAAG,GAAG;AAAA,kBACrB,OAAO,EAAE,GAAG,GAAG,GAAG;AAAA,kBAClB,QAAQ;AAAA,kBACR,iBAAiB,EAAE,GAAG,GAAG,GAAG;AAAA,kBAC5B,mBAAmB,EAAE,GAAG,GAAG,GAAG,GAAG,OAAO;AAAA,kBACxC,eAAe;AAAA,kBACf,OAAO;AAAA,kBACP,cAAc;AAAA,kBACd,UAAU,EAAE,GAAG,GAAG,GAAG;AAAA,kBACrB,iBAAiB;AAAA,kBACjB,UAAU;AAAA,kBACV,UAAU;AAAA,kBACV,YAAY;AAAA,kBACZ,QAAQ;AAAA,kBACR,gBAAgB;AAAA,kBAChB,SAAS;AAAA,kBACT,aAAa;AAAA,kBACb,UAAU;AAAA,kBACV,gBAAgB;AAAA,kBAChB,aAAa;AAAA,kBACb,iBAAiB;AAAA,oBACb,UAAU;AAAA,oBACV,MAAM;AAAA,oBACN,OAAO;AAAA;AAAA,kBAEX,MAAM;AAAA,kBACN,WAAW;AAAA,kBACX,QAAQ;AAAA,oBACJ,SAAS;AAAA,oBACT,SAAS;AAAA,oBACT,aAAa;AAAA,oBACb,WAAW;AAAA,oBACX,WAAW;AAAA,oBACX,QAAQ;AAAA,sBACJ,QAAQ;AAAA,sBACR,QAAQ;AAAA,sBACR,SAAS;AAAA,sBACT,SAAS;AAAA;AAAA;AAAA,kBAGjB,QAAQ;AAAA,kBACR,QAAQ;AAAA,kBACR,SAAS;AAAA,kBACT,cAAc;AAAA,kBACd,cAAc;AAAA,kBACd,WAAW;AAAA,kBACX,QAAQ;AAAA,kBACR,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,WAAW;AAAA;AAGf,oBAAI,OAAO,OAAO,OAAO,UAAU;AAEnC,gCAAgB,MAAM;AAEtB,uBAAO;AAAA;AAWX,mBAAK,YAAY,SAAS,gBAAgB;AACtC,oBAAI;AACA,yBAAO,KAAK;AAEhB,uBAAO,KAAK;AAAA;AAShB,mBAAK,eAAe,WAAW;AAC3B,qBAAK,gBAAgB,KAAK,iBAAiB;AAC3C,uBAAO,KAAK;AAAA;AAUhB,kBAAI,kBAAkB,SAAS,MAAM,SAAS;AAC1C,0BAAU,WAAW;AAGrB,qBAAK,IAAI,MAAM;AAAA,kBACX,QAAQ,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,kBAC1C,cAAc,KAAK,gBAAgB,OAAO,MAAM,KAAK;AAAA,kBACrD,WAAW,KAAK,aAAa,KAAK;AAAA,kBAClC,UAAU,KAAK;AAAA,kBACf,OAAO,KAAK,SAAS,CAAC;AAAA,kBACtB,UAAU,KAAK;AAAA,kBACf,YAAY,KAAK;AAAA,kBACjB,QAAQ,KAAK,UAAU;AAAA;AAG3B,yBAAS,OAAO,KAAK,UAAU,KAAK,OAAO,KAAK;AAChD,qBAAK,OAAO,KAAK,MAAM,KAAK;AAC5B,uBAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAG/C,qBAAK,IAAI,MAAM;AAAA,kBACX,MAAM,QAAQ,QAAQ,KAAK;AAAA,kBAC3B,MAAM,QAAQ,QAAQ,KAAK;AAAA,kBAC3B,MAAM,QAAQ,QAAQ,KAAK;AAAA,kBAC3B,SAAS,QAAQ,WAAW,KAAK;AAAA;AAIrC,oBAAI,mBAAoB,KAAK,WAAW,YAAY,OAAO,OAAO,CAAC,WAAW,WAAW,WAAW,WAAW,aAC3G,qBAAqB,KAAK,WAAW,SAAS,QAC9C,mBAAmB,KAAK,YAAY,KAAK,OAAO,cAAc,OAAO,IAAI;AAC7E,qBAAK,OAAO,YAAY,KAAK,OAAO,aAAa;AACjD,qBAAK,OAAO,cAAc,KAAK,OAAO,eAAe;AACrD,qBAAK,OAAO,YAAY,KAAK,OAAO,aAAa;AACjD,qBAAK,OAAO,OAAO,WAAW,CAAE,MAAK,OAAO,IAAI,IAAI,KAAK,SAAS,KAAM,MAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI;AAC5G,qBAAK,OAAO,OAAO,WAAW,CAAE,MAAK,OAAO,IAAI,IAAI,KAAK,SAAS,KAAM,MAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI;AAAA;AAWhH,mBAAK,MAAM,SAAS,MAAM,UAAU,OAAO;AACvC,oBAAI;AAEJ,oBAAI,OAAO,aAAa,UAAU;AAC9B,6BAAW;AACX,6BAAW;AACX,2BAAS,YAAY;AAAA;AAGzB,qBAAK,YAAY,UAAU;AACvB,sBAAI,CAAC,OAAO,UAAU,eAAe,KAAK,UAAU;AAChD;AAEJ,0BAAQ,SAAS;AACjB,0BAAQ;AAAA,yBAEH;AACD,2BAAK,UAAU,MAAM;AACrB;AAAA,yBACC;AACD,+BAAS,IAAI,MAAM;AACnB;AAAA,yBACC;AACD,2BAAK,QAAQ,MAAM;AACnB;AAAA,yBACC;AACD,2BAAK,WAAW,MAAM;AACtB;AAAA,yBACC;AACD,2BAAK,WAAW,MAAM;AACtB;AAAA,yBACC;AACD,2BAAK,YAAY,MAAM;AACvB;AAAA,yBACC;AACD,2BAAK,YAAY,MAAM;AACvB;AAAA,yBACC;AACD,2BAAK,SAAS,MAAM;AACpB;AAAA,yBACC;AACD,2BAAK,YAAY,MAAM;AACvB;AAAA,yBACC;AACD,2BAAK,mBAAmB,MAAM;AAC9B;AAAA,yBACC;AACD,2BAAK,SAAS,MAAM;AACpB;AAAA,yBACC;AACD,2BAAK,UAAU,MAAM;AACrB;AAAA;AAEA,2BAAK,YAAY;AAAA;AAAA;AAAA;AAY7B,mBAAK,YAAY,SAAS,MAAM,UAAU;AACtC,yBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAI,OAAO,KAAK,MAAM;AACtB,uBAAK,WAAW;AAEhB,sBAAI,UAAU;AACV,yBAAK,YAAY;AAAA,sBACb,aAAa,KAAK;AAAA,sBAClB,UAAU,KAAK;AAAA,sBACf,MAAM,KAAK;AAAA,sBACX,SAAS,KAAK;AAAA,sBACd,SAAS,KAAK;AAAA,sBACd,aAAa,KAAK;AAAA,sBAClB,gBAAgB,KAAK;AAAA;AAGzB,yBAAK,cAAc;AACnB,yBAAK,WAAW;AAChB,yBAAK,OAAO,KAAK,UAAU,KAAK,UAAU;AAC1C,yBAAK,cAAc,KAAK,iBAAiB;AAEzC,yBAAK,aAAa,IAAI,KAAK,SAAS;AACpC,yBAAK,aAAa,IAAI,KAAK,SAAS;AACpC,yBAAK,YAAY,KAAK;AACtB,yBAAK,kBAAkB;AACvB,yBAAK,QAAQ;AACb,yBAAK,eAAe;AACpB,yBAAK,SAAS;AAAA,6BACP,KAAK,WAAW;AACvB,yBAAK,cAAc,KAAK,UAAU;AAClC,yBAAK,WAAW,KAAK,UAAU;AAC/B,yBAAK,OAAO,KAAK,UAAU;AAC3B,yBAAK,UAAU,KAAK,UAAU;AAC9B,yBAAK,UAAU,KAAK,UAAU;AAC9B,yBAAK,cAAc,KAAK,UAAU;AAClC,yBAAK,iBAAiB,KAAK,UAAU;AAErC,yBAAK,YAAY;AAAA;AAAA;AAAA;AAW7B,mBAAK,UAAU,SAAS,MAAM,MAAM;AAChC,oBAAI,SAAS,KAAK,UAAW,MAAK,OAAO;AACzC,qBAAK,UAAU,SAAU,QAAO;AAChC,qBAAK,iBAAiB,IAAI,KAAK;AAE/B,qBAAK,OAAO;AACZ,qBAAK,cAAc,IAAI,KAAK;AAC5B,qBAAK,UAAU,KAAK,OAAO,KAAK;AAAA;AASpC,mBAAK,aAAa,SAAS,MAAM,SAAS;AACtC,qBAAK,QAAQ,MAAM,UAAU,KAAK;AAClC,qBAAK,UAAU;AAAA;AAUnB,mBAAK,aAAa,SAAS,MAAM,SAAS;AACtC,qBAAK,UAAU;AACf,qBAAK,iBAAiB,IAAI,KAAK;AAAA;AAenC,mBAAK,cAAc,SAAS,MAAM,UAAU;AAExC,oBAAI,SAAS,GAAG,SAAS,MAAM;AAC3B,uBAAK,WAAW;AAAA,uBACb;AACH,uBAAK,WAAW,SAAS,OAAO,UAAU;AAAA;AAI9C,qBAAK,OAAO,KAAK,aAAa,KAAK;AACnC,qBAAK,OAAO,SAAS,KAAK,KAAK;AAC/B,qBAAK,QAAQ,MAAM,KAAK,UAAU,KAAK;AAGvC,oBAAI,SAAS,SAAS,OAAO,KAAK;AAClC,yBAAS,UAAU,KAAK,UAAU,QAAQ;AAG1C,qBAAK,WAAW,MAAM,KAAK,gBAAgB,SAAS,QAAQ,KAAK,UAAU,KAAK;AAGhF,yBAAS,UAAU,KAAK,UAAU,KAAK;AACvC,uBAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAAA;AAanD,mBAAK,WAAW,SAAS,MAAM,OAAO,UAAU;AAC5C,oBAAI;AAGJ,wBAAQ,MAAM,MAAM;AACpB,qBAAK,MAAM,SAAS;AACpB,qBAAK,MAAM,KAAK;AAChB,qBAAK,SAAS;AAEd,qBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,sBAAI,OAAO,MAAM;AACjB,sBAAI,SAAS,MAAM;AACf,yBAAK,SAAS;AACd,yBAAK,MAAM,KAAK;AAAA;AAAA;AAIxB,oBAAI,KAAK,MAAM,WAAW;AACtB;AAEJ,2BAAW,OAAO,aAAa,cAAc,WAAW;AAGxD,oBAAI,UAAU;AACV,sBAAI,WAAW;AACf,uBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,+BAAW,SAAS,OAAO,MAAM,GAAG;AAAA;AAGxC,2BAAS,cAAc;AAEvB,sBAAI,OAAO,SAAS,KAAK,WACrB,aAAa,SAAS,OAAO;AAEjC,uBAAK,YAAY,MAAM;AACvB,2BAAS,UAAU,KAAK,UAAU;AAAA;AAItC,oBAAI,QAAQ,KAAK,iBAAiB;AAElC,qBAAK,OAAO,MAAM;AAClB,qBAAK,SAAS;AACd,qBAAK,SAAS,IAAI,MAAM,OAAO;AAC/B,qBAAK,SAAS,IAAI,MAAM,OAAO;AAC/B,qBAAK,aAAa,IAAI,MAAM,OAAO;AACnC,qBAAK,aAAa,IAAI,MAAM,OAAO;AAEnC,qBAAK,QAAQ,MAAM,MAAM;AACzB,qBAAK,WAAW,MAAM,MAAM;AAC5B,qBAAK,YAAY,MAAM,MAAM;AAAA;AAcjC,mBAAK,YAAY,SAAS,MAAM,QAAQ,UAAU;AAC9C,oBAAI,CAAC,UAAU;AACX,uBAAK,aAAa,IAAI,OAAO,IAAK,MAAK,SAAS,IAAI,KAAK,aAAa;AACtE,uBAAK,aAAa,IAAI,OAAO,IAAK,MAAK,SAAS,IAAI,KAAK,aAAa;AACtE,uBAAK,SAAS,IAAI,OAAO;AACzB,uBAAK,SAAS,IAAI,OAAO;AAAA,uBACtB;AACH,uBAAK,aAAa,KAAK,OAAO;AAC9B,uBAAK,aAAa,KAAK,OAAO;AAC9B,uBAAK,SAAS,KAAK,OAAO;AAC1B,uBAAK,SAAS,KAAK,OAAO;AAAA;AAAA;AAUlC,mBAAK,cAAc,SAAS,MAAM,UAAU;AACxC,oBAAI,QAAQ,OAAO,IAAI,UAAU,KAAK;AACtC,qBAAK,aAAa,KAAK,MAAM;AAC7B,qBAAK,aAAa,KAAK,MAAM;AAE7B,yBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAI,OAAO,KAAK,MAAM;AACtB,uBAAK,SAAS,KAAK,MAAM;AACzB,uBAAK,SAAS,KAAK,MAAM;AACzB,2BAAS,UAAU,KAAK,UAAU;AAClC,yBAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAAA;AAAA;AAUvD,mBAAK,WAAW,SAAS,MAAM,OAAO;AAClC,oBAAI,QAAQ,QAAQ,KAAK;AACzB,qBAAK,aAAa;AAElB,yBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAI,OAAO,KAAK,MAAM;AACtB,uBAAK,SAAS;AACd,2BAAS,OAAO,KAAK,UAAU,OAAO,KAAK;AAC3C,uBAAK,OAAO,KAAK,MAAM;AACvB,yBAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAC/C,sBAAI,IAAI,GAAG;AACP,2BAAO,YAAY,KAAK,UAAU,OAAO,KAAK,UAAU,KAAK;AAAA;AAAA;AAAA;AAWzE,mBAAK,cAAc,SAAS,MAAM,UAAU;AACxC,qBAAK,aAAa,IAAI,KAAK,SAAS,IAAI,SAAS;AACjD,qBAAK,aAAa,IAAI,KAAK,SAAS,IAAI,SAAS;AACjD,qBAAK,SAAS,IAAI,SAAS;AAC3B,qBAAK,SAAS,IAAI,SAAS;AAC3B,qBAAK,QAAQ,OAAO,UAAU,KAAK;AAAA;AASvC,mBAAK,qBAAqB,SAAS,MAAM,UAAU;AAC/C,qBAAK,YAAY,KAAK,QAAQ;AAC9B,qBAAK,kBAAkB;AACvB,qBAAK,eAAe,KAAK,IAAI,KAAK;AAAA;AAStC,mBAAK,YAAY,SAAS,MAAM,aAAa;AACzC,qBAAK,YAAY,MAAM,OAAO,IAAI,KAAK,UAAU;AAAA;AAUrD,mBAAK,SAAS,SAAS,MAAM,UAAU,OAAO;AAC1C,oBAAI,CAAC,OAAO;AACR,uBAAK,SAAS,MAAM,KAAK,QAAQ;AAAA,uBAC9B;AACH,sBAAI,MAAM,KAAK,IAAI,WACf,MAAM,KAAK,IAAI,WACf,KAAK,KAAK,SAAS,IAAI,MAAM,GAC7B,KAAK,KAAK,SAAS,IAAI,MAAM;AAEjC,uBAAK,YAAY,MAAM;AAAA,oBACnB,GAAG,MAAM,IAAK,MAAK,MAAM,KAAK;AAAA,oBAC9B,GAAG,MAAM,IAAK,MAAK,MAAM,KAAK;AAAA;AAGlC,uBAAK,SAAS,MAAM,KAAK,QAAQ;AAAA;AAAA;AAYzC,mBAAK,QAAQ,SAAS,MAAM,QAAQ,QAAQ,OAAO;AAC/C,oBAAI,YAAY,GACZ,eAAe;AAEnB,wBAAQ,SAAS,KAAK;AAEtB,yBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAI,OAAO,KAAK,MAAM;AAGtB,2BAAS,MAAM,KAAK,UAAU,QAAQ,QAAQ;AAG9C,uBAAK,OAAO,KAAK,aAAa,KAAK;AACnC,uBAAK,OAAO,SAAS,KAAK,KAAK;AAC/B,uBAAK,QAAQ,MAAM,KAAK,UAAU,KAAK;AAGvC,2BAAS,UAAU,KAAK,UAAU,EAAE,GAAG,CAAC,KAAK,SAAS,GAAG,GAAG,CAAC,KAAK,SAAS;AAC3E,uBAAK,WAAW,MAAM,KAAK,gBAAgB,SAAS,QAAQ,KAAK,UAAU,KAAK;AAChF,2BAAS,UAAU,KAAK,UAAU,EAAE,GAAG,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS;AAEzE,sBAAI,IAAI,GAAG;AACP,iCAAa,KAAK;AAClB,oCAAgB,KAAK;AAAA;AAIzB,uBAAK,SAAS,IAAI,MAAM,IAAK,MAAK,SAAS,IAAI,MAAM,KAAK;AAC1D,uBAAK,SAAS,IAAI,MAAM,IAAK,MAAK,SAAS,IAAI,MAAM,KAAK;AAG1D,yBAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAAA;AAInD,oBAAI,KAAK,MAAM,SAAS,GAAG;AACvB,uBAAK,OAAO;AAEZ,sBAAI,CAAC,KAAK,UAAU;AAChB,yBAAK,QAAQ,MAAM,KAAK,UAAU;AAClC,yBAAK,WAAW,MAAM;AAAA;AAAA;AAK9B,oBAAI,KAAK,cAAc;AACnB,sBAAI,WAAW,QAAQ;AACnB,yBAAK,gBAAgB;AAAA,yBAClB;AAEH,yBAAK,eAAe;AAAA;AAAA;AAAA;AAahC,mBAAK,SAAS,SAAS,MAAM,WAAW,WAAW,YAAY;AAC3D,oBAAI,mBAAmB,KAAK,IAAI,YAAY,YAAY,KAAK,WAAW;AAGxE,oBAAI,cAAc,IAAI,KAAK,cAAc,YAAY,KAAK,WACtD,gBAAgB,KAAK,SAAS,IAAI,KAAK,aAAa,GACpD,gBAAgB,KAAK,SAAS,IAAI,KAAK,aAAa;AAGxD,qBAAK,SAAS,IAAK,gBAAgB,cAAc,aAAe,KAAK,MAAM,IAAI,KAAK,OAAQ;AAC5F,qBAAK,SAAS,IAAK,gBAAgB,cAAc,aAAe,KAAK,MAAM,IAAI,KAAK,OAAQ;AAE5F,qBAAK,aAAa,IAAI,KAAK,SAAS;AACpC,qBAAK,aAAa,IAAI,KAAK,SAAS;AACpC,qBAAK,SAAS,KAAK,KAAK,SAAS;AACjC,qBAAK,SAAS,KAAK,KAAK,SAAS;AAGjC,qBAAK,kBAAoB,MAAK,QAAQ,KAAK,aAAa,cAAc,aAAe,KAAK,SAAS,KAAK,UAAW;AACnH,qBAAK,YAAY,KAAK;AACtB,qBAAK,SAAS,KAAK;AAGnB,qBAAK,QAAQ,OAAO,UAAU,KAAK;AACnC,qBAAK,eAAe,KAAK,IAAI,KAAK;AAGlC,yBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,sBAAI,OAAO,KAAK,MAAM;AAEtB,2BAAS,UAAU,KAAK,UAAU,KAAK;AAEvC,sBAAI,IAAI,GAAG;AACP,yBAAK,SAAS,KAAK,KAAK,SAAS;AACjC,yBAAK,SAAS,KAAK,KAAK,SAAS;AAAA;AAGrC,sBAAI,KAAK,oBAAoB,GAAG;AAC5B,6BAAS,OAAO,KAAK,UAAU,KAAK,iBAAiB,KAAK;AAC1D,yBAAK,OAAO,KAAK,MAAM,KAAK;AAC5B,wBAAI,IAAI,GAAG;AACP,6BAAO,YAAY,KAAK,UAAU,KAAK,iBAAiB,KAAK,UAAU,KAAK;AAAA;AAAA;AAIpF,yBAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAAA;AAAA;AAWvD,mBAAK,aAAa,SAAS,MAAM,UAAU,OAAO;AAC9C,qBAAK,MAAM,KAAK,MAAM;AACtB,qBAAK,MAAM,KAAK,MAAM;AACtB,oBAAI,SAAS,EAAE,GAAG,SAAS,IAAI,KAAK,SAAS,GAAG,GAAG,SAAS,IAAI,KAAK,SAAS;AAC9E,qBAAK,UAAU,OAAO,IAAI,MAAM,IAAI,OAAO,IAAI,MAAM;AAAA;AAUzD,mBAAK,mBAAmB,SAAS,MAAM;AAKnC,oBAAI,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,QAAQ,EAAE,GAAG,GAAG,GAAG;AAAA;AAIvB,yBAAS,IAAI,KAAK,MAAM,WAAW,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACtE,sBAAI,OAAO,KAAK,MAAM,IAClB,OAAO,KAAK,SAAS,WAAW,KAAK,OAAO;AAEhD,6BAAW,QAAQ;AACnB,6BAAW,QAAQ,KAAK;AACxB,6BAAW,WAAW,KAAK;AAC3B,6BAAW,SAAS,OAAO,IAAI,WAAW,QAAQ,OAAO,KAAK,KAAK,UAAU;AAAA;AAGjF,2BAAW,SAAS,OAAO,IAAI,WAAW,QAAQ,WAAW;AAE7D,uBAAO;AAAA;AAAA;AAAA;AAAA,UA+fR,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,WAAW;AAEf,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAER,uBAAS,uBAAuB;AAChC,uBAAS,wBAAwB;AACjC,uBAAS,WAAW;AAQpB,uBAAS,SAAS,SAAS,QAAQ,WAAW;AAC1C,oBAAI,aAAa,YAAY,YAAY;AAGzC,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO,IACd,SAAS,KAAK,QAAQ,KAAK,QAAQ,KAAK,eAAe,KAAK;AAGhE,sBAAI,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,MAAM,GAAG;AAC1C,6BAAS,IAAI,MAAM;AACnB;AAAA;AAGJ,sBAAI,YAAY,KAAK,IAAI,KAAK,QAAQ,SAClC,YAAY,KAAK,IAAI,KAAK,QAAQ;AAGtC,uBAAK,SAAS,SAAS,WAAW,YAAa,KAAI,SAAS,YAAY;AAExE,sBAAI,KAAK,iBAAiB,KAAK,KAAK,SAAS,SAAS,wBAAwB,YAAY;AACtF,yBAAK,gBAAgB;AAErB,wBAAI,KAAK,gBAAgB,KAAK;AAC1B,+BAAS,IAAI,MAAM;AAAA,6BAChB,KAAK,eAAe,GAAG;AAC9B,yBAAK,gBAAgB;AAAA;AAAA;AAAA;AAWjC,uBAAS,kBAAkB,SAAS,OAAO,WAAW;AAClD,oBAAI,aAAa,YAAY,YAAY;AAGzC,yBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,sBAAI,OAAO,MAAM;AAGjB,sBAAI,CAAC,KAAK;AACN;AAEJ,sBAAI,YAAY,KAAK,WACjB,QAAQ,UAAU,MAAM,QACxB,QAAQ,UAAU,MAAM;AAG5B,sBAAK,MAAM,cAAc,MAAM,cAAe,MAAM,YAAY,MAAM;AAClE;AAEJ,sBAAI,MAAM,cAAc,MAAM,YAAY;AACtC,wBAAI,eAAgB,MAAM,cAAc,CAAC,MAAM,WAAY,QAAQ,OAC/D,aAAa,iBAAiB,QAAQ,QAAQ;AAElD,wBAAI,CAAC,aAAa,YAAY,WAAW,SAAS,SAAS,uBAAuB,YAAY;AAC1F,+BAAS,IAAI,cAAc;AAAA;AAAA;AAAA;AAAA;AAY3C,uBAAS,MAAM,SAAS,MAAM,YAAY;AACtC,oBAAI,cAAc,KAAK;AAEvB,oBAAI,YAAY;AACZ,uBAAK,aAAa;AAClB,uBAAK,eAAe,KAAK;AAEzB,uBAAK,gBAAgB,IAAI;AACzB,uBAAK,gBAAgB,IAAI;AAEzB,uBAAK,aAAa,IAAI,KAAK,SAAS;AACpC,uBAAK,aAAa,IAAI,KAAK,SAAS;AAEpC,uBAAK,YAAY,KAAK;AACtB,uBAAK,QAAQ;AACb,uBAAK,eAAe;AACpB,uBAAK,SAAS;AAEd,sBAAI,CAAC,aAAa;AACd,2BAAO,QAAQ,MAAM;AAAA;AAAA,uBAEtB;AACH,uBAAK,aAAa;AAClB,uBAAK,eAAe;AAEpB,sBAAI,aAAa;AACb,2BAAO,QAAQ,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAU9B,SAAS,SAAQ,UAAS,qBAAqB;AAYtD,gBAAI,YAAY;AAEhB,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,OAAO,oBAAoB;AAE/B,YAAC,YAAW;AACR,kBAAI,YAAY;AAEhB,kBAAI,aAAa;AAAA,gBACb,SAAS;AAAA,gBACT,MAAM;AAAA;AAGV,kBAAI,aAAa;AAAA,gBACb,SAAS;AAAA,gBACT,MAAM;AAAA;AAUV,wBAAU,SAAS,SAAS,OAAO,OAAO;AACtC,uBAAO;AAAA,kBACH,MAAM;AAAA,kBACN,UAAU;AAAA,kBACV;AAAA,kBACA;AAAA,kBACA,SAAS,MAAM;AAAA,kBACf,SAAS,MAAM;AAAA,kBACf,OAAO;AAAA,kBACP,QAAQ,EAAE,GAAG,GAAG,GAAG;AAAA,kBACnB,SAAS,EAAE,GAAG,GAAG,GAAG;AAAA,kBACpB,aAAa,EAAE,GAAG,GAAG,GAAG;AAAA,kBACxB,UAAU;AAAA;AAAA;AAYlB,wBAAU,WAAW,SAAS,OAAO,OAAO,OAAO;AAC/C,0BAAU,aAAa,YAAY,MAAM,UAAU,MAAM,UAAU,MAAM;AAEzE,oBAAI,WAAW,WAAW,GAAG;AACzB,yBAAO;AAAA;AAGX,0BAAU,aAAa,YAAY,MAAM,UAAU,MAAM,UAAU,MAAM;AAEzE,oBAAI,WAAW,WAAW,GAAG;AACzB,yBAAO;AAAA;AAIX,oBAAI,OAAO,SAAS,MAAM,MAAM,KAAK,GAAG,OAAO,SAC3C;AAEJ,oBAAI,CAAC,MAAM;AACP,8BAAY,UAAU,OAAO,OAAO;AACpC,4BAAU,WAAW;AACrB,4BAAU,QAAQ,MAAM,KAAK,MAAM,KAAK,QAAQ;AAChD,4BAAU,QAAQ,MAAM,KAAK,MAAM,KAAK,QAAQ;AAChD,4BAAU,UAAU,UAAU,MAAM;AACpC,4BAAU,UAAU,UAAU,MAAM;AAAA,uBACjC;AACH,8BAAY,KAAK;AAAA;AAGrB,wBAAQ,UAAU;AAClB,wBAAQ,UAAU;AAElB,oBAAI;AAEJ,oBAAI,WAAW,UAAU,WAAW,SAAS;AACzC,+BAAa;AAAA,uBACV;AACH,+BAAa;AAAA;AAGjB,oBAAI,SAAS,UAAU,QACnB,WAAW,UAAU,UACrB,UAAU,WAAW,MACrB,WAAW,QAAQ,GACnB,WAAW,QAAQ;AAGvB,oBAAI,WAAY,OAAM,SAAS,IAAI,MAAM,SAAS,KAAK,WAAY,OAAM,SAAS,IAAI,MAAM,SAAS,KAAK,GAAG;AACzG,yBAAO,IAAI;AACX,yBAAO,IAAI;AAAA,uBACR;AACH,yBAAO,IAAI,CAAC;AACZ,yBAAO,IAAI,CAAC;AAAA;AAGhB,0BAAU,QAAQ,IAAI,CAAC,OAAO;AAC9B,0BAAU,QAAQ,IAAI,OAAO;AAE7B,0BAAU,QAAQ,WAAW;AAE7B,0BAAU,YAAY,IAAI,OAAO,IAAI,UAAU;AAC/C,0BAAU,YAAY,IAAI,OAAO,IAAI,UAAU;AAG/C,oBAAI,YAAY,UAAU,cAAc,OAAO,OAAO,QAAQ,IAC1D,eAAe;AAGnB,oBAAI,SAAS,SAAS,MAAM,UAAU,UAAU,KAAK;AACjD,2BAAS,kBAAkB,UAAU;AAAA;AAGzC,oBAAI,SAAS,SAAS,MAAM,UAAU,UAAU,KAAK;AACjD,2BAAS,kBAAkB,UAAU;AAAA;AAIzC,oBAAI,eAAe,GAAG;AAClB,sBAAI,YAAY,UAAU,cAAc,OAAO,OAAO,QAAQ;AAE9D,sBAAI,SAAS,SAAS,MAAM,UAAU,UAAU,KAAK;AACjD,6BAAS,kBAAkB,UAAU;AAAA;AAGzC,sBAAI,eAAe,KAAK,SAAS,SAAS,MAAM,UAAU,UAAU,KAAK;AACrE,6BAAS,kBAAkB,UAAU;AAAA;AAAA;AAK7C,oBAAI,iBAAiB,GAAG;AACpB,2BAAS,kBAAkB,UAAU;AAAA;AAIzC,yBAAS,SAAS;AAElB,uBAAO;AAAA;AAYX,wBAAU,eAAe,SAAS,QAAQ,WAAW,WAAW,MAAM;AAClE,oBAAI,kBAAkB,UAAU,QAC5B,kBAAkB,UAAU,QAC5B,aAAa,UAAU,GAAG,GAC1B,aAAa,UAAU,GAAG,GAC1B,aAAa,UAAU,GAAG,GAC1B,aAAa,UAAU,GAAG,GAC1B,aAAa,KAAK,QAClB,aAAa,OAAO,WACpB,oBAAoB,GACpB,SACA,WACA,WACA,KACA,GACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,YAAY,KAAK;AAC7B,sBAAI,OAAO,KAAK,IACZ,QAAQ,KAAK,GACb,QAAQ,KAAK,GACb,OAAO,aAAa,QAAQ,aAAa,OACzC,OAAO,aAAa,QAAQ,aAAa,OACzC,OAAO,MACP,OAAO;AAEX,uBAAK,IAAI,GAAG,IAAI,iBAAiB,KAAK,GAAG;AACrC,0BAAM,UAAU,GAAG,IAAI,QAAQ,UAAU,GAAG,IAAI;AAEhD,wBAAI,MAAM,MAAM;AACZ,6BAAO;AAAA,+BACA,MAAM,MAAM;AACnB,6BAAO;AAAA;AAAA;AAIf,uBAAK,IAAI,GAAG,IAAI,iBAAiB,KAAK,GAAG;AACrC,0BAAM,UAAU,GAAG,IAAI,QAAQ,UAAU,GAAG,IAAI;AAEhD,wBAAI,MAAM,MAAM;AACZ,6BAAO;AAAA,+BACA,MAAM,MAAM;AACnB,6BAAO;AAAA;AAAA;AAIf,8BAAY,OAAO;AACnB,8BAAY,OAAO;AACnB,4BAAU,YAAY,YAAY,YAAY;AAE9C,sBAAI,UAAU,YAAY;AACtB,iCAAa;AACb,wCAAoB;AAEpB,wBAAI,WAAW,GAAG;AAEd;AAAA;AAAA;AAAA;AAKZ,uBAAO,OAAO,KAAK;AACnB,uBAAO,UAAU;AAAA;AAWrB,wBAAU,iBAAiB,SAAS,YAAY,UAAU,MAAM;AAC5D,oBAAI,MAAM,SAAS,GAAG,IAAI,KAAK,IAAI,SAAS,GAAG,IAAI,KAAK,GACpD,MAAM;AAEV,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AACzC,sBAAI,MAAM,SAAS,GAAG,IAAI,KAAK,IAAI,SAAS,GAAG,IAAI,KAAK;AAExD,sBAAI,MAAM,KAAK;AACX,0BAAM;AAAA,6BACC,MAAM,KAAK;AAClB,0BAAM;AAAA;AAAA;AAId,2BAAW,MAAM;AACjB,2BAAW,MAAM;AAAA;AAarB,wBAAU,gBAAgB,SAAS,OAAO,OAAO,QAAQ,WAAW;AAChE,oBAAI,WAAW,MAAM,UACjB,iBAAiB,SAAS,QAC1B,iBAAiB,MAAM,SAAS,GAChC,iBAAiB,MAAM,SAAS,GAChC,UAAU,OAAO,IAAI,WACrB,UAAU,OAAO,IAAI,WACrB,kBAAkB,OAAO,WACzB,SACA,SACA,SACA,UACA;AAGJ,qBAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK,GAAG;AACpC,4BAAU,SAAS;AACnB,6BAAW,UAAW,kBAAiB,QAAQ,KAAK,UAAW,kBAAiB,QAAQ;AAGxF,sBAAI,WAAW,iBAAiB;AAC5B,sCAAkB;AAClB,8BAAU;AAAA;AAAA;AAKlB,0BAAU,SAAU,kBAAiB,QAAQ,QAAQ,KAAK;AAC1D,kCAAkB,UAAW,kBAAiB,QAAQ,KAAK,UAAW,kBAAiB,QAAQ;AAG/F,0BAAU,SAAU,SAAQ,QAAQ,KAAK;AACzC,oBAAI,UAAW,kBAAiB,QAAQ,KAAK,UAAW,kBAAiB,QAAQ,KAAK,iBAAiB;AACnG,4BAAU,KAAK;AACf,4BAAU,KAAK;AAEf,yBAAO;AAAA;AAGX,0BAAU,KAAK;AACf,0BAAU,KAAK;AAEf,uBAAO;AAAA;AAAA;AAAA;AAAA,UAoGR,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,OAAO;AAEX,oBAAO,UAAU;AAEjB,gBAAI,UAAU,oBAAoB;AAElC,YAAC,YAAW;AASR,mBAAK,SAAS,SAAS,WAAW,WAAW;AACzC,oBAAI,QAAQ,UAAU,OAClB,QAAQ,UAAU;AAEtB,oBAAI,OAAO;AAAA,kBACP,IAAI,KAAK,GAAG,OAAO;AAAA,kBACnB;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA,UAAU;AAAA,kBACV,gBAAgB;AAAA,kBAChB,YAAY;AAAA,kBACZ,UAAU;AAAA,kBACV,iBAAiB;AAAA,kBACjB,UAAU,MAAM,YAAY,MAAM;AAAA,kBAClC,aAAa;AAAA,kBACb,aAAa;AAAA,kBACb,aAAa;AAAA,kBACb,UAAU;AAAA,kBACV,gBAAgB;AAAA,kBAChB,aAAa;AAAA,kBACb,MAAM;AAAA;AAGV,qBAAK,OAAO,MAAM,WAAW;AAE7B,uBAAO;AAAA;AAUX,mBAAK,SAAS,SAAS,MAAM,WAAW,WAAW;AAC/C,oBAAI,WAAW,KAAK,UAChB,WAAW,UAAU,UACrB,iBAAiB,KAAK,gBACtB,UAAU,UAAU,SACpB,UAAU,UAAU,SACpB,wBAAwB,QAAQ,SAAS;AAE7C,qBAAK,WAAW;AAChB,qBAAK,cAAc;AACnB,qBAAK,YAAY;AACjB,qBAAK,aAAa,UAAU;AAC5B,qBAAK,cAAc,QAAQ,cAAc,QAAQ;AACjD,qBAAK,WAAW,QAAQ,WAAW,QAAQ,WAAW,QAAQ,WAAW,QAAQ;AACjF,qBAAK,iBAAiB,QAAQ,iBAAiB,QAAQ,iBAAiB,QAAQ,iBAAiB,QAAQ;AACzG,qBAAK,cAAc,QAAQ,cAAc,QAAQ,cAAc,QAAQ,cAAc,QAAQ;AAC7F,qBAAK,OAAO,QAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO,QAAQ;AAEjE,0BAAU,OAAO;AACjB,+BAAe,SAAS;AAExB,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAI,UAAU,SAAS,IACnB,YAAY,QAAQ,SAAS,UAAU,QAAQ,QAAQ,wBAAwB,QAAQ,OACvF,UAAU,SAAS;AAEvB,sBAAI,SAAS;AACT,mCAAe,KAAK;AAAA,yBACjB;AACH,mCAAe,KAAK,SAAS,aAAa,QAAQ,OAAO;AAAA;AAAA;AAAA;AAYrE,mBAAK,YAAY,SAAS,MAAM,UAAU,WAAW;AACjD,oBAAI,UAAU;AACV,uBAAK,WAAW;AAChB,uBAAK,cAAc;AAAA,uBAChB;AACH,uBAAK,WAAW;AAChB,uBAAK,eAAe,SAAS;AAAA;AAAA;AAWrC,mBAAK,KAAK,SAAS,OAAO,OAAO;AAC7B,oBAAI,MAAM,KAAK,MAAM,IAAI;AACrB,yBAAO,MAAM,MAAM,KAAK,MAAM,MAAM;AAAA,uBACjC;AACH,yBAAO,MAAM,MAAM,KAAK,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,UASzC,SAAS,SAAQ,UAAS,qBAAqB;AAYtD,gBAAI,aAAa;AAEjB,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,OAAO,oBAAoB;AAC/B,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAER,yBAAW,WAAW;AACtB,yBAAW,gBAAgB;AAC3B,yBAAW,aAAa;AAaxB,yBAAW,SAAS,SAAS,SAAS;AAClC,oBAAI,aAAa;AAGjB,oBAAI,WAAW,SAAS,CAAC,WAAW;AAChC,6BAAW,SAAS,EAAE,GAAG,GAAG,GAAG;AACnC,oBAAI,WAAW,SAAS,CAAC,WAAW;AAChC,6BAAW,SAAS,EAAE,GAAG,GAAG,GAAG;AAGnC,oBAAI,gBAAgB,WAAW,QAAQ,OAAO,IAAI,WAAW,MAAM,UAAU,WAAW,UAAU,WAAW,QACzG,gBAAgB,WAAW,QAAQ,OAAO,IAAI,WAAW,MAAM,UAAU,WAAW,UAAU,WAAW,QACzG,SAAS,OAAO,UAAU,OAAO,IAAI,eAAe;AAExD,2BAAW,SAAS,OAAO,WAAW,WAAW,cAAc,WAAW,SAAS;AAGnF,2BAAW,KAAK,WAAW,MAAM,OAAO;AACxC,2BAAW,QAAQ,WAAW,SAAS;AACvC,2BAAW,OAAO;AAClB,2BAAW,YAAY,WAAW,aAAc,YAAW,SAAS,IAAI,IAAI;AAC5E,2BAAW,UAAU,WAAW,WAAW;AAC3C,2BAAW,mBAAmB,WAAW,oBAAoB;AAC7D,2BAAW,SAAS,WAAW,QAAQ,WAAW,MAAM,QAAQ,WAAW;AAC3E,2BAAW,SAAS,WAAW,QAAQ,WAAW,MAAM,QAAQ,WAAW;AAC3E,2BAAW,SAAS;AAGpB,oBAAI,SAAS;AAAA,kBACT,SAAS;AAAA,kBACT,WAAW;AAAA,kBACX,aAAa;AAAA,kBACb,MAAM;AAAA,kBACN,SAAS;AAAA;AAGb,oBAAI,WAAW,WAAW,KAAK,WAAW,YAAY,KAAK;AACvD,yBAAO,OAAO;AACd,yBAAO,UAAU;AAAA,2BACV,WAAW,YAAY,KAAK;AACnC,yBAAO,OAAO;AAAA;AAGlB,2BAAW,SAAS,OAAO,OAAO,QAAQ,WAAW;AAErD,uBAAO;AAAA;AASX,yBAAW,cAAc,SAAS,QAAQ;AACtC,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACvC,sBAAI,OAAO,OAAO,IACd,UAAU,KAAK;AAEnB,sBAAI,KAAK,YAAa,QAAQ,MAAM,KAAK,QAAQ,MAAM,KAAK,QAAQ,UAAU,GAAI;AAC9E;AAAA;AAGJ,uBAAK,SAAS,KAAK,QAAQ;AAC3B,uBAAK,SAAS,KAAK,QAAQ;AAC3B,uBAAK,SAAS,QAAQ;AAAA;AAAA;AAW9B,yBAAW,WAAW,SAAS,aAAa,WAAW;AAEnD,yBAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK,GAAG;AAC5C,sBAAI,aAAa,YAAY,IACzB,SAAS,CAAC,WAAW,SAAU,WAAW,SAAS,WAAW,MAAM,UACpE,SAAS,CAAC,WAAW,SAAU,WAAW,SAAS,WAAW,MAAM;AAExE,sBAAI,UAAU,QAAQ;AAClB,+BAAW,MAAM,YAAY,IAAI;AAAA;AAAA;AAKzC,qBAAK,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK,GAAG;AACxC,+BAAa,YAAY;AACzB,2BAAS,CAAC,WAAW,SAAU,WAAW,SAAS,WAAW,MAAM;AACpE,2BAAS,CAAC,WAAW,SAAU,WAAW,SAAS,WAAW,MAAM;AAEpE,sBAAI,CAAC,UAAU,CAAC,QAAQ;AACpB,+BAAW,MAAM,YAAY,IAAI;AAAA;AAAA;AAAA;AAY7C,yBAAW,QAAQ,SAAS,YAAY,WAAW;AAC/C,oBAAI,QAAQ,WAAW,OACnB,QAAQ,WAAW,OACnB,SAAS,WAAW,QACpB,SAAS,WAAW;AAExB,oBAAI,CAAC,SAAS,CAAC;AACX;AAGJ,oBAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,yBAAO,OAAO,QAAQ,MAAM,QAAQ,WAAW,QAAQ;AACvD,6BAAW,SAAS,MAAM;AAAA;AAI9B,oBAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,yBAAO,OAAO,QAAQ,MAAM,QAAQ,WAAW,QAAQ;AACvD,6BAAW,SAAS,MAAM;AAAA;AAG9B,oBAAI,cAAc,QACd,cAAc;AAElB,oBAAI;AAAO,gCAAc,OAAO,IAAI,MAAM,UAAU;AACpD,oBAAI;AAAO,gCAAc,OAAO,IAAI,MAAM,UAAU;AAEpD,oBAAI,CAAC,eAAe,CAAC;AACjB;AAEJ,oBAAI,QAAQ,OAAO,IAAI,aAAa,cAChC,gBAAgB,OAAO,UAAU;AAGrC,oBAAI,gBAAgB,WAAW,YAAY;AACvC,kCAAgB,WAAW;AAAA;AAI/B,oBAAI,aAAc,iBAAgB,WAAW,UAAU,eACnD,YAAY,WAAW,YAAY,IAAI,WAAW,YAAY,YAAY,WAAW,WACrF,QAAQ,OAAO,KAAK,OAAO,aAAa,YACxC,YAAa,SAAQ,MAAM,cAAc,KAAM,SAAQ,MAAM,cAAc,IAC3E,eAAgB,SAAQ,MAAM,iBAAiB,KAAM,SAAQ,MAAM,iBAAiB,IACpF,kBAAkB,YAAY,cAC9B,QACA,OACA,QACA,gBACA;AAEJ,oBAAI,WAAW,SAAS;AACpB,sBAAI,OAAO,OAAO;AAClB,2BAAS,OAAO,IAAI,OAAO;AAE3B,qCAAmB,OAAO,IACtB,SAAS,OAAO,IAAI,MAAM,UAAU,MAAM,iBAAiB,MAC3D,SAAS,OAAO,IAAI,MAAM,UAAU,MAAM,iBAAiB;AAG/D,mCAAiB,OAAO,IAAI,QAAQ;AAAA;AAGxC,oBAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,0BAAQ,MAAM,cAAc;AAG5B,wBAAM,kBAAkB,KAAK,MAAM,IAAI;AACvC,wBAAM,kBAAkB,KAAK,MAAM,IAAI;AAGvC,wBAAM,SAAS,KAAK,MAAM,IAAI;AAC9B,wBAAM,SAAS,KAAK,MAAM,IAAI;AAG9B,sBAAI,WAAW,SAAS;AACpB,0BAAM,aAAa,KAAK,WAAW,UAAU,OAAO,IAAI,iBAAiB;AACzE,0BAAM,aAAa,KAAK,WAAW,UAAU,OAAO,IAAI,iBAAiB;AAAA;AAI7E,2BAAU,OAAO,MAAM,QAAQ,SAAS,kBAAmB,WAAW,gBAAgB,MAAM,iBAAkB,KAAI,WAAW;AAC7H,wBAAM,kBAAkB,SAAS;AACjC,wBAAM,SAAS;AAAA;AAGnB,oBAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,0BAAQ,MAAM,cAAc;AAG5B,wBAAM,kBAAkB,KAAK,MAAM,IAAI;AACvC,wBAAM,kBAAkB,KAAK,MAAM,IAAI;AAGvC,wBAAM,SAAS,KAAK,MAAM,IAAI;AAC9B,wBAAM,SAAS,KAAK,MAAM,IAAI;AAG9B,sBAAI,WAAW,SAAS;AACpB,0BAAM,aAAa,KAAK,WAAW,UAAU,OAAO,IAAI,iBAAiB;AACzE,0BAAM,aAAa,KAAK,WAAW,UAAU,OAAO,IAAI,iBAAiB;AAAA;AAI7E,2BAAU,OAAO,MAAM,QAAQ,SAAS,kBAAmB,WAAW,gBAAgB,MAAM,iBAAkB,KAAI,WAAW;AAC7H,wBAAM,kBAAkB,SAAS;AACjC,wBAAM,SAAS;AAAA;AAAA;AAWvB,yBAAW,eAAe,SAAS,QAAQ;AACvC,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO,IACd,UAAU,KAAK;AAEnB,sBAAI,KAAK,YAAa,QAAQ,MAAM,KAAK,QAAQ,MAAM,KAAK,QAAQ,UAAU,GAAI;AAC9E;AAAA;AAGJ,2BAAS,IAAI,MAAM;AAGnB,2BAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,wBAAI,OAAO,KAAK,MAAM;AAEtB,6BAAS,UAAU,KAAK,UAAU;AAElC,wBAAI,IAAI,GAAG;AACP,2BAAK,SAAS,KAAK,QAAQ;AAC3B,2BAAK,SAAS,KAAK,QAAQ;AAAA;AAG/B,wBAAI,QAAQ,UAAU,GAAG;AACrB,+BAAS,OAAO,KAAK,UAAU,QAAQ,OAAO,KAAK;AACnD,2BAAK,OAAO,KAAK,MAAM,QAAQ;AAC/B,0BAAI,IAAI,GAAG;AACP,+BAAO,YAAY,KAAK,UAAU,QAAQ,OAAO,KAAK,UAAU,KAAK;AAAA;AAAA;AAI7E,2BAAO,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK;AAAA;AAInD,0BAAQ,SAAS,WAAW;AAC5B,0BAAQ,KAAK,WAAW;AACxB,0BAAQ,KAAK,WAAW;AAAA;AAAA;AAUhC,yBAAW,cAAc,SAAS,YAAY;AAC1C,uBAAO;AAAA,kBACH,GAAI,YAAW,QAAQ,WAAW,MAAM,SAAS,IAAI,KAAK,WAAW,OAAO;AAAA,kBAC5E,GAAI,YAAW,QAAQ,WAAW,MAAM,SAAS,IAAI,KAAK,WAAW,OAAO;AAAA;AAAA;AAUpF,yBAAW,cAAc,SAAS,YAAY;AAC1C,uBAAO;AAAA,kBACH,GAAI,YAAW,QAAQ,WAAW,MAAM,SAAS,IAAI,KAAK,WAAW,OAAO;AAAA,kBAC5E,GAAI,YAAW,QAAQ,WAAW,MAAM,SAAS,IAAI,KAAK,WAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,UA+JjF,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,OAAO;AAEX,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAQR,mBAAK,eAAe,SAAS,UAAU;AACnC,oBAAI,OAAO;AAGX,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAI,IAAK,KAAI,KAAK,SAAS,QACvB,SAAS,OAAO,UAAU;AAAA,oBACtB,GAAG,SAAS,GAAG,IAAI,SAAS,GAAG;AAAA,oBAC/B,GAAG,SAAS,GAAG,IAAI,SAAS,GAAG;AAAA,sBAEnC,WAAY,OAAO,MAAM,IAAK,WAAY,OAAO,IAAI,OAAO;AAGhE,6BAAW,SAAS,QAAQ,GAAG;AAC/B,uBAAK,YAAY;AAAA;AAGrB,uBAAO,OAAO,OAAO;AAAA;AASzB,mBAAK,SAAS,SAAS,MAAM,OAAO;AAChC,oBAAI,UAAU;AACV;AAEJ,oBAAI,MAAM,KAAK,IAAI,QACf,MAAM,KAAK,IAAI;AAEnB,yBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,sBAAI,OAAO,KAAK,IACZ;AACJ,uBAAK,KAAK,IAAI,MAAM,KAAK,IAAI;AAC7B,uBAAK,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI;AACjC,uBAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,UASd,SAAS,SAAQ,UAAS,qBAAqB;AAatD,gBAAI,UAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,OAAO,oBAAoB;AAC/B,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAcR,sBAAO,YAAY,SAAS,GAAG,GAAG,OAAO,QAAQ,SAAS;AACtD,0BAAU,WAAW;AAErB,oBAAI,YAAY;AAAA,kBACZ,OAAO;AAAA,kBACP,UAAU,EAAE,GAAM;AAAA,kBAClB,UAAU,SAAS,SAAS,aAAa,QAAQ,UAAU,QAAQ,MAAM,SAAS,UAAU;AAAA;AAGhG,oBAAI,QAAQ,SAAS;AACjB,sBAAI,UAAU,QAAQ;AACtB,4BAAU,WAAW,SAAS,QAAQ,UAAU,UAAU,QAAQ,QAC9D,QAAQ,SAAS,QAAQ,YAAY,QAAQ;AACjD,yBAAO,QAAQ;AAAA;AAGnB,uBAAO,KAAK,OAAO,OAAO,OAAO,IAAI,WAAW;AAAA;AAgBpD,sBAAO,YAAY,SAAS,GAAG,GAAG,OAAO,QAAQ,OAAO,SAAS;AAC7D,0BAAU,WAAW;AAErB,yBAAS;AACT,oBAAI,OAAQ,KAAK,QAAQ,KAAM;AAE/B,oBAAI,KAAK,QAAQ,OACb,KAAK,KAAK,MACV,KAAK,KAAK,IACV;AAEJ,oBAAI,QAAQ,KAAK;AACb,iCAAe,aAAa,KAAK,MAAO,CAAC,SAAU,QAAQ,KAAK,MAAO,CAAC,SAAU,QAAQ,KAAK;AAAA,uBAC5F;AACH,iCAAe,aAAa,KAAK,MAAO,CAAC,SAAU,QAAQ,KAAK;AAAA;AAGpE,oBAAI,YAAY;AAAA,kBACZ,OAAO;AAAA,kBACP,UAAU,EAAE,GAAM;AAAA,kBAClB,UAAU,SAAS,SAAS;AAAA;AAGhC,oBAAI,QAAQ,SAAS;AACjB,sBAAI,UAAU,QAAQ;AACtB,4BAAU,WAAW,SAAS,QAAQ,UAAU,UAAU,QAAQ,QAC9D,QAAQ,SAAS,QAAQ,YAAY,QAAQ;AACjD,yBAAO,QAAQ;AAAA;AAGnB,uBAAO,KAAK,OAAO,OAAO,OAAO,IAAI,WAAW;AAAA;AAepD,sBAAO,SAAS,SAAS,GAAG,GAAG,QAAQ,SAAS,UAAU;AACtD,0BAAU,WAAW;AAErB,oBAAI,SAAS;AAAA,kBACT,OAAO;AAAA,kBACP,cAAc;AAAA;AAIlB,2BAAW,YAAY;AACvB,oBAAI,QAAQ,KAAK,KAAK,KAAK,IAAI,IAAI,KAAK,IAAI,UAAU;AAGtD,oBAAI,QAAQ,MAAM;AACd,2BAAS;AAEb,uBAAO,QAAO,QAAQ,GAAG,GAAG,OAAO,QAAQ,OAAO,OAAO,IAAI,QAAQ;AAAA;AAezE,sBAAO,UAAU,SAAS,GAAG,GAAG,OAAO,QAAQ,SAAS;AACpD,0BAAU,WAAW;AAErB,oBAAI,QAAQ;AACR,yBAAO,QAAO,OAAO,GAAG,GAAG,QAAQ;AAEvC,oBAAI,QAAQ,IAAI,KAAK,KAAK,OACtB,OAAO,IACP,SAAS,QAAQ;AAErB,yBAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AAC/B,sBAAI,QAAQ,SAAU,IAAI,OACtB,KAAK,KAAK,IAAI,SAAS,QACvB,KAAK,KAAK,IAAI,SAAS;AAE3B,0BAAQ,OAAO,GAAG,QAAQ,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAGzD,oBAAI,UAAU;AAAA,kBACV,OAAO;AAAA,kBACP,UAAU,EAAE,GAAM;AAAA,kBAClB,UAAU,SAAS,SAAS;AAAA;AAGhC,oBAAI,QAAQ,SAAS;AACjB,sBAAI,UAAU,QAAQ;AACtB,0BAAQ,WAAW,SAAS,QAAQ,QAAQ,UAAU,QAAQ,QAC1D,QAAQ,SAAS,QAAQ,YAAY,QAAQ;AACjD,yBAAO,QAAQ;AAAA;AAGnB,uBAAO,KAAK,OAAO,OAAO,OAAO,IAAI,SAAS;AAAA;AAqClD,sBAAO,eAAe,SAAS,GAAG,GAAG,YAAY,SAAS,cAAc,iBAAiB,aAAa,uBAAuB;AACzH,oBAAI,SAAS,OAAO,aAChB,WACA,MACA,OACA,UACA,WACA,UACA,GACA,GACA,GACA,GACA;AAGJ,4BAAY,QAAQ,UAAU,OAAO;AAErC,0BAAU,WAAW;AACrB,wBAAQ;AAER,+BAAe,OAAO,iBAAiB,cAAc,eAAe;AACpE,kCAAkB,OAAO,oBAAoB,cAAc,kBAAkB;AAC7E,8BAAc,OAAO,gBAAgB,cAAc,cAAc;AACjE,wCAAwB,OAAO,0BAA0B,cAAc,wBAAwB;AAG/F,oBAAI,CAAC,OAAO,QAAQ,WAAW,KAAK;AAChC,+BAAa,CAAC;AAAA;AAGlB,qBAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAAG;AACvC,6BAAW,WAAW;AACtB,6BAAW,SAAS,SAAS;AAC7B,8BAAY,CAAC;AAEb,sBAAI,aAAa,CAAC,WAAW;AACzB,2BAAO,SACH;AAAA;AAIR,sBAAI,YAAY,CAAC,WAAW;AACxB,wBAAI,UAAU;AACV,iCAAW,SAAS,cAAc;AAAA,2BAC/B;AAEH,iCAAW,SAAS,KAAK;AAAA;AAG7B,0BAAM,KAAK;AAAA,sBACP,UAAU,EAAE,GAAM;AAAA,sBAClB;AAAA;AAAA,yBAED;AAEH,wBAAI,UAAU,SAAS,IAAI,SAAS,QAAQ;AACxC,6BAAO,CAAC,OAAO,GAAG,OAAO;AAAA;AAI7B,2BAAO,QAAQ;AACf,wBAAI,oBAAoB;AACpB,6BAAO,sBAAsB,SAAS;AAC1C,wBAAI,0BAA0B,SAAS,OAAO;AAC1C,6BAAO,sBAAsB,SAAS;AAG1C,wBAAI,aAAa,OAAO,YAAY;AAGpC,yBAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACpC,0BAAI,QAAQ,WAAW;AAGvB,0BAAI,gBAAgB,MAAM,IAAI,SAAS,WAAU;AAC7C,+BAAO;AAAA,0BACH,GAAG,UAAS;AAAA,0BACZ,GAAG,UAAS;AAAA;AAAA;AAKpB,0BAAI,cAAc,KAAK,SAAS,KAAK,iBAAiB;AAClD;AAGJ,4BAAM,KAAK;AAAA,wBACP,UAAU,SAAS,OAAO;AAAA,wBAC1B,UAAU;AAAA;AAAA;AAAA;AAAA;AAO1B,qBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,wBAAM,KAAK,KAAK,OAAO,OAAO,OAAO,MAAM,IAAI;AAAA;AAInD,oBAAI,cAAc;AACd,sBAAI,sBAAsB;AAE1B,uBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,wBAAI,QAAQ,MAAM;AAElB,yBAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,0BAAI,QAAQ,MAAM;AAElB,0BAAI,OAAO,SAAS,MAAM,QAAQ,MAAM,SAAS;AAC7C,4BAAI,MAAM,MAAM,UACZ,MAAM,MAAM;AAGhB,6BAAK,IAAI,GAAG,IAAI,MAAM,SAAS,QAAQ,KAAK;AACxC,+BAAK,IAAI,GAAG,IAAI,MAAM,SAAS,QAAQ,KAAK;AAExC,gCAAI,KAAK,OAAO,iBAAiB,OAAO,IAAI,IAAK,KAAI,KAAK,IAAI,SAAS,IAAI,MACvE,KAAK,OAAO,iBAAiB,OAAO,IAAI,IAAI,IAAI,IAAK,KAAI,KAAK,IAAI;AAGtE,gCAAI,KAAK,uBAAuB,KAAK,qBAAqB;AACtD,kCAAI,GAAG,aAAa;AACpB,kCAAI,GAAG,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUhD,oBAAI,MAAM,SAAS,GAAG;AAElB,yBAAO,KAAK,OAAO,OAAO,OAAO,EAAE,OAAO,MAAM,MAAM,MAAM;AAG5D,uBAAK,YAAY,MAAM,EAAE,GAAM;AAE/B,yBAAO;AAAA,uBACJ;AACH,yBAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,UASlB,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,QAAQ;AAEZ,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAQR,oBAAM,SAAS,SAAS,SAAS;AAC7B,oBAAI,QAAQ;AAEZ,oBAAI,CAAC,SAAS;AACV,yBAAO,IAAI,oEAAoE;AAAA;AAGnF,sBAAM,UAAU,WAAW,SAAS;AACpC,sBAAM,WAAW,EAAE,GAAG,GAAG,GAAG;AAC5B,sBAAM,WAAW,EAAE,GAAG,GAAG,GAAG;AAC5B,sBAAM,oBAAoB,EAAE,GAAG,GAAG,GAAG;AACrC,sBAAM,kBAAkB,EAAE,GAAG,GAAG,GAAG;AACnC,sBAAM,SAAS,EAAE,GAAG,GAAG,GAAG;AAC1B,sBAAM,QAAQ,EAAE,GAAG,GAAG,GAAG;AACzB,sBAAM,aAAa;AACnB,sBAAM,SAAS;AACf,sBAAM,aAAa,SAAS,MAAM,QAAQ,aAAa,qBAAqB,OAAO;AAEnF,sBAAM,eAAe;AAAA,kBACjB,WAAW;AAAA,kBACX,WAAW;AAAA,kBACX,SAAS;AAAA,kBACT,YAAY;AAAA;AAGhB,sBAAM,YAAY,SAAS,OAAO;AAC9B,sBAAI,WAAW,MAAM,0BAA0B,OAAO,MAAM,SAAS,MAAM,aACvE,UAAU,MAAM;AAEpB,sBAAI,SAAS;AACT,0BAAM,SAAS;AACf,0BAAM;AAAA;AAGV,wBAAM,SAAS,IAAI,SAAS;AAC5B,wBAAM,SAAS,IAAI,SAAS;AAC5B,wBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,wBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,wBAAM,aAAa,YAAY;AAAA;AAGnC,sBAAM,YAAY,SAAS,OAAO;AAC9B,sBAAI,WAAW,MAAM,0BAA0B,OAAO,MAAM,SAAS,MAAM,aACvE,UAAU,MAAM;AAEpB,sBAAI,SAAS;AACT,0BAAM,SAAS;AACf,0BAAM;AAAA,yBACH;AACH,0BAAM,SAAS,MAAM;AAAA;AAGzB,wBAAM,SAAS,IAAI,SAAS;AAC5B,wBAAM,SAAS,IAAI,SAAS;AAC5B,wBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,wBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,wBAAM,kBAAkB,IAAI,MAAM,SAAS;AAC3C,wBAAM,kBAAkB,IAAI,MAAM,SAAS;AAC3C,wBAAM,aAAa,YAAY;AAAA;AAGnC,sBAAM,UAAU,SAAS,OAAO;AAC5B,sBAAI,WAAW,MAAM,0BAA0B,OAAO,MAAM,SAAS,MAAM,aACvE,UAAU,MAAM;AAEpB,sBAAI,SAAS;AACT,0BAAM;AAAA;AAGV,wBAAM,SAAS;AACf,wBAAM,SAAS,IAAI,SAAS;AAC5B,wBAAM,SAAS,IAAI,SAAS;AAC5B,wBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,wBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,wBAAM,gBAAgB,IAAI,MAAM,SAAS;AACzC,wBAAM,gBAAgB,IAAI,MAAM,SAAS;AACzC,wBAAM,aAAa,UAAU;AAAA;AAGjC,sBAAM,aAAa,SAAS,OAAO;AAC/B,wBAAM,aAAa,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,MAAM,cAAc,CAAC,MAAM;AACvE,wBAAM;AAAA;AAGV,sBAAM,WAAW,OAAO,MAAM;AAE9B,uBAAO;AAAA;AASX,oBAAM,aAAa,SAAS,OAAO,SAAS;AACxC,sBAAM,UAAU;AAEhB,wBAAQ,iBAAiB,aAAa,MAAM;AAC5C,wBAAQ,iBAAiB,aAAa,MAAM;AAC5C,wBAAQ,iBAAiB,WAAW,MAAM;AAE1C,wBAAQ,iBAAiB,cAAc,MAAM;AAC7C,wBAAQ,iBAAiB,kBAAkB,MAAM;AAEjD,wBAAQ,iBAAiB,aAAa,MAAM;AAC5C,wBAAQ,iBAAiB,cAAc,MAAM;AAC7C,wBAAQ,iBAAiB,YAAY,MAAM;AAAA;AAQ/C,oBAAM,oBAAoB,SAAS,OAAO;AACtC,sBAAM,aAAa,YAAY;AAC/B,sBAAM,aAAa,YAAY;AAC/B,sBAAM,aAAa,UAAU;AAC7B,sBAAM,aAAa,aAAa;AAChC,sBAAM,aAAa;AAAA;AASvB,oBAAM,YAAY,SAAS,OAAO,QAAQ;AACtC,sBAAM,OAAO,IAAI,OAAO;AACxB,sBAAM,OAAO,IAAI,OAAO;AACxB,sBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,sBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AAAA;AASvE,oBAAM,WAAW,SAAS,OAAO,OAAO;AACpC,sBAAM,MAAM,IAAI,MAAM;AACtB,sBAAM,MAAM,IAAI,MAAM;AACtB,sBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AACnE,sBAAM,SAAS,IAAI,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO;AAAA;AAYvE,oBAAM,4BAA4B,SAAS,OAAO,SAAS,YAAY;AACnE,oBAAI,gBAAgB,QAAQ,yBACxB,WAAY,SAAS,mBAAmB,SAAS,KAAK,cAAc,SAAS,MAC7E,UAAW,OAAO,gBAAgB,SAAa,OAAO,cAAc,SAAS,YAC7E,UAAW,OAAO,gBAAgB,SAAa,OAAO,cAAc,SAAS,WAC7E,UAAU,MAAM,gBAChB,GAAG;AAEP,oBAAI,SAAS;AACT,sBAAI,QAAQ,GAAG,QAAQ,cAAc,OAAO;AAC5C,sBAAI,QAAQ,GAAG,QAAQ,cAAc,MAAM;AAAA,uBACxC;AACH,sBAAI,MAAM,QAAQ,cAAc,OAAO;AACvC,sBAAI,MAAM,QAAQ,cAAc,MAAM;AAAA;AAG1C,uBAAO;AAAA,kBACH,GAAG,IAAK,SAAQ,cAAe,SAAQ,SAAS,QAAQ,eAAe;AAAA,kBACvE,GAAG,IAAK,SAAQ,eAAgB,SAAQ,UAAU,QAAQ,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,UAS/E,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,WAAW;AAEf,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,YAAY,oBAAoB;AAEpC,YAAC,YAAW;AAQR,uBAAS,SAAS,SAAS,SAAS;AAChC,oBAAI,WAAW;AAAA,kBACX,QAAQ;AAAA,kBACR,OAAO;AAAA;AAGX,uBAAO,OAAO,OAAO,UAAU;AAAA;AASnC,uBAAS,YAAY,SAAS,UAAU,QAAQ;AAC5C,yBAAS,SAAS,OAAO,MAAM;AAAA;AAQnC,uBAAS,QAAQ,SAAS,UAAU;AAChC,yBAAS,SAAS;AAAA;AAYtB,uBAAS,aAAa,SAAS,UAAU;AACrC,oBAAI,aAAa,IACb,QAAQ,SAAS,OACjB,SAAS,SAAS,QAClB,eAAe,OAAO,QACtB,aAAa,SAAS,YACtB,WAAW,UAAU,UACrB,GACA;AAEJ,uBAAO,KAAK,SAAS;AAErB,qBAAK,IAAI,GAAG,IAAI,cAAc,KAAK;AAC/B,sBAAI,QAAQ,OAAO,IACf,UAAU,MAAM,QAChB,YAAY,MAAM,OAAO,IAAI,GAC7B,YAAY,MAAM,OAAO,IAAI,GAC7B,YAAY,MAAM,OAAO,IAAI,GAC7B,cAAc,MAAM,YAAY,MAAM,YACtC,eAAe,MAAM,MAAM,QAC3B,eAAe,iBAAiB;AAEpC,uBAAK,IAAI,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,wBAAI,QAAQ,OAAO,IACf,UAAU,MAAM;AAEpB,wBAAI,QAAQ,IAAI,IAAI,WAAW;AAC3B;AAAA;AAGJ,wBAAI,YAAY,QAAQ,IAAI,KAAK,YAAY,QAAQ,IAAI,GAAG;AACxD;AAAA;AAGJ,wBAAI,eAAgB,OAAM,YAAY,MAAM,aAAa;AACrD;AAAA;AAGJ,wBAAI,CAAC,WAAW,MAAM,iBAAiB,MAAM,kBAAkB;AAC3D;AAAA;AAGJ,wBAAI,eAAe,MAAM,MAAM;AAE/B,wBAAI,gBAAgB,iBAAiB,GAAG;AACpC,0BAAI,YAAY,SAAS,OAAO,OAAO;AAEvC,0BAAI,WAAW;AACX,mCAAW,KAAK;AAAA;AAAA,2BAEjB;AACH,0BAAI,cAAc,eAAe,IAAI,IAAI,GACrC,cAAc,eAAe,IAAI,IAAI;AAEzC,+BAAS,IAAI,aAAa,IAAI,cAAc,KAAK;AAC7C,4BAAI,QAAQ,MAAM,MAAM,IACpB,UAAU,MAAM;AAEpB,iCAAS,IAAI,aAAa,IAAI,cAAc,KAAK;AAC7C,8BAAI,QAAQ,MAAM,MAAM,IACpB,UAAU,MAAM;AAEpB,8BAAI,QAAQ,IAAI,IAAI,QAAQ,IAAI,KAAK,QAAQ,IAAI,IAAI,QAAQ,IAAI,KAC1D,QAAQ,IAAI,IAAI,QAAQ,IAAI,KAAK,QAAQ,IAAI,IAAI,QAAQ,IAAI,GAAG;AACnE;AAAA;AAGJ,8BAAI,YAAY,SAAS,OAAO,OAAO;AAEvC,8BAAI,WAAW;AACX,uCAAW,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQxC,uBAAO;AAAA;AAWX,uBAAS,aAAa,SAAS,SAAS,SAAS;AAC7C,oBAAI,QAAQ,UAAU,QAAQ,SAAS,QAAQ,UAAU;AACrD,yBAAO,QAAQ,QAAQ;AAE3B,uBAAQ,SAAQ,OAAO,QAAQ,cAAc,KAAM,SAAQ,OAAO,QAAQ,cAAc;AAAA;AAY5F,uBAAS,kBAAkB,SAAS,OAAO,OAAO;AAC9C,uBAAO,MAAM,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA,UA8B9C,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,SAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAER,qBAAO,YAAY;AAQnB,qBAAO,WAAW,SAAS,QAAQ;AAC/B,oBAAI,CAAC,OAAO,SAAS,SAAS;AAC1B,yBAAO,KAAK,oBAAoB,OAAO,SAAS,SAAS;AAAA;AAG7D,oBAAI,OAAO,QAAQ,OAAO,WAAW;AACjC,sBAAI,aAAa,OAAO,UAAU,OAAO,OACrC,gBAAgB,OAAO,aAAa,OAAO,SAAS,QACpD,oBAAoB,OAAO,aAAa,WAAW,SAAS;AAEhE,sBAAI,gBAAgB,mBAAmB;AACnC,2BAAO,KAAK,oBAAoB,OAAO,SAAS,aAAa,mBAAmB,OAAO,SAAS;AAChG,2BAAO,UAAU,OAAO,QAAQ;AAAA,6BACzB,gBAAgB,mBAAmB;AAC1C,2BAAO,KAAK,oBAAoB,OAAO,SAAS,aAAa,4BAA4B,OAAO,SAAS;AAAA,6BAClG,WAAW,YAAY;AAC9B,2BAAO,KAAK,oBAAoB,OAAO,SAAS,SAAS;AAAA;AAAA,uBAE1D;AACH,yBAAO,UAAU,OAAO,QAAQ;AAAA;AAGpC,uBAAO;AAAA;AAUX,qBAAO,UAAU,SAAS,YAAY;AAClC,uBAAO,OAAO,UAAU,OAAO,gBAAgB,YAAY;AAAA;AAS/D,qBAAO,WAAW,SAAS,QAAQ;AAC/B,uBAAO,OAAO,WAAW,WAAW,SAAU,QAAO,QAAQ,eAAe,MAAO,QAAO,WAAW,OAAO,SAAS;AAAA;AAazH,qBAAO,WAAW,SAAS,KAAK;AAC5B,uBAAO,OAAO,IAAI,QAAQ,IAAI,WAAW,IAAI;AAAA;AAUjD,qBAAO,SAAS,SAAS,SAAQ,MAAM;AACnC,uBAAO,QAAO,KAAK,QAAQ,QAAQ;AAAA;AAYvC,qBAAO,QAAQ,SAAS,QAAQ,SAAQ;AACpC,oBAAI,SAAS,OAAO,OAAO,OAAO,gBAAgB,OAAO;AACzD,uBAAO,CAAC,OAAO,OAAQ,QAAO,SAAS,OAAO,QAAQ,OAAO,iBAAiB,QAAO,SAAS,OAAO;AAAA;AAmBzG,qBAAO,MAAM,SAAS,SAAQ,SAAS;AACnC,wBAAO,OAAQ,SAAO,QAAQ,IAAI,OAAO,WAAW;AAEpD,oBAAI,QAAO,KAAK,WAAW,GAAG;AAC1B,yBAAO,KAAK,eAAe,OAAO,SAAS,UAAS;AACpD;AAAA;AAGJ,oBAAI,eAAe,OAAO,aAAa,UACnC,qBAAqB,OAAO,gBAAgB,eAC5C,SAAS;AAEb,yBAAS,IAAI,GAAG,IAAI,mBAAmB,QAAQ,KAAK,GAAG;AACnD,sBAAI,mBAAmB,OAAO,QAAO,MAAM;AACvC;AAAA;AAGJ,sBAAI,SAAS,OAAO,QAAQ,mBAAmB;AAE/C,sBAAI,CAAC,QAAQ;AACT,2BAAO,KAAK,YAAO,mBAAmB;AACtC;AAAA;AAGJ,sBAAI,OAAO,OAAO,SAAQ,OAAO,OAAO;AACpC;AAAA;AAGJ,sBAAI,CAAC,OAAO,MAAM,QAAQ,UAAS;AAC/B,2BAAO,KAAK,eAAe,OAAO,SAAS,SAAS,UAAU,OAAO,KAAK,oBAAoB,OAAO,SAAS,WAAU;AACxH,2BAAO,UAAU;AAAA;AAGrB,sBAAI,OAAO,SAAS;AAChB,2BAAO,QAAQ;AAAA,yBACZ;AACH,2BAAO,KAAK,eAAe,OAAO,SAAS,SAAS;AACpD,2BAAO,UAAU;AAAA;AAGrB,sBAAI,OAAO,SAAS;AAChB,2BAAO,KAAK,eAAQ,OAAO,SAAS;AACpC,2BAAO,OAAO;AAAA,yBACX;AACH,2BAAO,KAAK,YAAO,OAAO,SAAS;AAAA;AAGvC,0BAAO,KAAK,KAAK,OAAO;AAAA;AAG5B,oBAAI,OAAO,SAAS,GAAG;AACnB,yBAAO,KAAK,OAAO,KAAK;AAAA;AAAA;AAUhC,qBAAO,eAAe,SAAS,SAAQ,SAAS;AAC5C,oBAAI,aAAa,OAAO,gBAAgB,UACpC,OAAO,WAAW;AAEtB,0BAAU,WAAW;AAErB,oBAAI,QAAQ,SAAS;AACjB;AAAA;AAGJ,0BAAS,OAAO,QAAQ,YAAW;AAEnC,wBAAQ,QAAQ,OAAO,IAAI,QAAO,QAAQ,IAAI,SAAS,YAAY;AAC/D,sBAAI,OAAO,SAAS,aAAa;AAC7B,2BAAO,SAAS;AAAA;AAGpB,sBAAI,SAAS,OAAO,gBAAgB,aAChC,WAAW,OAAO,QAAQ;AAE9B,sBAAI,YAAY,CAAC,OAAO,iBAAiB,SAAS,SAAS,OAAO,QAAQ;AACtE,2BAAO,KACH,wBAAwB,OAAO,SAAS,WAAW,oBACnD,OAAO,SAAS,SAAS,WAAW,OAAO,SAAS,cAAc;AAGtE,6BAAS,UAAU;AACnB,4BAAO,UAAU;AAAA,6BACV,CAAC,UAAU;AAClB,2BAAO,KACH,wBAAwB,OAAO,SAAS,aAAa,WACrD,OAAO,SAAS,aAAa;AAGjC,4BAAO,UAAU;AAAA;AAGrB,yBAAO,OAAO;AAAA;AAGlB,yBAAS,IAAI,GAAG,IAAI,QAAQ,MAAM,QAAQ,KAAK,GAAG;AAC9C,yBAAO,aAAa,QAAQ,MAAM,IAAI;AAAA;AAG1C,uBAAO;AAAA;AAYX,qBAAO,kBAAkB,SAAS,YAAY;AAC1C,oBAAI,OAAO,SAAS,aAAa;AAC7B,sBAAI,UAAU;AAEd,sBAAI,CAAC,QAAQ,KAAK,aAAa;AAC3B,2BAAO,KAAK,2BAA2B,YAAY;AAAA;AAGvD,yBAAO;AAAA,oBACH,MAAM,WAAW,MAAM,KAAK;AAAA,oBAC5B,OAAO,WAAW,MAAM,KAAK,MAAM;AAAA;AAAA;AAI3C,uBAAO;AAAA,kBACH,MAAM,WAAW;AAAA,kBACjB,OAAO,WAAW,SAAS,WAAW;AAAA;AAAA;AAoB9C,qBAAO,eAAe,SAAS,OAAO;AAClC,oBAAI,UAAU;AAEd,oBAAI,CAAC,QAAQ,KAAK,QAAQ;AACtB,yBAAO,KAAK,wBAAwB,OAAO;AAAA;AAG/C,oBAAI,QAAQ,QAAQ,KAAK;AACzB,oBAAI,QAAQ,OAAO,MAAM;AACzB,oBAAI,QAAQ,OAAO,MAAM;AACzB,oBAAI,QAAQ,OAAO,MAAM;AAEzB,uBAAO;AAAA,kBACH,SAAS,QAAQ,MAAM,MAAM,MAAM;AAAA,kBACnC,SAAS,MAAM;AAAA,kBACf;AAAA,kBACA,UAAU,MAAM,MAAM,MAAM,MAAM;AAAA,kBAClC;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA,OAAO,CAAC,OAAO,OAAO;AAAA,kBACtB,YAAY,MAAM;AAAA,kBAClB,QAAQ,QAAQ,MAAM,QAAQ,MAAM;AAAA;AAAA;AAa5C,qBAAO,mBAAmB,SAAS,SAAS,OAAO;AAC/C,wBAAQ,SAAS;AAEjB,oBAAI,IAAI,OAAO,aAAa,QACxB,IAAI,OAAO,aAAa;AAE5B,oBAAI,EAAE,SAAS;AACX,sBAAI,EAAE,aAAa,OAAO,YAAY,KAAK;AACvC,2BAAO;AAAA;AAGX,sBAAI,EAAE,aAAa,KAAK;AACpB,2BAAO,EAAE,SAAS,EAAE;AAAA;AAGxB,sBAAI,EAAE,aAAa,MAAM;AACrB,2BAAO,EAAE,UAAU,EAAE;AAAA;AAGzB,sBAAI,EAAE,aAAa,KAAK;AACpB,2BAAO,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE;AAAA;AAGtE,sBAAI,EAAE,aAAa,KAAK;AACpB,wBAAI,EAAE,QAAQ,GAAG;AACb,6BAAO,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE;AAAA;AAGhD,wBAAI,EAAE,QAAQ,GAAG;AACb,6BAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE;AAAA;AAG/C,2BAAO,EAAE,UAAU,EAAE;AAAA;AAAA;AAI7B,uBAAO,YAAY,SAAS,YAAY;AAAA;AAAA;AAAA;AAAA,UAQzC,SAAS,SAAQ,UAAS,qBAAqB;AAUtD,gBAAI,UAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,aAAY,oBAAoB;AACpC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,QAAQ,oBAAoB;AAEhC,YAAC,YAAW;AAER,kBAAI,wBACA;AAEJ,kBAAI,OAAO,WAAW,aAAa;AAC/B,yCAAyB,OAAO,yBAAyB,OAAO,+BAC/B,OAAO,4BAA4B,OAAO,2BAC1C,SAAS,UAAS;AAAE,yBAAO,WAAW,WAAW;AAAE,6BAAS,OAAO;AAAA,qBAAW,MAAO;AAAA;AAEtH,wCAAwB,OAAO,wBAAwB,OAAO,2BAC7B,OAAO,8BAA8B,OAAO;AAAA;AAGjF,sBAAO,WAAW;AAClB,sBAAO,aAAa,MAAO;AAU3B,sBAAO,SAAS,SAAS,SAAS;AAC9B,oBAAI,WAAW;AAAA,kBACX,YAAY;AAAA,kBACZ,QAAQ;AAAA,kBACR,SAAS;AAAA,kBACT,QAAQ;AAAA,kBACR,OAAO;AAAA,kBACP,gBAAgB;AAAA,kBAChB,QAAQ;AAAA,oBACJ,aAAa;AAAA,oBACb,OAAO;AAAA,oBACP,cAAc;AAAA,oBACd,UAAU;AAAA,oBACV,eAAe;AAAA,oBACf,aAAa;AAAA,oBACb,kBAAkB;AAAA,oBAClB,yBAAyB;AAAA,oBACzB,oBAAoB;AAAA,oBACpB,sBAAsB;AAAA,oBACtB,gBAAgB;AAAA;AAAA,kBAEpB,SAAS;AAAA,oBACL,OAAO;AAAA,oBACP,QAAQ;AAAA,oBACR,YAAY;AAAA,oBACZ,YAAY;AAAA,oBACZ,qBAAqB;AAAA,oBACrB,WAAW,CAAC,CAAC,QAAQ;AAAA,oBACrB,SAAS;AAAA,oBACT,YAAY;AAAA,oBACZ,cAAc;AAAA,oBACd,WAAW;AAAA,oBACX,WAAW;AAAA,oBACX,iBAAiB;AAAA,oBACjB,YAAY;AAAA,oBACZ,cAAc;AAAA,oBACd,gBAAgB;AAAA,oBAChB,iBAAiB;AAAA,oBACjB,UAAU;AAAA,oBACV,eAAe;AAAA,oBACf,oBAAoB;AAAA,oBACpB,SAAS;AAAA,oBACT,mBAAmB;AAAA,oBACnB,iBAAiB;AAAA,oBACjB,mBAAmB;AAAA,oBACnB,mBAAmB;AAAA;AAAA;AAI3B,oBAAI,SAAS,OAAO,OAAO,UAAU;AAErC,oBAAI,OAAO,QAAQ;AACf,yBAAO,OAAO,QAAQ,OAAO,QAAQ,SAAS,OAAO,OAAO;AAC5D,yBAAO,OAAO,SAAS,OAAO,QAAQ,UAAU,OAAO,OAAO;AAAA;AAGlE,uBAAO,QAAQ,QAAQ;AACvB,uBAAO,SAAS,QAAQ;AACxB,uBAAO,SAAS,OAAO,UAAU,cAAc,OAAO,QAAQ,OAAO,OAAO,QAAQ;AACpF,uBAAO,UAAU,OAAO,OAAO,WAAW;AAC1C,uBAAO,WAAW;AAElB,uBAAO,SAAS,OAAO,UAAU;AAAA,kBAC7B,KAAK;AAAA,oBACD,GAAG;AAAA,oBACH,GAAG;AAAA;AAAA,kBAEP,KAAK;AAAA,oBACD,GAAG,OAAO,OAAO;AAAA,oBACjB,GAAG,OAAO,OAAO;AAAA;AAAA;AAKzB,uBAAO,QAAQ,iBAAiB;AAEhC,oBAAI,OAAO,QAAQ,eAAe,GAAG;AACjC,0BAAO,cAAc,QAAQ,OAAO,QAAQ;AAAA;AAGhD,oBAAI,OAAO,UAAU,OAAO,UAAU;AAClC,yBAAO,QAAQ,YAAY,OAAO;AAAA,2BAC3B,CAAC,OAAO,OAAO,YAAY;AAClC,yBAAO,IAAI,4FAA4F;AAAA;AAG3G,uBAAO;AAAA;AAQX,sBAAO,MAAM,SAAS,QAAQ;AAC1B,gBAAC,eAAc,MAAK;AAChB,yBAAO,iBAAiB,uBAAuB;AAE/C,gCAAc,QAAQ;AAEtB,0BAAO,MAAM,QAAQ;AAErB,sBAAI,OAAO,QAAQ,aAAa,OAAO,QAAQ,WAAW;AACtD,4BAAO,MAAM,QAAQ,OAAO,SAAS;AAAA;AAGzC,sBAAI,OAAO,QAAQ,mBAAmB,OAAO,QAAQ,WAAW;AAC5D,4BAAO,YAAY,QAAQ,OAAO,SAAS;AAAA;AAAA;AAAA;AAUvD,sBAAO,OAAO,SAAS,QAAQ;AAC3B,sCAAsB,OAAO;AAAA;AAUjC,sBAAO,gBAAgB,SAAS,QAAQ,YAAY;AAChD,oBAAI,UAAU,OAAO,SACjB,SAAS,OAAO;AAEpB,oBAAI,eAAe,QAAQ;AACvB,+BAAa,eAAe;AAAA;AAGhC,wBAAQ,aAAa;AACrB,uBAAO,aAAa,oBAAoB;AACxC,uBAAO,QAAQ,QAAQ,QAAQ;AAC/B,uBAAO,SAAS,QAAQ,SAAS;AACjC,uBAAO,MAAM,QAAQ,QAAQ,QAAQ;AACrC,uBAAO,MAAM,SAAS,QAAQ,SAAS;AAAA;AAgB3C,sBAAO,SAAS,SAAS,QAAQ,SAAS,SAAS,QAAQ;AACvD,yBAAS,OAAO,WAAW,cAAc,SAAS;AAClD,0BAAU,OAAO,QAAQ,WAAW,UAAU,CAAC;AAC/C,0BAAU,WAAW;AAAA,kBACjB,GAAG;AAAA,kBACH,GAAG;AAAA;AAIP,oBAAI,SAAS;AAAA,kBACT,KAAK,EAAE,GAAG,UAAU,GAAG;AAAA,kBACvB,KAAK,EAAE,GAAG,WAAW,GAAG;AAAA;AAG5B,yBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AACxC,sBAAI,SAAS,QAAQ,IACjB,MAAM,OAAO,SAAS,OAAO,OAAO,MAAO,OAAO,OAAO,OAAO,YAAY,QAC5E,MAAM,OAAO,SAAS,OAAO,OAAO,MAAO,OAAO,OAAO,OAAO,YAAY;AAEhF,sBAAI,OAAO,KAAK;AACZ,wBAAI,IAAI,IAAI,OAAO,IAAI;AACnB,6BAAO,IAAI,IAAI,IAAI;AAEvB,wBAAI,IAAI,IAAI,OAAO,IAAI;AACnB,6BAAO,IAAI,IAAI,IAAI;AAEvB,wBAAI,IAAI,IAAI,OAAO,IAAI;AACnB,6BAAO,IAAI,IAAI,IAAI;AAEvB,wBAAI,IAAI,IAAI,OAAO,IAAI;AACnB,6BAAO,IAAI,IAAI,IAAI;AAAA;AAAA;AAK/B,oBAAI,QAAS,OAAO,IAAI,IAAI,OAAO,IAAI,IAAK,IAAI,QAAQ,GACpD,SAAU,OAAO,IAAI,IAAI,OAAO,IAAI,IAAK,IAAI,QAAQ,GACrD,aAAa,OAAO,OAAO,QAC3B,YAAY,OAAO,OAAO,OAC1B,aAAa,YAAY,YACzB,aAAa,QAAQ,QACrB,SAAS,GACT,SAAS;AAGb,oBAAI,aAAa,YAAY;AACzB,2BAAS,aAAa;AAAA,uBACnB;AACH,2BAAS,aAAa;AAAA;AAI1B,uBAAO,QAAQ,YAAY;AAG3B,uBAAO,OAAO,IAAI,IAAI,OAAO,IAAI;AACjC,uBAAO,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,QAAQ;AAC7C,uBAAO,OAAO,IAAI,IAAI,OAAO,IAAI;AACjC,uBAAO,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,SAAS;AAG9C,oBAAI,QAAQ;AACR,yBAAO,OAAO,IAAI,KAAK,QAAQ,MAAO,QAAQ,SAAU;AACxD,yBAAO,OAAO,IAAI,KAAK,QAAQ,MAAO,QAAQ,SAAU;AACxD,yBAAO,OAAO,IAAI,KAAK,SAAS,MAAO,SAAS,SAAU;AAC1D,yBAAO,OAAO,IAAI,KAAK,SAAS,MAAO,SAAS,SAAU;AAAA;AAI9D,uBAAO,OAAO,IAAI,KAAK,QAAQ;AAC/B,uBAAO,OAAO,IAAI,KAAK,QAAQ;AAC/B,uBAAO,OAAO,IAAI,KAAK,QAAQ;AAC/B,uBAAO,OAAO,IAAI,KAAK,QAAQ;AAG/B,oBAAI,OAAO,OAAO;AACd,wBAAM,SAAS,OAAO,OAAO;AAAA,oBACzB,GAAI,QAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,OAAO,OAAO;AAAA,oBAC/D,GAAI,QAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,OAAO,OAAO;AAAA;AAGnE,wBAAM,UAAU,OAAO,OAAO,OAAO,OAAO;AAAA;AAAA;AASpD,sBAAO,qBAAqB,SAAS,QAAQ;AACzC,oBAAI,cAAc,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,GACtD,eAAe,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,GACvD,eAAe,cAAc,OAAO,QAAQ,OAC5C,eAAe,eAAe,OAAO,QAAQ;AAEjD,uBAAO,QAAQ,aACX,OAAO,QAAQ,aAAa,cAAc,GAAG,GAC7C,OAAO,QAAQ,aAAa,cAAc,GAAG;AAGjD,uBAAO,QAAQ,UAAU,CAAC,OAAO,OAAO,IAAI,GAAG,CAAC,OAAO,OAAO,IAAI;AAAA;AAQtE,sBAAO,mBAAmB,SAAS,QAAQ;AACvC,uBAAO,QAAQ,aAAa,OAAO,QAAQ,YAAY,GAAG,GAAG,OAAO,QAAQ,YAAY,GAAG;AAAA;AAS/F,sBAAO,QAAQ,SAAS,QAAQ,MAAM;AAClC,oBAAI,YAAY,OAAO,OACnB,SAAS,OAAO,QAChB,QAAQ,OAAO,OACf,SAAS,OAAO,QAChB,UAAU,OAAO,SACjB,UAAU,OAAO,SACjB,SAAS,OAAO;AAEpB,oBAAI,YAAY,WAAU,UAAU,QAChC,iBAAiB,WAAU,eAAe,QAC1C,aAAa,QAAQ,aAAa,QAAQ,sBAAsB,QAAQ,YACxE,SAAS,IACT,cAAc,IACd;AAEJ,oBAAI,QAAQ;AAAA,kBACR,WAAW,OAAO,OAAO;AAAA;AAG7B,uBAAO,QAAQ,QAAQ,gBAAgB;AAGvC,oBAAI,OAAO,sBAAsB;AAC7B,mCAAiB,QAAQ;AAG7B,wBAAQ,2BAA2B;AACnC,wBAAQ,YAAY;AACpB,wBAAQ,SAAS,GAAG,GAAG,OAAO,OAAO,OAAO;AAC5C,wBAAQ,2BAA2B;AAGnC,oBAAI,QAAQ,WAAW;AAEnB,uBAAK,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACnC,wBAAI,OAAO,UAAU;AACrB,wBAAI,OAAO,SAAS,KAAK,QAAQ,OAAO;AACpC,6BAAO,KAAK;AAAA;AAIpB,uBAAK,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AACxC,wBAAI,aAAa,eAAe,IAC5B,QAAQ,WAAW,OACnB,QAAQ,WAAW,OACnB,cAAc,WAAW,QACzB,cAAc,WAAW;AAE7B,wBAAI;AAAO,oCAAc,OAAO,IAAI,MAAM,UAAU,WAAW;AAC/D,wBAAI;AAAO,oCAAc,OAAO,IAAI,MAAM,UAAU,WAAW;AAE/D,wBAAI,CAAC,eAAe,CAAC;AACjB;AAEJ,wBAAI,OAAO,SAAS,OAAO,QAAQ,gBAAgB,OAAO,SAAS,OAAO,QAAQ;AAC9E,kCAAY,KAAK;AAAA;AAIzB,0BAAO,mBAAmB;AAG1B,sBAAI,OAAO,OAAO;AACd,0BAAM,SAAS,OAAO,OAAO;AAAA,sBACzB,GAAI,QAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,OAAO,QAAQ;AAAA,sBAChE,GAAI,QAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,OAAO,QAAQ;AAAA;AAGpE,0BAAM,UAAU,OAAO,OAAO,OAAO,OAAO;AAAA;AAAA,uBAE7C;AACH,gCAAc;AACd,2BAAS;AAET,sBAAI,OAAO,QAAQ,eAAe,GAAG;AACjC,2BAAO,QAAQ,aAAa,OAAO,QAAQ,YAAY,GAAG,GAAG,OAAO,QAAQ,YAAY,GAAG;AAAA;AAAA;AAInG,oBAAI,CAAC,QAAQ,cAAe,OAAO,kBAAkB,QAAQ,cAAe;AAExE,0BAAO,OAAO,QAAQ,QAAQ;AAAA,uBAC3B;AACH,sBAAI,QAAQ;AACR,4BAAO,gBAAgB,QAAQ,QAAQ;AAG3C,0BAAO,eAAe,QAAQ,QAAQ;AAAA;AAG1C,oBAAI,QAAQ;AACR,0BAAO,WAAW,QAAQ,QAAQ;AAEtC,oBAAI,QAAQ,YAAY,QAAQ;AAC5B,0BAAO,SAAS,QAAQ,QAAQ;AAEpC,oBAAI,QAAQ;AACR,0BAAO,cAAc,QAAQ,QAAQ;AAEzC,oBAAI,QAAQ;AACR,0BAAO,aAAa,QAAQ,QAAQ;AAExC,oBAAI,QAAQ;AACR,0BAAO,QAAQ,QAAQ,QAAQ;AAEnC,oBAAI,QAAQ;AACR,0BAAO,YAAY,QAAQ,OAAO,MAAM,MAAM;AAElD,oBAAI,QAAQ;AACR,0BAAO,WAAW,QAAQ,OAAO,MAAM,MAAM;AAEjD,oBAAI,QAAQ;AACR,0BAAO,cAAc,QAAQ,QAAQ;AAEzC,oBAAI,QAAQ;AACR,0BAAO,cAAc,QAAQ,OAAO,OAAO;AAE/C,wBAAO,YAAY,aAAa;AAEhC,oBAAI,QAAQ,WAAW;AAEnB,0BAAO,iBAAiB;AAAA;AAG5B,uBAAO,QAAQ,QAAQ,eAAe;AAGtC,uBAAO,cAAc,OAAO,QAAQ;AAAA;AAWxC,sBAAO,QAAQ,SAAS,QAAQ,SAAS,MAAM;AAC3C,oBAAI,SAAS,OAAO,QAChB,QAAQ,OAAO,OACf,SAAS,WAAU,UAAU,QAC7B,QAAQ,GACR,QAAQ,IACR,SAAS,IACT,IAAI,GACJ,IAAI;AAGR,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACvC,2BAAS,OAAO,GAAG,MAAM;AAAA;AAI7B,oBAAI,WAAW;AAAA,kBACX,QAAQ;AAAA,kBACR,QAAQ,OAAO;AAAA,kBACf,QAAQ,WAAU,eAAe,OAAO;AAAA,kBACxC,QAAQ,WAAU,cAAc,OAAO;AAAA,kBACvC,QAAQ,OAAO,MAAM,KAAK;AAAA;AAI9B,wBAAQ,YAAY;AACpB,wBAAQ,SAAS,GAAG,GAAG,QAAQ,KAAK;AAEpC,wBAAQ,OAAO;AACf,wBAAQ,eAAe;AACvB,wBAAQ,YAAY;AAGpB,yBAAS,OAAO,UAAU;AACtB,sBAAI,UAAU,SAAS;AAEvB,0BAAQ,YAAY;AACpB,0BAAQ,SAAS,KAAK,IAAI,OAAO,IAAI;AAGrC,0BAAQ,YAAY;AACpB,0BAAQ,SAAS,SAAS,IAAI,OAAO,IAAI;AAEzC,uBAAK;AAAA;AAAA;AAWb,sBAAO,cAAc,SAAS,QAAQ,SAAS;AAC3C,oBAAI,SAAS,OAAO,QAChB,SAAS,OAAO,QAChB,eAAe,OAAO,cACtB,iBAAiB,OAAO,gBACxB,0BAA0B,OAAO,yBACjC,qBAAqB,OAAO,oBAC5B,uBAAuB,OAAO,sBAC9B,kBAAkB,OAAO,OAAO;AAEpC,oBAAI,YAAY,MAAM,eAClB,cAAc,MAAM,iBACpB,kBAAkB,MAAM,qBACxB,oBAAoB,MAAM,uBAC1B,uBAAuB,MAAM,0BAC7B,WAAY,uBAAuB,aAAc,GACjD,MAAO,MAAO,aAAc;AAEhC,oBAAI,cAAc,GACd,MAAM,IACN,QAAQ,IACR,SAAS,IACT,IAAI,IACJ,IAAI;AAGR,wBAAQ,YAAY;AACpB,wBAAQ,SAAS,GAAG,IAAI,MAAM,IAAI,QAAQ,IAAI,IAAI;AAGlD,wBAAO,OACH,SAAS,GAAG,GAAG,OAAO,aAAa,aAAa,QAChD,KAAK,MAAM,OAAO,QAClB,MAAM,QAAO,UACb,SAAS,GAAG;AAAE,yBAAQ,aAAa,KAAK,YAAa;AAAA;AAIzD,wBAAO,OACH,SAAS,IAAI,MAAM,OAAO,GAAG,OAAO,aAAa,mBAAmB,QACpE,gBAAgB,QAAQ,KAAK,OAC7B,QAAO,aAAa,iBACpB,SAAS,GAAG;AAAE,yBAAQ,mBAAmB,KAAK,kBAAmB;AAAA;AAIrE,wBAAO,OACH,SAAS,IAAK,OAAM,SAAS,GAAG,GAAG,OAAO,aAAa,qBAAqB,QAC5E,kBAAkB,QAAQ,KAAK,OAC/B,IAAK,oBAAoB,QAAO,UAChC,SAAS,GAAG;AAAE,yBAAQ,qBAAqB,KAAK,oBAAqB;AAAA;AAIzE,wBAAO,OACH,SAAS,IAAK,OAAM,SAAS,GAAG,GAAG,OAAO,aAAa,eAAe,QACtE,YAAY,QAAQ,KAAK,OACzB,IAAK,cAAc,QAAO,UAC1B,SAAS,GAAG;AAAE,yBAAQ,eAAe,KAAK,cAAe;AAAA;AAI7D,wBAAO,OACH,SAAS,IAAK,OAAM,SAAS,GAAG,GAAG,OAAO,aAAa,wBAAwB,QAC/E,SAAS,QAAQ,KAAK,MACtB,WAAW,WAAW,UACtB,SAAS,GAAG;AAAE,yBAAU,yBAAwB,KAAK,aAAa,KAAM,YAAa,KAAK;AAAA;AAAA;AAkBlG,sBAAO,SAAS,SAAS,SAAS,GAAG,GAAG,OAAO,QAAQ,OAAO,OAAO,WAAW,OAAO;AAEnF,wBAAQ,cAAc;AACtB,wBAAQ,YAAY;AACpB,wBAAQ,YAAY;AACpB,wBAAQ,SAAS,GAAG,IAAI,GAAG,OAAO;AAGlC,wBAAQ;AACR,wBAAQ,OAAO,GAAG,IAAI,IAAI,SAAS,OAAO,MAAM,MAAM,MAAM,IAAI,IAAI;AACpE,yBAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AAC/B,0BAAQ,OAAO,IAAI,GAAG,IAAI,IAAK,KAAI,QAAQ,SAAS,OAAO,MAAM,MAAM,MAAM,IAAI,IAAI,KAAK;AAAA;AAE9F,wBAAQ;AAGR,wBAAQ,YAAY,SAAS,OAAO,MAAM,KAAK,KAAK,WAAW,GAAG,OAAO;AACzE,wBAAQ,SAAS,GAAG,IAAI,GAAG,GAAG;AAG9B,wBAAQ,OAAO;AACf,wBAAQ,eAAe;AACvB,wBAAQ,YAAY;AACpB,wBAAQ,YAAY;AACpB,wBAAQ,SAAS,OAAO,IAAI,OAAO,IAAI;AAAA;AAU3C,sBAAO,cAAc,SAAS,aAAa,SAAS;AAChD,oBAAI,IAAI;AAER,yBAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,sBAAI,aAAa,YAAY;AAE7B,sBAAI,CAAC,WAAW,OAAO,WAAW,CAAC,WAAW,UAAU,CAAC,WAAW;AAChE;AAEJ,sBAAI,QAAQ,WAAW,OACnB,QAAQ,WAAW,OACnB,OACA;AAEJ,sBAAI,OAAO;AACP,4BAAQ,OAAO,IAAI,MAAM,UAAU,WAAW;AAAA,yBAC3C;AACH,4BAAQ,WAAW;AAAA;AAGvB,sBAAI,WAAW,OAAO,SAAS,OAAO;AAClC,sBAAE;AACF,sBAAE,IAAI,MAAM,GAAG,MAAM,GAAG,GAAG,GAAG,IAAI,KAAK;AACvC,sBAAE;AAAA,yBACC;AACH,wBAAI,OAAO;AACP,4BAAM,OAAO,IAAI,MAAM,UAAU,WAAW;AAAA,2BACzC;AACH,4BAAM,WAAW;AAAA;AAGrB,sBAAE;AACF,sBAAE,OAAO,MAAM,GAAG,MAAM;AAExB,wBAAI,WAAW,OAAO,SAAS,UAAU;AACrC,0BAAI,QAAQ,OAAO,IAAI,KAAK,QACxB,SAAS,OAAO,KAAK,OAAO,UAAU,SACtC,QAAQ,KAAK,KAAK,OAAO,MAAM,WAAW,SAAS,GAAG,IAAI,MAC1D;AAEJ,+BAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AAC/B,iCAAS,IAAI,MAAM,IAAI,IAAI;AAE3B,0BAAE,OACE,MAAM,IAAI,MAAM,IAAK,KAAI,SAAS,OAAO,IAAI,SAAS,GACtD,MAAM,IAAI,MAAM,IAAK,KAAI,SAAS,OAAO,IAAI,SAAS;AAAA;AAAA;AAKlE,sBAAE,OAAO,IAAI,GAAG,IAAI;AAAA;AAGxB,sBAAI,WAAW,OAAO,WAAW;AAC7B,sBAAE,YAAY,WAAW,OAAO;AAChC,sBAAE,cAAc,WAAW,OAAO;AAClC,sBAAE;AAAA;AAGN,sBAAI,WAAW,OAAO,SAAS;AAC3B,sBAAE,YAAY,WAAW,OAAO;AAChC,sBAAE;AACF,sBAAE,IAAI,MAAM,GAAG,MAAM,GAAG,GAAG,GAAG,IAAI,KAAK;AACvC,sBAAE,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,KAAK;AACnC,sBAAE;AACF,sBAAE;AAAA;AAAA;AAAA;AAad,sBAAO,SAAS,SAAS,QAAQ,QAAQ,SAAS;AAC9C,oBAAI,IAAI,SACJ,SAAS,OAAO,QAChB,UAAU,OAAO,SACjB,oBAAoB,QAAQ,qBAAqB,CAAC,QAAQ,YAC1D,MACA,MACA,GACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,yBAAO,OAAO;AAEd,sBAAI,CAAC,KAAK,OAAO;AACb;AAGJ,uBAAK,IAAI,KAAK,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAChE,2BAAO,KAAK,MAAM;AAElB,wBAAI,CAAC,KAAK,OAAO;AACb;AAEJ,wBAAI,QAAQ,gBAAgB,KAAK,YAAY;AACzC,wBAAE,cAAc,MAAM,KAAK,OAAO;AAAA,+BAC3B,KAAK,OAAO,YAAY,GAAG;AAClC,wBAAE,cAAc,KAAK,OAAO;AAAA;AAGhC,wBAAI,KAAK,OAAO,UAAU,KAAK,OAAO,OAAO,WAAW,CAAC,QAAQ,YAAY;AAEzE,0BAAI,SAAS,KAAK,OAAO,QACrB,UAAU,YAAY,QAAQ,OAAO;AAEzC,wBAAE,UAAU,KAAK,SAAS,GAAG,KAAK,SAAS;AAC3C,wBAAE,OAAO,KAAK;AAEd,wBAAE,UACE,SACA,QAAQ,QAAQ,CAAC,OAAO,UAAU,OAAO,QACzC,QAAQ,SAAS,CAAC,OAAO,UAAU,OAAO,QAC1C,QAAQ,QAAQ,OAAO,QACvB,QAAQ,SAAS,OAAO;AAI5B,wBAAE,OAAO,CAAC,KAAK;AACf,wBAAE,UAAU,CAAC,KAAK,SAAS,GAAG,CAAC,KAAK,SAAS;AAAA,2BAC1C;AAEH,0BAAI,KAAK,cAAc;AACnB,0BAAE;AACF,0BAAE,IAAI,KAAK,SAAS,GAAG,KAAK,SAAS,GAAG,KAAK,cAAc,GAAG,IAAI,KAAK;AAAA,6BACpE;AACH,0BAAE;AACF,0BAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAE9C,iCAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,8BAAI,CAAC,KAAK,SAAS,IAAI,GAAG,cAAc,mBAAmB;AACvD,8BAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA,iCAC3C;AACH,8BAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA;AAGlD,8BAAI,KAAK,SAAS,GAAG,cAAc,CAAC,mBAAmB;AACnD,8BAAE,OAAO,KAAK,SAAU,KAAI,KAAK,KAAK,SAAS,QAAQ,GAAG,KAAK,SAAU,KAAI,KAAK,KAAK,SAAS,QAAQ;AAAA;AAAA;AAIhH,0BAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAC9C,0BAAE;AAAA;AAGN,0BAAI,CAAC,QAAQ,YAAY;AACrB,0BAAE,YAAY,KAAK,OAAO;AAE1B,4BAAI,KAAK,OAAO,WAAW;AACvB,4BAAE,YAAY,KAAK,OAAO;AAC1B,4BAAE,cAAc,KAAK,OAAO;AAC5B,4BAAE;AAAA;AAGN,0BAAE;AAAA,6BACC;AACH,0BAAE,YAAY;AACd,0BAAE,cAAc;AAChB,0BAAE;AAAA;AAAA;AAIV,sBAAE,cAAc;AAAA;AAAA;AAAA;AAa5B,sBAAO,iBAAiB,SAAS,QAAQ,QAAQ,SAAS;AACtD,oBAAI,IAAI,SACJ,oBAAoB,OAAO,QAAQ,mBACnC,MACA,MACA,GACA,GACA;AAEJ,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,yBAAO,OAAO;AAEd,sBAAI,CAAC,KAAK,OAAO;AACb;AAGJ,uBAAK,IAAI,KAAK,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAChE,2BAAO,KAAK,MAAM;AAElB,sBAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAE9C,yBAAK,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AACvC,0BAAI,CAAC,KAAK,SAAS,IAAI,GAAG,cAAc,mBAAmB;AACvD,0BAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA,6BAC3C;AACH,0BAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA;AAGlD,0BAAI,KAAK,SAAS,GAAG,cAAc,CAAC,mBAAmB;AACnD,0BAAE,OAAO,KAAK,SAAU,KAAI,KAAK,KAAK,SAAS,QAAQ,GAAG,KAAK,SAAU,KAAI,KAAK,KAAK,SAAS,QAAQ;AAAA;AAAA;AAIhH,sBAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA;AAAA;AAItD,kBAAE,YAAY;AACd,kBAAE,cAAc;AAChB,kBAAE;AAAA;AAWN,sBAAO,kBAAkB,SAAS,QAAQ,QAAQ,SAAS;AACvD,oBAAI,IAAI,SACJ,MACA,MACA,GACA,GACA;AAEJ,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,yBAAO,OAAO;AAEd,sBAAI,CAAC,KAAK,OAAO,WAAW,KAAK,MAAM,WAAW;AAC9C;AAEJ,oBAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAE9C,uBAAK,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AACvC,sBAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA;AAGlD,oBAAE,OAAO,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG;AAAA;AAGlD,kBAAE,YAAY;AACd,kBAAE,cAAc;AAChB,kBAAE;AAAA;AAWN,sBAAO,gBAAgB,SAAS,QAAQ,QAAQ,SAAS;AACrD,oBAAI,IAAI,SACJ,GACA,GACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,sBAAI,QAAQ,OAAO,GAAG;AACtB,uBAAK,IAAI,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtD,wBAAI,OAAO,MAAM;AACjB,yBAAK,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AACvC,wBAAE,YAAY;AACd,wBAAE,SAAS,IAAI,MAAM,GAAG,KAAK,SAAS,IAAK,MAAK,SAAS,GAAG,IAAI,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS,IAAK,MAAK,SAAS,GAAG,IAAI,KAAK,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA;AAcnK,sBAAO,gBAAgB,SAAS,QAAQ,OAAO,SAAS;AACpD,oBAAI,IAAI;AACR,kBAAE,YAAY;AACd,kBAAE,SAAS,MAAM,SAAS,IAAI,OAAO,MAAM,SAAS,GAAG,MAAM,SAAS,IAAI,GAAG,MAAM,SAAS,IAAI;AAAA;AAWpG,sBAAO,aAAa,SAAS,QAAQ,QAAQ,SAAS;AAClD,oBAAI,IAAI,SACJ,SAAS,OAAO,QAChB,UAAU,OAAO;AAErB,kBAAE;AAEF,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO;AAElB,sBAAI,KAAK,OAAO,SAAS;AACrB,wBAAI,QAAQ,OAAO,GAAG;AACtB,6BAAS,IAAI,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC1D,0BAAI,OAAO,MAAM;AACjB,wBAAE,KAAK,KAAK,OAAO,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI,GAAG,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI;AAAA;AAAA;AAAA;AAKpI,oBAAI,QAAQ,YAAY;AACpB,oBAAE,cAAc;AAAA,uBACb;AACH,oBAAE,cAAc;AAAA;AAGpB,kBAAE,YAAY;AACd,kBAAE;AAAA;AAWN,sBAAO,WAAW,SAAS,QAAQ,QAAQ,SAAS;AAChD,oBAAI,IAAI,SACJ,SAAS,OAAO,QAChB,UAAU,OAAO,SACjB,MACA,GACA,GACA;AAEJ,kBAAE;AAEF,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,sBAAI,OAAO,OAAO,IACd,QAAQ,KAAK;AAEjB,sBAAI,CAAC,KAAK,OAAO;AACb;AAEJ,sBAAI,QAAQ,UAAU;AAElB,yBAAK,IAAI,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtD,6BAAO,MAAM;AACb,2BAAK,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACnC,4BAAI,OAAO,KAAK,KAAK;AACrB,0BAAE,OAAO,KAAK,SAAS,GAAG,KAAK,SAAS;AACxC,0BAAE,OAAO,KAAK,SAAS,IAAI,KAAK,IAAI,IAAI,KAAK,SAAS,IAAI,KAAK,IAAI;AAAA;AAAA;AAAA,yBAGxE;AACH,yBAAK,IAAI,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtD,6BAAO,MAAM;AACb,2BAAK,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AAEnC,0BAAE,OAAO,KAAK,SAAS,GAAG,KAAK,SAAS;AACxC,0BAAE,OAAQ,MAAK,SAAS,GAAG,IAAI,KAAK,SAAS,KAAK,SAAS,SAAO,GAAG,KAAK,GACrE,MAAK,SAAS,GAAG,IAAI,KAAK,SAAS,KAAK,SAAS,SAAO,GAAG,KAAK;AAAA;AAAA;AAAA;AAAA;AAMrF,oBAAI,QAAQ,YAAY;AACpB,oBAAE,cAAc;AAChB,oBAAE,YAAY;AAAA,uBACX;AACH,oBAAE,cAAc;AAChB,oBAAE,2BAA2B;AAC7B,oBAAE,YAAY;AAAA;AAGlB,kBAAE;AACF,kBAAE,2BAA2B;AAAA;AAWjC,sBAAO,gBAAgB,SAAS,QAAQ,QAAQ,SAAS;AACrD,oBAAI,IAAI,SACJ,SAAS,OAAO,QAChB,UAAU,OAAO,SACjB,MACA,MACA,GACA;AAEJ,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,yBAAO,OAAO;AAEd,sBAAI,CAAC,KAAK,OAAO;AACb;AAGJ,uBAAK,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACpC,2BAAO,KAAK,MAAM;AAClB,sBAAE,IAAI,KAAK,SAAS,GAAG,KAAK,SAAS,GAAG,GAAG,GAAG,IAAI,KAAK,IAAI;AAC3D,sBAAE;AAAA;AAAA;AAIV,oBAAI,QAAQ,YAAY;AACpB,oBAAE,YAAY;AAAA,uBACX;AACH,oBAAE,YAAY;AAAA;AAElB,kBAAE;AAEF,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,yBAAO,OAAO;AACd,sBAAI,KAAK,OAAO,SAAS;AACrB,sBAAE,IAAI,KAAK,aAAa,GAAG,KAAK,aAAa,GAAG,GAAG,GAAG,IAAI,KAAK,IAAI;AACnE,sBAAE;AAAA;AAAA;AAIV,kBAAE,YAAY;AACd,kBAAE;AAAA;AAWN,sBAAO,eAAe,SAAS,QAAQ,QAAQ,SAAS;AACpD,oBAAI,IAAI;AAER,kBAAE;AAEF,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO;AAElB,sBAAI,CAAC,KAAK,OAAO;AACb;AAEJ,oBAAE,OAAO,KAAK,SAAS,GAAG,KAAK,SAAS;AACxC,oBAAE,OAAO,KAAK,SAAS,IAAK,MAAK,SAAS,IAAI,KAAK,aAAa,KAAK,GAAG,KAAK,SAAS,IAAK,MAAK,SAAS,IAAI,KAAK,aAAa,KAAK;AAAA;AAGxI,kBAAE,YAAY;AACd,kBAAE,cAAc;AAChB,kBAAE;AAAA;AAWN,sBAAO,UAAU,SAAS,QAAQ,QAAQ,SAAS;AAC/C,oBAAI,IAAI,SACJ,GACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,sBAAI,CAAC,OAAO,GAAG,OAAO;AAClB;AAEJ,sBAAI,QAAQ,OAAO,GAAG;AACtB,uBAAK,IAAI,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtD,wBAAI,OAAO,MAAM;AACjB,sBAAE,OAAO;AACT,sBAAE,YAAY;AACd,sBAAE,SAAS,KAAK,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,IAAI;AAAA;AAAA;AAAA;AAaxE,sBAAO,aAAa,SAAS,QAAQ,OAAO,SAAS;AACjD,oBAAI,IAAI,SACJ,UAAU,OAAO,SACjB,MACA,WACA,WACA,OACA,OACA,GACA;AAEJ,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,yBAAO,MAAM;AAEb,sBAAI,CAAC,KAAK;AACN;AAEJ,8BAAY,KAAK;AACjB,uBAAK,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AAC7C,wBAAI,UAAU,KAAK,eAAe,IAC9B,SAAS,QAAQ;AACrB,sBAAE,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK;AAAA;AAAA;AAIpD,oBAAI,QAAQ,YAAY;AACpB,oBAAE,YAAY;AAAA,uBACX;AACH,oBAAE,YAAY;AAAA;AAElB,kBAAE;AAEF,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,yBAAO,MAAM;AAEb,sBAAI,CAAC,KAAK;AACN;AAEJ,8BAAY,KAAK;AAEjB,sBAAI,KAAK,eAAe,SAAS,GAAG;AAChC,wBAAI,aAAa,KAAK,eAAe,GAAG,OAAO,GAC3C,aAAa,KAAK,eAAe,GAAG,OAAO;AAE/C,wBAAI,KAAK,eAAe,WAAW,GAAG;AAClC,mCAAc,MAAK,eAAe,GAAG,OAAO,IAAI,KAAK,eAAe,GAAG,OAAO,KAAK;AACnF,mCAAc,MAAK,eAAe,GAAG,OAAO,IAAI,KAAK,eAAe,GAAG,OAAO,KAAK;AAAA;AAGvF,wBAAI,UAAU,UAAU,UAAU,SAAS,GAAG,QAAQ,UAAU,MAAM,aAAa,MAAM;AACrF,wBAAE,OAAO,aAAa,UAAU,OAAO,IAAI,GAAG,aAAa,UAAU,OAAO,IAAI;AAAA,2BAC7E;AACH,wBAAE,OAAO,aAAa,UAAU,OAAO,IAAI,GAAG,aAAa,UAAU,OAAO,IAAI;AAAA;AAGpF,sBAAE,OAAO,YAAY;AAAA;AAAA;AAI7B,oBAAI,QAAQ,YAAY;AACpB,oBAAE,cAAc;AAAA,uBACb;AACH,oBAAE,cAAc;AAAA;AAGpB,kBAAE,YAAY;AACd,kBAAE;AAAA;AAWN,sBAAO,cAAc,SAAS,QAAQ,OAAO,SAAS;AAClD,oBAAI,IAAI,SACJ,UAAU,OAAO,SACjB,MACA,WACA,WACA,OACA,OACA,GACA;AAEJ,kBAAE;AAGF,qBAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,yBAAO,MAAM;AAEb,sBAAI,CAAC,KAAK;AACN;AAEJ,8BAAY,KAAK;AACjB,0BAAQ,UAAU;AAClB,0BAAQ,UAAU;AAElB,sBAAI,IAAI;AAER,sBAAI,CAAC,MAAM,YAAY,CAAC,MAAM;AAAU,wBAAI;AAC5C,sBAAI,MAAM;AAAU,wBAAI;AAExB,oBAAE,OAAO,MAAM,SAAS,GAAG,MAAM,SAAS;AAC1C,oBAAE,OAAO,MAAM,SAAS,IAAI,UAAU,YAAY,IAAI,GAAG,MAAM,SAAS,IAAI,UAAU,YAAY,IAAI;AAEtG,sBAAI;AAEJ,sBAAI,CAAC,MAAM,YAAY,CAAC,MAAM;AAAU,wBAAI;AAC5C,sBAAI,MAAM;AAAU,wBAAI;AAExB,oBAAE,OAAO,MAAM,SAAS,GAAG,MAAM,SAAS;AAC1C,oBAAE,OAAO,MAAM,SAAS,IAAI,UAAU,YAAY,IAAI,GAAG,MAAM,SAAS,IAAI,UAAU,YAAY,IAAI;AAAA;AAG1G,oBAAI,QAAQ,YAAY;AACpB,oBAAE,cAAc;AAAA,uBACb;AACH,oBAAE,cAAc;AAAA;AAEpB,kBAAE;AAAA;AAUN,sBAAO,YAAY,SAAS,WAAW,SAAS;AAC5C,oBAAI,SAAS,UAAU,QACnB,WAAW,UAAU,UACrB,SAAS,UAAU,QACnB,UAAU,OAAO,SACjB;AAEJ,oBAAI,QAAQ,WAAW;AACnB,sBAAI,cAAc,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,GACtD,eAAe,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,GACvD,eAAe,cAAc,OAAO,QAAQ,OAC5C,eAAe,eAAe,OAAO,QAAQ;AAEjD,0BAAQ,MAAM,IAAI,cAAc,IAAI;AACpC,0BAAQ,UAAU,CAAC,OAAO,OAAO,IAAI,GAAG,CAAC,OAAO,OAAO,IAAI;AAAA;AAG/D,yBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,sBAAI,OAAO,SAAS,GAAG;AAEvB,0BAAQ,UAAU,KAAK;AACvB,0BAAQ,YAAY;AACpB,0BAAQ,cAAc;AACtB,0BAAQ,YAAY,CAAC,GAAE;AAEvB,0BAAQ,KAAK;AAAA,yBAER;AAGD,+BAAS,KAAK;AACd,8BAAQ;AACR,8BAAQ,KAAK,KAAK,MAAM,OAAO,IAAI,IAAI,IAAI,KAAK,MAAM,OAAO,IAAI,IAAI,IACjE,KAAK,MAAM,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,KAAK,MAAM,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI;AAC1F,8BAAQ;AACR,8BAAQ;AAER;AAAA,yBAEC;AAGD,0BAAI,QAAQ,KAAK;AACjB,0BAAI,KAAK;AACL,gCAAQ,KAAK;AACjB,8BAAQ;AACR,8BAAQ,IAAI,MAAM,GAAG,MAAM,GAAG,IAAI,GAAG,IAAI,KAAK;AAC9C,8BAAQ;AACR,8BAAQ;AAER;AAAA;AAIJ,0BAAQ,YAAY;AACpB,0BAAQ,UAAU,MAAM;AAAA;AAI5B,oBAAI,UAAU,gBAAgB,MAAM;AAChC,0BAAQ,UAAU,KAAK;AACvB,0BAAQ,YAAY;AACpB,0BAAQ,cAAc;AACtB,0BAAQ,YAAY;AACpB,2BAAS,UAAU;AACnB,0BAAQ;AACR,0BAAQ,KAAK,KAAK,MAAM,OAAO,IAAI,IAAI,KAAK,MAAM,OAAO,IAAI,IACzD,KAAK,MAAM,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,KAAK,MAAM,OAAO,IAAI,IAAI,OAAO,IAAI;AAClF,0BAAQ;AACR,0BAAQ;AACR,0BAAQ;AACR,0BAAQ,UAAU,MAAM;AAAA;AAG5B,oBAAI,QAAQ;AACR,0BAAQ,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAU5C,kBAAI,gBAAgB,SAAS,QAAQ,MAAM;AACvC,oBAAI,SAAS,OAAO,QAChB,SAAS,OAAO,QAChB,cAAc,OAAO,aACrB,YAAY,OAAO,OAAO;AAE9B,uBAAO,QAAQ,OAAO,OAAO,YAAY,QAAO;AAChD,uBAAO,WAAW;AAElB,uBAAO,mBAAmB,YAAY,OAAO,iBAAiB;AAC9D,uBAAO,gBAAgB;AAEvB,uBAAO,aAAa,QAAQ,OAAO;AACnC,uBAAO,aAAa,SAAS,KAAK,IAAI,OAAO,aAAa,QAAQ;AAElE,uBAAO,mBAAmB,QAAQ,OAAO,OAAO;AAChD,uBAAO,mBAAmB,SAAS,KAAK,IAAI,OAAO,mBAAmB,QAAQ;AAE9E,uBAAO,wBAAwB,QAAQ,OAAO;AAC9C,uBAAO,wBAAwB,SAAS,KAAK,IAAI,OAAO,wBAAwB,QAAQ;AAExF,uBAAO,qBAAqB,QAAQ,OAAO,OAAO;AAClD,uBAAO,qBAAqB,SAAS,KAAK,IAAI,OAAO,qBAAqB,QAAQ;AAElF,uBAAO,eAAe,QAAQ,OAAO;AACrC,uBAAO,eAAe,SAAS,KAAK,IAAI,OAAO,eAAe,QAAQ;AAAA;AAU1E,kBAAI,QAAQ,SAAS,QAAQ;AACzB,oBAAI,SAAS;AACb,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACvC,4BAAU,OAAO;AAAA;AAErB,uBAAQ,SAAS,OAAO,UAAW;AAAA;AAUvC,kBAAI,gBAAgB,SAAS,OAAO,QAAQ;AACxC,oBAAI,SAAS,SAAS,cAAc;AACpC,uBAAO,QAAQ;AACf,uBAAO,SAAS;AAChB,uBAAO,gBAAgB,WAAW;AAAE,yBAAO;AAAA;AAC3C,uBAAO,gBAAgB,WAAW;AAAE,yBAAO;AAAA;AAC3C,uBAAO;AAAA;AAUX,kBAAI,iBAAiB,SAAS,QAAQ;AAClC,oBAAI,UAAU,OAAO,WAAW,OAC5B,mBAAmB,OAAO,oBAAoB,GAC9C,yBAAyB,QAAQ,gCAAgC,QAAQ,6BAC5C,QAAQ,4BAA4B,QAAQ,2BAC5C,QAAQ,0BAA0B;AAEnE,uBAAO,mBAAmB;AAAA;AAW9B,kBAAI,cAAc,SAAS,QAAQ,WAAW;AAC1C,oBAAI,QAAQ,OAAO,SAAS;AAE5B,oBAAI;AACA,yBAAO;AAEX,wBAAQ,OAAO,SAAS,aAAa,IAAI;AACzC,sBAAM,MAAM;AAEZ,uBAAO;AAAA;AAUX,kBAAI,mBAAmB,SAAS,QAAQ,YAAY;AAChD,oBAAI,gBAAgB;AAEpB,oBAAI,iBAAiB,KAAK;AACtB,kCAAgB,SAAS,aAAa;AAE1C,uBAAO,OAAO,MAAM,aAAa;AACjC,uBAAO,OAAO,MAAM,iBAAiB;AACrC,uBAAO,oBAAoB;AAAA;AAAA;AAAA;AAAA,UAyV5B,SAAS,SAAQ,UAAS;AAQjC,gBAAI,UAAU;AAEd,oBAAO,UAAU;AAEjB,YAAC,YAAW;AAQR,sBAAQ,SAAS,SAAS,QAAQ;AAC9B,uBAAO;AAAA,kBACH;AAAA,kBACA,eAAe;AAAA,kBACf,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,UASrB,SAAS,SAAQ,UAAS,qBAAqB;AAYtD,gBAAI,UAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,QAAQ,oBAAoB;AAChC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,aAAY,oBAAoB;AACpC,gBAAI,aAAa,oBAAoB;AACrC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,OAAO,oBAAoB;AAE/B,YAAC,YAAW;AAUR,sBAAO,SAAS,SAAS,SAAS;AAC9B,0BAAU,WAAW;AAErB,oBAAI,WAAW;AAAA,kBACX,oBAAoB;AAAA,kBACpB,oBAAoB;AAAA,kBACpB,sBAAsB;AAAA,kBACtB,gBAAgB;AAAA,kBAChB,QAAQ;AAAA,kBACR,QAAQ;AAAA,kBACR,SAAS;AAAA,oBACL,GAAG;AAAA,oBACH,GAAG;AAAA,oBACH,OAAO;AAAA;AAAA,kBAEX,QAAQ;AAAA,oBACJ,WAAW;AAAA,oBACX,WAAW;AAAA,oBACX,WAAW;AAAA,oBACX,aAAa;AAAA;AAAA;AAIrB,oBAAI,SAAS,OAAO,OAAO,UAAU;AAErC,uBAAO,QAAQ,QAAQ,SAAS,WAAU,OAAO,EAAE,OAAO;AAC1D,uBAAO,QAAQ,QAAQ,SAAS,MAAM;AACtC,uBAAO,WAAW,QAAQ,YAAY,SAAS;AAG/C,uBAAO,OAAO,EAAE,SAAS;AACzB,uBAAO,MAAM,UAAU,OAAO;AAC9B,uBAAO,aAAa,OAAO;AAC3B,uBAAO,UAAU;AAEjB,uBAAO;AAAA;AAkBX,sBAAO,SAAS,SAAS,QAAQ,OAAO,YAAY;AAChD,oBAAI,YAAY,OAAO;AAEvB,wBAAQ,SAAS,MAAO;AACxB,6BAAa,cAAc;AAE3B,oBAAI,QAAQ,OAAO,OACf,WAAW,OAAO,UAClB,QAAQ,OAAO,OACf,SAAS,OAAO,QAChB,YAAY,OAAO,WACnB;AAGJ,uBAAO,aAAa,QAAQ,OAAO;AACnC,uBAAO,YAAY,QAAQ,OAAO;AAGlC,oBAAI,QAAQ;AAAA,kBACR,WAAW,OAAO;AAAA;AAGtB,uBAAO,QAAQ,QAAQ,gBAAgB;AAGvC,oBAAI,YAAY,WAAU,UAAU,QAChC,iBAAiB,WAAU,eAAe;AAG9C,oBAAI,MAAM,YAAY;AAClB,2BAAS,UAAU,UAAU;AAAA;AAIjC,oBAAI,MAAM,YAAY;AAClB,6BAAU,YAAY,OAAO,OAAO,OAAO;AAAA;AAI/C,oBAAI,OAAO;AACP,2BAAS,OAAO,WAAW,OAAO;AAGtC,wBAAO,oBAAoB,WAAW,OAAO;AAG7C,wBAAO,cAAc,WAAW,OAAO,OAAO,WAAW,YAAY,MAAM;AAG3E,2BAAW,YAAY;AACvB,qBAAK,IAAI,GAAG,IAAI,OAAO,sBAAsB,KAAK;AAC9C,6BAAW,SAAS,gBAAgB,OAAO;AAAA;AAE/C,2BAAW,aAAa;AAGxB,yBAAS,QAAQ,OAAO;AACxB,oBAAI,aAAa,SAAS,WAAW;AAGrC,sBAAM,OAAO,OAAO,YAAY;AAGhC,oBAAI,OAAO;AACP,2BAAS,gBAAgB,MAAM,MAAM,OAAO;AAGhD,oBAAI,MAAM,eAAe,SAAS;AAC9B,yBAAO,QAAQ,QAAQ,kBAAkB,EAAE,OAAO,MAAM;AAG5D,yBAAS,iBAAiB,MAAM;AAChC,qBAAK,IAAI,GAAG,IAAI,OAAO,oBAAoB,KAAK;AAC5C,2BAAS,cAAc,MAAM,MAAM,OAAO;AAAA;AAE9C,yBAAS,kBAAkB;AAG3B,2BAAW,YAAY;AACvB,qBAAK,IAAI,GAAG,IAAI,OAAO,sBAAsB,KAAK;AAC9C,6BAAW,SAAS,gBAAgB,OAAO;AAAA;AAE/C,2BAAW,aAAa;AAGxB,yBAAS,iBAAiB,MAAM;AAChC,qBAAK,IAAI,GAAG,IAAI,OAAO,oBAAoB,KAAK;AAC5C,2BAAS,cAAc,MAAM,MAAM,OAAO;AAAA;AAI9C,oBAAI,MAAM,gBAAgB,SAAS;AAC/B,yBAAO,QAAQ,QAAQ,mBAAmB,EAAE,OAAO,MAAM;AAE7D,oBAAI,MAAM,aAAa,SAAS;AAC5B,yBAAO,QAAQ,QAAQ,gBAAgB,EAAE,OAAO,MAAM;AAG1D,wBAAO,mBAAmB;AAE1B,uBAAO,QAAQ,QAAQ,eAAe;AAGtC,uBAAO,OAAO,cAAc,OAAO,QAAQ;AAE3C,uBAAO;AAAA;AASX,sBAAO,QAAQ,SAAS,SAAS,SAAS;AACtC,uBAAO,OAAO,SAAS;AAEvB,oBAAI,QAAQ,OAAO;AACf,0BAAQ,QAAQ,QAAQ;AAExB,0BAAO,MAAM;AAEb,sBAAI,SAAS,WAAU,UAAU,QAAQ;AAEzC,2BAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,wBAAI,OAAO,OAAO;AAClB,6BAAS,IAAI,MAAM;AACnB,yBAAK,KAAK,OAAO;AAAA;AAAA;AAAA;AAU7B,sBAAO,QAAQ,SAAS,QAAQ;AAC5B,sBAAM,MAAM,OAAO;AACnB,yBAAS,MAAM,OAAO;AAAA;AAS1B,sBAAO,qBAAqB,SAAS,QAAQ;AACzC,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO;AAGlB,uBAAK,MAAM,IAAI;AACf,uBAAK,MAAM,IAAI;AACf,uBAAK,SAAS;AAAA;AAAA;AAWtB,sBAAO,sBAAsB,SAAS,QAAQ,SAAS;AACnD,oBAAI,eAAe,OAAO,QAAQ,UAAU,cAAc,QAAQ,QAAQ;AAE1E,oBAAK,QAAQ,MAAM,KAAK,QAAQ,MAAM,KAAM,iBAAiB,GAAG;AAC5D;AAAA;AAGJ,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO;AAElB,sBAAI,KAAK,YAAY,KAAK;AACtB;AAGJ,uBAAK,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI;AACxC,uBAAK,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI;AAAA;AAAA;AAgBhD,sBAAO,gBAAgB,SAAS,QAAQ,WAAW,WAAW,YAAY,aAAa;AACnF,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO;AAElB,sBAAI,KAAK,YAAY,KAAK;AACtB;AAEJ,uBAAK,OAAO,MAAM,WAAW,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,UAsO7C,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,WAAW;AAEf,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAER,uBAAS,iBAAiB;AAC1B,uBAAS,wBAAwB;AACjC,uBAAS,kBAAkB;AAC3B,uBAAS,mBAAmB;AAC5B,uBAAS,4BAA4B;AAOrC,uBAAS,mBAAmB,SAAS,OAAO;AACxC,oBAAI,GACA,MACA,aACA,cAAc,MAAM;AAGxB,qBAAK,IAAI,GAAG,IAAI,aAAa,KAAK;AAC9B,yBAAO,MAAM;AAEb,sBAAI,CAAC,KAAK;AACN;AAEJ,gCAAc,KAAK,eAAe;AAClC,uBAAK,UAAU,QAAQ,iBAAiB;AACxC,uBAAK,UAAU,QAAQ,iBAAiB;AAAA;AAAA;AAUhD,uBAAS,gBAAgB,SAAS,OAAO,WAAW;AAChD,oBAAI,GACA,MACA,WACA,OACA,OACA,QACA,cACA,iBACA,iBAAiB,SAAS,iBAC1B,cAAc,MAAM;AAGxB,qBAAK,IAAI,GAAG,IAAI,aAAa,KAAK;AAC9B,yBAAO,MAAM;AAEb,sBAAI,CAAC,KAAK,YAAY,KAAK;AACvB;AAEJ,8BAAY,KAAK;AACjB,0BAAQ,UAAU;AAClB,0BAAQ,UAAU;AAClB,2BAAS,UAAU;AAGnB,uBAAK,aACD,OAAO,IAAK,OAAM,gBAAgB,IAAI,UAAU,YAAY,IAAI,MAAM,gBAAgB,KACpF,OAAO,IAAK,OAAM,gBAAgB,IAAI,UAAU,YAAY,IAAI,MAAM,gBAAgB;AAAA;AAGhG,qBAAK,IAAI,GAAG,IAAI,aAAa,KAAK;AAC9B,yBAAO,MAAM;AAEb,sBAAI,CAAC,KAAK,YAAY,KAAK;AACvB;AAEJ,8BAAY,KAAK;AACjB,0BAAQ,UAAU;AAClB,0BAAQ,UAAU;AAClB,2BAAS,UAAU;AACnB,oCAAmB,MAAK,aAAa,KAAK,QAAQ;AAElD,sBAAI,MAAM,YAAY,MAAM;AACxB,uCAAmB;AAEvB,sBAAI,CAAE,OAAM,YAAY,MAAM,aAAa;AACvC,mCAAe,iBAAiB,MAAM;AACtC,0BAAM,gBAAgB,KAAK,OAAO,IAAI,kBAAkB;AACxD,0BAAM,gBAAgB,KAAK,OAAO,IAAI,kBAAkB;AAAA;AAG5D,sBAAI,CAAE,OAAM,YAAY,MAAM,aAAa;AACvC,mCAAe,iBAAiB,MAAM;AACtC,0BAAM,gBAAgB,KAAK,OAAO,IAAI,kBAAkB;AACxD,0BAAM,gBAAgB,KAAK,OAAO,IAAI,kBAAkB;AAAA;AAAA;AAAA;AAUpE,uBAAS,oBAAoB,SAAS,QAAQ;AAC1C,oBAAI,kBAAkB,SAAS,kBAC3B,eAAe,OAAO,QACtB,oBAAoB,SAAS,WAC7B,eAAe,OAAO;AAE1B,yBAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,sBAAI,OAAO,OAAO,IACd,kBAAkB,KAAK,iBACvB,mBAAmB,gBAAgB,GACnC,mBAAmB,gBAAgB,GACnC,WAAW,KAAK;AAGpB,uBAAK,gBAAgB;AAErB,sBAAI,qBAAqB,KAAK,qBAAqB,GAAG;AAElD,6BAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,0BAAI,OAAO,KAAK,MAAM;AACtB,wCAAkB,KAAK,UAAU;AACjC,mCAAa,KAAK,QAAQ,KAAK,UAAU;AACzC,2BAAK,SAAS,KAAK;AACnB,2BAAK,SAAS,KAAK;AAAA;AAIvB,yBAAK,aAAa,KAAK;AACvB,yBAAK,aAAa,KAAK;AAEvB,wBAAI,mBAAmB,SAAS,IAAI,mBAAmB,SAAS,IAAI,GAAG;AAEnE,sCAAgB,IAAI;AACpB,sCAAgB,IAAI;AAAA,2BACjB;AAEH,sCAAgB,KAAK;AACrB,sCAAgB,KAAK;AAAA;AAAA;AAAA;AAAA;AAWrC,uBAAS,mBAAmB,SAAS,OAAO;AACxC,oBAAI,cAAc,MAAM,QACpB,GACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,aAAa,KAAK;AAC9B,sBAAI,OAAO,MAAM;AAEjB,sBAAI,CAAC,KAAK,YAAY,KAAK;AACvB;AAEJ,sBAAI,WAAW,KAAK,gBAChB,iBAAiB,SAAS,QAC1B,YAAY,KAAK,WACjB,QAAQ,UAAU,SAClB,QAAQ,UAAU,SAClB,SAAS,UAAU,QACnB,UAAU,UAAU;AAGxB,uBAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACjC,wBAAI,UAAU,SAAS,IACnB,gBAAgB,QAAQ,QACxB,gBAAgB,QAAQ,eACxB,iBAAiB,QAAQ;AAE7B,wBAAI,kBAAkB,KAAK,mBAAmB,GAAG;AAE7C,0BAAI,WAAW,OAAO,IAAI,gBAAgB,QAAQ,IAAI,gBAClD,WAAW,OAAO,IAAI,gBAAgB,QAAQ,IAAI;AAGtD,0BAAI,CAAE,OAAM,YAAY,MAAM,aAAa;AACvC,8BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,8BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,8BAAM,aAAa,MAAM,iBACpB,gBAAc,IAAI,MAAM,SAAS,KAAK,WACpC,eAAc,IAAI,MAAM,SAAS,KAAK;AAAA;AAIjD,0BAAI,CAAE,OAAM,YAAY,MAAM,aAAa;AACvC,8BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,8BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,8BAAM,aAAa,MAAM,iBACpB,gBAAc,IAAI,MAAM,SAAS,KAAK,WACpC,eAAc,IAAI,MAAM,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAcjE,uBAAS,gBAAgB,SAAS,OAAO,WAAW;AAChD,oBAAI,mBAAmB,YAAY,WAC/B,gBAAgB,SAAS,iBAAiB,kBAC1C,2BAA2B,SAAS,2BACpC,uBAAuB,SAAS,wBAAwB,kBACxD,iBAAiB,OAAO,WACxB,cAAc,MAAM,QACpB,gBACA,aACA,GACA;AAEJ,qBAAK,IAAI,GAAG,IAAI,aAAa,KAAK;AAC9B,sBAAI,OAAO,MAAM;AAEjB,sBAAI,CAAC,KAAK,YAAY,KAAK;AACvB;AAEJ,sBAAI,YAAY,KAAK,WACjB,QAAQ,UAAU,SAClB,QAAQ,UAAU,SAClB,gBAAgB,MAAM,UACtB,gBAAgB,MAAM,UACtB,UAAU,UAAU,OAAO,GAC3B,UAAU,UAAU,OAAO,GAC3B,WAAW,UAAU,QAAQ,GAC7B,WAAW,UAAU,QAAQ,GAC7B,WAAW,KAAK,gBAChB,iBAAiB,SAAS,QAC1B,eAAe,IAAI,gBACnB,mBAAmB,MAAM,cAAc,MAAM,aAC7C,WAAW,KAAK,WAAW,KAAK,iBAAiB,2BAA2B;AAGhF,gCAAc,IAAI,MAAM,SAAS,IAAI,MAAM,aAAa;AACxD,gCAAc,IAAI,MAAM,SAAS,IAAI,MAAM,aAAa;AACxD,gCAAc,IAAI,MAAM,SAAS,IAAI,MAAM,aAAa;AACxD,gCAAc,IAAI,MAAM,SAAS,IAAI,MAAM,aAAa;AACxD,wBAAM,kBAAkB,MAAM,QAAQ,MAAM;AAC5C,wBAAM,kBAAkB,MAAM,QAAQ,MAAM;AAG5C,uBAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACjC,wBAAI,UAAU,SAAS,IACnB,gBAAgB,QAAQ;AAE5B,wBAAI,WAAW,cAAc,IAAI,MAAM,SAAS,GAC5C,WAAW,cAAc,IAAI,MAAM,SAAS,GAC5C,WAAW,cAAc,IAAI,MAAM,SAAS,GAC5C,WAAW,cAAc,IAAI,MAAM,SAAS;AAEhD,wBAAI,kBAAkB,cAAc,IAAI,WAAW,MAAM,iBACrD,kBAAkB,cAAc,IAAI,WAAW,MAAM,iBACrD,kBAAkB,cAAc,IAAI,WAAW,MAAM,iBACrD,kBAAkB,cAAc,IAAI,WAAW,MAAM;AAEzD,wBAAI,oBAAoB,kBAAkB,iBACtC,oBAAoB,kBAAkB;AAE1C,wBAAI,iBAAiB,UAAU,oBAAoB,UAAU,mBACzD,kBAAkB,WAAW,oBAAoB,WAAW;AAGhE,wBAAI,gBAAgB,KAAK,aAAa;AACtC,wBAAI,cAAc,KAAK,IAAI,eAAe;AAC1C,kCAAc,gBAAgB,IAAI,IAAI;AAEtC,wBAAI,gBAAgB,cAAc;AAElC,wBAAI,kBAAkB,iBAAiB,CAAC,kBAAkB,eAAe;AACrE,oCAAc,kBAAkB,IAAI,kBAAkB,CAAC;AACvD,uCAAiB,KAAK,WAAY,mBAAkB,IAAI,IAAI,MAAM;AAElE,0BAAI,iBAAiB,CAAC,aAAa;AAC/B,yCAAiB,CAAC;AAAA,iCACX,iBAAiB,aAAa;AACrC,yCAAiB;AAAA;AAAA,2BAElB;AACH,uCAAiB;AACjB,oCAAc;AAAA;AAIlB,wBAAI,OAAO,WAAW,UAAU,WAAW,SACvC,OAAO,WAAW,UAAU,WAAW,SACvC,QAAQ,eAAgB,oBAAmB,MAAM,iBAAiB,OAAO,OAAO,MAAM,iBAAiB,OAAO;AAGlH,wBAAI,gBAAiB,KAAI,KAAK,eAAe,iBAAiB;AAC9D,sCAAkB;AAGlB,wBAAI,iBAAiB,iBAAiB,iBAAiB,iBAAiB,GAAG;AAEvE,8BAAQ,gBAAgB;AAAA,2BACrB;AAGH,0BAAI,uBAAuB,QAAQ;AACnC,8BAAQ,iBAAiB;AACzB,8BAAQ,gBAAgB,KAAK,IAAI,QAAQ,eAAe;AACxD,sCAAgB,QAAQ,gBAAgB;AAAA;AAI5C,wBAAI,kBAAkB,kBAAkB,sBAAsB;AAE1D,8BAAQ,iBAAiB;AAAA,2BACtB;AAGH,0BAAI,wBAAwB,QAAQ;AACpC,8BAAQ,kBAAkB;AAC1B,0BAAI,QAAQ,iBAAiB,CAAC;AAAa,gCAAQ,iBAAiB,CAAC;AACrE,0BAAI,QAAQ,iBAAiB;AAAa,gCAAQ,iBAAiB;AACnE,uCAAiB,QAAQ,iBAAiB;AAAA;AAI9C,wBAAI,WAAW,UAAU,gBAAgB,WAAW,gBAChD,WAAW,UAAU,gBAAgB,WAAW;AAGpD,wBAAI,CAAE,OAAM,YAAY,MAAM,aAAa;AACvC,4BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,4BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,4BAAM,aAAc,YAAW,WAAW,WAAW,YAAY,MAAM;AAAA;AAG3E,wBAAI,CAAE,OAAM,YAAY,MAAM,aAAa;AACvC,4BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,4BAAM,aAAa,KAAK,WAAW,MAAM;AACzC,4BAAM,aAAc,YAAW,WAAW,WAAW,YAAY,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWpF,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,QAAQ;AAEZ,oBAAO,UAAU;AAEjB,gBAAI,OAAO,oBAAoB;AAC/B,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAQR,oBAAM,SAAS,SAAS,SAAS;AAC7B,uBAAO,OAAO,OAAO;AAAA,kBACjB,OAAO;AAAA,kBACP,MAAM;AAAA,kBACN,gBAAgB;AAAA,kBAChB,iBAAiB;AAAA,kBACjB,cAAc;AAAA,mBACf;AAAA;AAUP,oBAAM,SAAS,SAAS,OAAO,YAAY,WAAW;AAClD,oBAAI,YAAY,MAAM,MAClB,kBAAkB,UAAU,QAC5B,aAAa,MAAM,OACnB,mBAAmB,WAAW,QAC9B,iBAAiB,MAAM,gBACvB,eAAe,MAAM,cACrB,kBAAkB,MAAM,iBACxB,WACA,WACA,MACA;AAGJ,+BAAe,SAAS;AACxB,6BAAa,SAAS;AACtB,gCAAgB,SAAS;AAEzB,qBAAK,IAAI,GAAG,IAAI,iBAAiB,KAAK;AAClC,4BAAU,GAAG,kBAAkB;AAAA;AAGnC,qBAAK,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACnC,8BAAY,WAAW;AACvB,yBAAO,UAAU;AAEjB,sBAAI,MAAM;AAEN,wBAAI,KAAK,UAAU;AAEf,sCAAgB,KAAK;AAAA,2BAClB;AAEH,qCAAe,KAAK;AAAA;AAIxB,yBAAK,OAAO,MAAM,WAAW;AAC7B,yBAAK,kBAAkB;AAAA,yBACpB;AAEH,2BAAO,KAAK,OAAO,WAAW;AAC9B,+BAAW,KAAK,MAAM;AAGtB,mCAAe,KAAK;AACpB,8BAAU,KAAK;AAAA;AAAA;AAKvB,oBAAI,kBAAkB;AACtB,kCAAkB,UAAU;AAE5B,qBAAK,IAAI,GAAG,IAAI,iBAAiB,KAAK;AAClC,yBAAO,UAAU;AAEjB,sBAAI,CAAC,KAAK,iBAAiB;AACvB,yBAAK,UAAU,MAAM,OAAO;AAC5B,iCAAa,KAAK;AAElB,wBAAI,CAAC,KAAK,UAAU,MAAM,cAAc,CAAC,KAAK,UAAU,MAAM,YAAY;AACtE,sCAAgB,KAAK;AAAA;AAAA;AAAA;AAMjC,qBAAK,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AACzC,8BAAY,gBAAgB,KAAK;AACjC,yBAAO,UAAU;AACjB,4BAAU,OAAO,WAAW;AAC5B,yBAAO,WAAW,KAAK;AAAA;AAAA;AAU/B,oBAAM,QAAQ,SAAS,OAAO;AAC1B,sBAAM,QAAQ;AACd,sBAAM,KAAK,SAAS;AACpB,sBAAM,eAAe,SAAS;AAC9B,sBAAM,gBAAgB,SAAS;AAC/B,sBAAM,aAAa,SAAS;AAC5B,uBAAO;AAAA;AAAA;AAAA;AAAA,UAQR,SAAS,SAAQ,UAAS,qBAAqB;AAEtD,gBAAI,SAAS,QAAO,UAAU,oBAAoB;AAElD,mBAAO,OAAO,oBAAoB;AAClC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,OAAO,oBAAoB;AAClC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,YAAY,oBAAoB;AACvC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,YAAY,oBAAoB;AACvC,mBAAO,aAAa,oBAAoB;AACxC,mBAAO,aAAa,oBAAoB;AACxC,mBAAO,UAAU,oBAAoB;AACrC,mBAAO,WAAW,oBAAoB;AACtC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,OAAO,oBAAoB;AAClC,mBAAO,QAAQ,oBAAoB;AACnC,mBAAO,kBAAkB,oBAAoB;AAC7C,mBAAO,OAAO,oBAAoB;AAClC,mBAAO,QAAQ,oBAAoB;AACnC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,QAAQ,oBAAoB;AACnC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,WAAW,oBAAoB;AACtC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,MAAM,oBAAoB;AACjC,mBAAO,WAAW,oBAAoB;AACtC,mBAAO,MAAM,oBAAoB;AACjC,mBAAO,SAAS,oBAAoB;AACpC,mBAAO,WAAW,oBAAoB;AACtC,mBAAO,QAAQ,oBAAoB;AAGnC,mBAAO,OAAO,MAAM,OAAO,OAAO;AAClC,mBAAO,OAAO,WAAW,OAAO,QAAQ,OAAO;AAAA;AAAA,UAKxC,SAAS,SAAQ,UAAS,qBAAqB;AAQtD,gBAAI,SAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAQR,qBAAO,OAAO;AAQd,qBAAO,UAAW,OAAO,WAAW;AAQpC,qBAAO,OAAO;AAQd,qBAAO,OAAO;AAUd,qBAAO,MAAM,WAAW;AACpB,uBAAO,IAAI,QAAQ,MAAM,UAAU,MAAM,KAAK;AAAA;AAWlD,qBAAO,SAAS,SAAS,MAAM,MAAM;AACjC,uBAAO,KAAK,QAAQ,YAAY;AAChC,uBAAO,OAAO,gBAAgB,QAAQ,MAAM;AAAA;AAWhD,qBAAO,QAAQ,SAAS,MAAM,MAAM;AAChC,uBAAO,KAAK,QAAQ,YAAY;AAChC,uBAAO,OAAO,eAAe,QAAQ,MAAM;AAAA;AAAA;AAAA;AAAA,UAQ5C,SAAS,SAAQ,UAAS,qBAAqB;AAWtD,gBAAI,aAAa;AAEjB,oBAAO,UAAU;AAEjB,gBAAI,aAAY,oBAAoB;AACpC,gBAAI,aAAa,oBAAoB;AACrC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,OAAO,oBAAoB;AAC/B,gBAAI,UAAS,oBAAoB;AACjC,gBAAI,aAAa,OAAO;AAExB,YAAC,YAAW;AAeR,yBAAW,QAAQ,SAAS,IAAI,IAAI,SAAS,MAAM,WAAW,QAAQ,UAAU;AAC5E,oBAAI,QAAQ,WAAU,OAAO,EAAE,OAAO,YAClC,IAAI,IACJ,IAAI,IACJ,UACA,IAAI;AAER,yBAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACjC,sBAAI,YAAY;AAEhB,2BAAS,SAAS,GAAG,SAAS,SAAS,UAAU;AAC7C,wBAAI,OAAO,SAAS,GAAG,GAAG,QAAQ,KAAK,UAAU;AAEjD,wBAAI,MAAM;AACN,0BAAI,aAAa,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI,GACjD,YAAY,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI;AAEpD,0BAAI,aAAa;AACb,oCAAY;AAEhB,2BAAK,UAAU,MAAM,EAAE,GAAG,YAAY,KAAK,GAAG,aAAa;AAE3D,0BAAI,KAAK,OAAO,IAAI,IAAI;AAExB,iCAAU,QAAQ,OAAO;AAEzB,iCAAW;AACX,2BAAK;AAAA,2BACF;AACH,2BAAK;AAAA;AAAA;AAIb,uBAAK,YAAY;AACjB,sBAAI;AAAA;AAGR,uBAAO;AAAA;AAcX,yBAAW,QAAQ,SAAS,WAAW,UAAU,UAAU,UAAU,UAAU,SAAS;AACpF,oBAAI,SAAS,UAAU;AAEvB,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,QAAQ,OAAO,IAAI,IACnB,QAAQ,OAAO,IACf,cAAc,MAAM,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI,GACpD,aAAa,MAAM,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI,GACnD,cAAc,MAAM,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI,GACpD,aAAa,MAAM,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI;AAEvD,sBAAI,WAAW;AAAA,oBACX;AAAA,oBACA,QAAQ,EAAE,GAAG,aAAa,UAAU,GAAG,cAAc;AAAA,oBACrD;AAAA,oBACA,QAAQ,EAAE,GAAG,aAAa,UAAU,GAAG,cAAc;AAAA;AAGzD,sBAAI,aAAa,OAAO,OAAO,UAAU;AAEzC,6BAAU,cAAc,WAAW,WAAW,OAAO;AAAA;AAGzD,0BAAU,SAAS;AAEnB,uBAAO;AAAA;AAaX,yBAAW,OAAO,SAAS,WAAW,SAAS,MAAM,YAAY,SAAS;AACtE,oBAAI,SAAS,UAAU,QACnB,KACA,KACA,OACA,OACA;AAEJ,qBAAK,MAAM,GAAG,MAAM,MAAM,OAAO;AAC7B,uBAAK,MAAM,GAAG,MAAM,SAAS,OAAO;AAChC,4BAAQ,OAAQ,MAAM,IAAM,MAAM;AAClC,4BAAQ,OAAO,MAAO,MAAM;AAC5B,+BAAU,cAAc,WAAW,WAAW,OAAO,OAAO,OAAO,EAAE,OAAc,SAAgB;AAAA;AAGvG,sBAAI,MAAM,GAAG;AACT,yBAAK,MAAM,GAAG,MAAM,SAAS,OAAO;AAChC,8BAAQ,OAAO,MAAQ,OAAM,KAAK;AAClC,8BAAQ,OAAO,MAAO,MAAM;AAC5B,iCAAU,cAAc,WAAW,WAAW,OAAO,OAAO,OAAO,EAAE,OAAc,SAAgB;AAEnG,0BAAI,cAAc,MAAM,GAAG;AACvB,gCAAQ,OAAQ,MAAM,IAAO,OAAM,KAAK;AACxC,mCAAU,cAAc,WAAW,WAAW,OAAO,OAAO,OAAO,EAAE,OAAO,OAAO,SAAgB;AAAA;AAGvG,0BAAI,cAAc,MAAM,UAAU,GAAG;AACjC,gCAAQ,OAAQ,MAAM,IAAO,OAAM,KAAK;AACxC,mCAAU,cAAc,WAAW,WAAW,OAAO,OAAO,OAAO,EAAE,OAAO,OAAO,SAAgB;AAAA;AAAA;AAAA;AAAA;AAMnH,0BAAU,SAAS;AAEnB,uBAAO;AAAA;AAgBX,yBAAW,UAAU,SAAS,IAAI,IAAI,SAAS,MAAM,WAAW,QAAQ,UAAU;AAC9E,uBAAO,WAAW,MAAM,IAAI,IAAI,SAAS,MAAM,WAAW,QAAQ,SAAS,GAAG,GAAG,QAAQ,KAAK,UAAU,GAAG;AACvG,sBAAI,aAAa,KAAK,IAAI,MAAM,KAAK,KAAK,UAAU,KAChD,gBAAgB,WAAW,SAAS,OAAO,IAAI,IAAI,SAAS,OAAO,IAAI,IAAI;AAE/E,sBAAI,MAAM;AACN;AAGJ,wBAAM,aAAa;AAEnB,sBAAI,QAAQ,KACR,MAAM,UAAU,IAAI;AAExB,sBAAI,SAAS,SAAS,SAAS;AAC3B;AAGJ,sBAAI,MAAM,GAAG;AACT,yBAAK,UAAU,UAAU,EAAE,GAAI,UAAU,WAAU,MAAM,IAAI,IAAI,OAAO,eAAe,GAAG;AAAA;AAG9F,sBAAI,UAAU,WAAW,SAAS,gBAAgB;AAElD,yBAAO,SAAS,KAAK,UAAU,SAAS,WAAW,GAAG,QAAQ,KAAK,UAAU;AAAA;AAAA;AAerF,yBAAW,gBAAgB,SAAS,IAAI,IAAI,QAAQ,MAAM,QAAQ;AAC9D,oBAAI,gBAAgB,WAAU,OAAO,EAAE,OAAO;AAE9C,yBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,sBAAI,aAAa,KACb,SAAS,QAAO,OAAO,KAAK,IAAK,QAAO,aAAa,KAAK,QAAQ,MAC9D,EAAE,SAAS,UAAU,aAAa,GAAG,UAAU,GAAG,aAAa,MAAQ,MAAM,MACjF,aAAa,WAAW,OAAO,EAAE,QAAQ,EAAE,GAAG,KAAK,IAAK,QAAO,aAAa,GAAG,MAAM,OAAO;AAEhG,6BAAU,QAAQ,eAAe;AACjC,6BAAU,cAAc,eAAe;AAAA;AAG3C,uBAAO;AAAA;AAGX,yBAAW,YAAY,iBAAiB;AAaxC,yBAAW,MAAM,SAAS,IAAI,IAAI,OAAO,QAAQ,WAAW;AACxD,oBAAI,QAAQ,KAAK,UAAU,OACvB,YAAY,IACZ,eAAe,CAAC,QAAQ,MAAM,WAC9B,eAAe,QAAQ,MAAM,WAC7B,eAAe;AAEnB,oBAAI,MAAM,WAAU,OAAO,EAAE,OAAO,UAChC,OAAO,QAAO,UAAU,IAAI,IAAI,OAAO,QAAQ;AAAA,kBAC3C,iBAAiB;AAAA,oBACb;AAAA;AAAA,kBAEJ,SAAS;AAAA,oBACL,QAAQ,SAAS;AAAA;AAAA,kBAErB,SAAS;AAAA;AAGjB,oBAAI,SAAS,QAAO,OAAO,KAAK,cAAc,KAAK,cAAc,WAAW;AAAA,kBACxE,iBAAiB;AAAA,oBACb;AAAA;AAAA,kBAEJ,UAAU;AAAA;AAGd,oBAAI,SAAS,QAAO,OAAO,KAAK,cAAc,KAAK,cAAc,WAAW;AAAA,kBACxE,iBAAiB;AAAA,oBACb;AAAA;AAAA,kBAEJ,UAAU;AAAA;AAGd,oBAAI,QAAQ,WAAW,OAAO;AAAA,kBAC1B,OAAO;AAAA,kBACP,QAAQ,EAAE,GAAG,cAAc,GAAG;AAAA,kBAC9B,OAAO;AAAA,kBACP,WAAW;AAAA,kBACX,QAAQ;AAAA;AAGZ,oBAAI,QAAQ,WAAW,OAAO;AAAA,kBAC1B,OAAO;AAAA,kBACP,QAAQ,EAAE,GAAG,cAAc,GAAG;AAAA,kBAC9B,OAAO;AAAA,kBACP,WAAW;AAAA,kBACX,QAAQ;AAAA;AAGZ,2BAAU,QAAQ,KAAK;AACvB,2BAAU,QAAQ,KAAK;AACvB,2BAAU,QAAQ,KAAK;AACvB,2BAAU,cAAc,KAAK;AAC7B,2BAAU,cAAc,KAAK;AAE7B,uBAAO;AAAA;AAGX,yBAAW,YAAY,OAAO;AAmB9B,yBAAW,WAAW,SAAS,IAAI,IAAI,SAAS,MAAM,WAAW,QAAQ,YAAY,gBAAgB,iBAAiB,mBAAmB;AACrI,kCAAkB,OAAO,OAAO,EAAE,SAAS,YAAY;AACvD,oCAAoB,OAAO,OAAO,EAAE,WAAW,KAAK,QAAQ,EAAE,MAAM,QAAQ,SAAS,WAAW;AAEhG,oBAAI,WAAW,WAAW,MAAM,IAAI,IAAI,SAAS,MAAM,WAAW,QAAQ,SAAS,GAAG,GAAG;AACrF,yBAAO,QAAO,OAAO,GAAG,GAAG,gBAAgB;AAAA;AAG/C,2BAAW,KAAK,UAAU,SAAS,MAAM,YAAY;AAErD,yBAAS,QAAQ;AAEjB,uBAAO;AAAA;AAGX,yBAAW,YAAY,YAAY;AAAA;AAAA;AAAA,UAMhC,SAAS,SAAQ,UAAS,qBAAqB;AActD,gBAAI,OAAO;AAEX,oBAAO,UAAU;AAEjB,gBAAI,OAAO,oBAAoB;AAC/B,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,aAAa,OAAO;AAExB,YAAC,YAAW;AASR,mBAAK,SAAS,SAAS,SAAS;AAC5B,oBAAI,WAAW;AAAA,kBACX,SAAS;AAAA,kBACT,OAAO;AAAA,kBACP,WAAW;AAAA,kBACX,aAAa;AAAA,kBACb,cAAc;AAAA;AAGlB,uBAAO,OAAO,OAAO,UAAU;AAAA;AA4BnC,mBAAK,SAAS,SAAS,MAAM,QAAQ,QAAQ,aAAa;AACtD,oBAAI,GAAG,KAAK,KACR,QAAQ,OAAO,OACf,UAAU,KAAK,SACf,QACA,UACA,cAAc;AAElB,qBAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,sBAAI,OAAO,OAAO;AAElB,sBAAI,KAAK,cAAc,CAAC;AACpB;AAGJ,sBAAI,MAAM,UAAW,MAAK,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI,KAAK,KAAK,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI,KAC7F,KAAK,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI,KAAK,KAAK,OAAO,IAAI,IAAI,MAAM,OAAO,IAAI;AAClF;AAEJ,sBAAI,YAAY,KAAK,WAAW,MAAM;AAGtC,sBAAI,CAAC,KAAK,UAAU,UAAU,OAAO,KAAK,OAAO,MAAM,aAAa;AAEhE,wBAAI,CAAC,KAAK,UAAU;AAChB,2BAAK,SAAS;AAElB,wBAAI,QAAQ,KAAK,aAAa,WAAW,KAAK;AAI9C,yBAAK,MAAM,MAAM,UAAU,OAAO,MAAM,QAAQ,OAAO;AACnD,2BAAK,MAAM,MAAM,UAAU,OAAO,MAAM,QAAQ,OAAO;AACnD,mCAAW,KAAK,aAAa,KAAK;AAClC,iCAAS,QAAQ;AAEjB,4BAAI,oBAAqB,OAAO,UAAU,YAAY,OAAO,UAAU,UAC5C,OAAO,UAAU,YAAY,OAAO,UAAU;AAEzE,4BAAI,oBAAqB,OAAO,KAAK,OAAO,YAAY,OAAO,KAAK,OAAO,UAChD,OAAO,KAAK,OAAO,YAAY,OAAO,KAAK,OAAO;AAG7E,4BAAI,CAAC,qBAAqB,mBAAmB;AACzC,8BAAI,mBAAmB;AACnB,gCAAI;AACA,mCAAK,kBAAkB,MAAM,QAAQ;AAAA;AAAA;AAKjD,4BAAI,KAAK,WAAW,aAAc,qBAAqB,CAAC,qBAAsB,aAAa;AACvF,8BAAI,CAAC;AACD,qCAAS,KAAK,cAAc,SAAS;AACzC,+BAAK,eAAe,MAAM,QAAQ;AAAA;AAAA;AAAA;AAM9C,yBAAK,SAAS;AAGd,kCAAc;AAAA;AAAA;AAKtB,oBAAI;AACA,uBAAK,YAAY,KAAK,uBAAuB;AAAA;AAGrD,yBAAW,MAAM,UAAU;AAQ3B,mBAAK,QAAQ,SAAS,MAAM;AACxB,qBAAK,UAAU;AACf,qBAAK,QAAQ;AACb,qBAAK,YAAY;AAAA;AAGrB,yBAAW,MAAM,SAAS;AAW1B,mBAAK,eAAe,SAAS,SAAS,SAAS;AAC3C,oBAAI,WAAW,KAAK,IAAI,QAAQ,UAAU,QAAQ,WAC9C,SAAS,KAAK,IAAI,QAAQ,QAAQ,QAAQ,SAC1C,WAAW,KAAK,IAAI,QAAQ,UAAU,QAAQ,WAC9C,SAAS,KAAK,IAAI,QAAQ,QAAQ,QAAQ;AAE9C,uBAAO,KAAK,cAAc,UAAU,QAAQ,UAAU;AAAA;AAY1D,mBAAK,aAAa,SAAS,MAAM,MAAM;AACnC,oBAAI,SAAS,KAAK,QACd,WAAW,KAAK,MAAM,OAAO,IAAI,IAAI,KAAK,cAC1C,SAAS,KAAK,MAAM,OAAO,IAAI,IAAI,KAAK,cACxC,WAAW,KAAK,MAAM,OAAO,IAAI,IAAI,KAAK,eAC1C,SAAS,KAAK,MAAM,OAAO,IAAI,IAAI,KAAK;AAE5C,uBAAO,KAAK,cAAc,UAAU,QAAQ,UAAU;AAAA;AAc1D,mBAAK,gBAAgB,SAAS,UAAU,QAAQ,UAAU,QAAQ;AAC9D,uBAAO;AAAA,kBACH,IAAI,WAAW,MAAM,SAAS,MAAM,WAAW,MAAM;AAAA,kBACrD;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA;AAAA;AAaR,mBAAK,eAAe,SAAS,QAAQ,KAAK;AACtC,uBAAO,MAAM,SAAS,MAAM;AAAA;AAYhC,mBAAK,gBAAgB,SAAS,SAAS,UAAU;AAC7C,oBAAI,SAAS,QAAQ,YAAY;AACjC,uBAAO;AAAA;AAYX,mBAAK,iBAAiB,SAAS,MAAM,QAAQ,MAAM;AAC/C,oBAAI,YAAY,KAAK,OACjB,SAAS,KAAK,IACd,eAAe,OAAO,QACtB;AAGJ,qBAAK,IAAI,GAAG,IAAI,cAAc,KAAK;AAC/B,sBAAI,QAAQ,OAAO;AAEnB,sBAAI,KAAK,OAAO,MAAM,MAAO,KAAK,YAAY,MAAM;AAChD;AAIJ,sBAAI,KAAK,OAAO,MAAM,QAClB,OAAO,UAAU;AAErB,sBAAI,MAAM;AACN,yBAAK,MAAM;AAAA,yBACR;AACH,8BAAU,MAAM,CAAC,MAAM,OAAO;AAAA;AAAA;AAKtC,uBAAO,KAAK;AAAA;AAYhB,mBAAK,oBAAoB,SAAS,MAAM,QAAQ,MAAM;AAClD,oBAAI,YAAY,KAAK,OACjB,SAAS,KAAK,IACd;AAGJ,uBAAO,OAAO,OAAO,QAAQ,QAAQ,OAAO;AAE5C,oBAAI,eAAe,OAAO;AAG1B,qBAAK,IAAI,GAAG,IAAI,cAAc,KAAK;AAG/B,sBAAI,OAAO,UAAU,OAAO,MAAM,OAAO;AAEzC,sBAAI;AACA,yBAAK,MAAM;AAAA;AAAA;AAYvB,mBAAK,yBAAyB,SAAS,MAAM;AACzC,oBAAI,MACA,YAAY,KAAK,OACjB,WAAW,OAAO,KAAK,YACvB,iBAAiB,SAAS,QAC1B,QAAQ,IACR;AAGJ,qBAAK,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACjC,yBAAO,UAAU,SAAS;AAI1B,sBAAI,KAAK,KAAK,GAAG;AACb,0BAAM,KAAK;AAAA,yBACR;AACH,2BAAO,UAAU,SAAS;AAAA;AAAA;AAIlC,uBAAO;AAAA;AAAA;AAAA;AAAA,UAQR,SAAS,SAAQ,UAAS,qBAAqB;AAWtD,gBAAI,kBAAkB;AAEtB,oBAAO,UAAU;AAEjB,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,QAAQ,oBAAoB;AAChC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,WAAW,oBAAoB;AACnC,gBAAI,aAAa,oBAAoB;AACrC,gBAAI,aAAY,oBAAoB;AACpC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAWR,8BAAgB,SAAS,SAAS,QAAQ,SAAS;AAC/C,oBAAI,QAAS,UAAS,OAAO,QAAQ,SAAU,WAAU,QAAQ,QAAQ;AAEzE,oBAAI,CAAC,OAAO;AACR,sBAAI,UAAU,OAAO,UAAU,OAAO,OAAO,QAAQ;AACjD,4BAAQ,MAAM,OAAO,OAAO,OAAO;AAAA,6BAC5B,WAAW,QAAQ,SAAS;AACnC,4BAAQ,MAAM,OAAO,QAAQ;AAAA,yBAC1B;AACH,4BAAQ,MAAM;AACd,2BAAO,KAAK;AAAA;AAAA;AAIpB,oBAAI,aAAa,WAAW,OAAO;AAAA,kBAC/B,OAAO;AAAA,kBACP,QAAQ,MAAM;AAAA,kBACd,QAAQ,EAAE,GAAG,GAAG,GAAG;AAAA,kBACnB,QAAQ;AAAA,kBACR,WAAW;AAAA,kBACX,kBAAkB;AAAA,kBAClB,QAAQ;AAAA,oBACJ,aAAa;AAAA,oBACb,WAAW;AAAA;AAAA;AAInB,oBAAI,WAAW;AAAA,kBACX,MAAM;AAAA,kBACN;AAAA,kBACA,SAAS;AAAA,kBACT,MAAM;AAAA,kBACN;AAAA,kBACA,iBAAiB;AAAA,oBACb,UAAU;AAAA,oBACV,MAAM;AAAA,oBACN,OAAO;AAAA;AAAA;AAIf,oBAAI,kBAAkB,OAAO,OAAO,UAAU;AAE9C,uBAAO,GAAG,QAAQ,gBAAgB,WAAW;AACzC,sBAAI,YAAY,WAAU,UAAU,OAAO;AAC3C,kCAAgB,OAAO,iBAAiB;AACxC,kCAAgB,eAAe;AAAA;AAGnC,uBAAO;AAAA;AAUX,8BAAgB,SAAS,SAAS,iBAAiB,QAAQ;AACvD,oBAAI,QAAQ,gBAAgB,OACxB,aAAa,gBAAgB,YAC7B,OAAO,gBAAgB;AAE3B,oBAAI,MAAM,WAAW,GAAG;AACpB,sBAAI,CAAC,WAAW,OAAO;AACnB,6BAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,6BAAO,OAAO;AACd,0BAAI,OAAO,SAAS,KAAK,QAAQ,MAAM,aAC5B,SAAS,WAAW,KAAK,iBAAiB,gBAAgB,kBAAkB;AACnF,iCAAS,IAAI,KAAK,MAAM,SAAS,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACpE,8BAAI,OAAO,KAAK,MAAM;AACtB,8BAAI,SAAS,SAAS,KAAK,UAAU,MAAM,WAAW;AAClD,uCAAW,SAAS,MAAM;AAC1B,uCAAW,QAAQ,gBAAgB,OAAO;AAC1C,uCAAW,SAAS,EAAE,GAAG,MAAM,SAAS,IAAI,KAAK,SAAS,GAAG,GAAG,MAAM,SAAS,IAAI,KAAK,SAAS;AACjG,uCAAW,SAAS,KAAK;AAEzB,qCAAS,IAAI,MAAM;AACnB,mCAAO,QAAQ,iBAAiB,aAAa,EAAE,OAAc;AAE7D;AAAA;AAAA;AAAA;AAAA;AAAA,yBAKb;AACH,6BAAS,IAAI,WAAW,OAAO;AAC/B,+BAAW,SAAS,MAAM;AAAA;AAAA,uBAE3B;AACH,6BAAW,QAAQ,gBAAgB,OAAO;AAC1C,6BAAW,SAAS;AAEpB,sBAAI;AACA,2BAAO,QAAQ,iBAAiB,WAAW,EAAE,OAAc;AAAA;AAAA;AAUvE,8BAAgB,iBAAiB,SAAS,iBAAiB;AACvD,oBAAI,QAAQ,gBAAgB,OACxB,cAAc,MAAM;AAExB,oBAAI,YAAY;AACZ,yBAAO,QAAQ,iBAAiB,aAAa,EAAE;AAEnD,oBAAI,YAAY;AACZ,yBAAO,QAAQ,iBAAiB,aAAa,EAAE;AAEnD,oBAAI,YAAY;AACZ,yBAAO,QAAQ,iBAAiB,WAAW,EAAE;AAGjD,sBAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA,UAiHzB,SAAS,SAAQ,UAAS,qBAAqB;AAUtD,gBAAI,QAAQ;AAEZ,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,YAAY,oBAAoB;AACpC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,UAAS,oBAAoB;AACjC,gBAAI,WAAW,oBAAoB;AAEnC,YAAC,YAAW;AASR,oBAAM,WAAW,SAAS,MAAM,QAAQ;AACpC,oBAAI,aAAa,IACb,eAAe,OAAO,QACtB,SAAS,KAAK,QACd,WAAW,UAAU,UACrB,WAAW,OAAO;AAEtB,yBAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,sBAAI,QAAQ,OAAO,IACf,eAAe,MAAM,MAAM,QAC3B,cAAc,iBAAiB,IAAI,IAAI;AAE3C,sBAAI,SAAS,MAAM,QAAQ,SAAS;AAChC,6BAAS,IAAI,aAAa,IAAI,cAAc,KAAK;AAC7C,0BAAI,OAAO,MAAM,MAAM;AAEvB,0BAAI,SAAS,KAAK,QAAQ,SAAS;AAC/B,4BAAI,YAAY,SAAS,MAAM;AAE/B,4BAAI,WAAW;AACX,qCAAW,KAAK;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpB,uBAAO;AAAA;AAYX,oBAAM,MAAM,SAAS,QAAQ,YAAY,UAAU,UAAU;AACzD,2BAAW,YAAY;AAEvB,oBAAI,WAAW,OAAO,MAAM,YAAY,WACpC,YAAY,OAAO,UAAU,OAAO,IAAI,YAAY,YACpD,OAAQ,UAAS,IAAI,WAAW,KAAK,KACrC,OAAQ,UAAS,IAAI,WAAW,KAAK,KACrC,MAAM,QAAO,UAAU,MAAM,MAAM,WAAW,UAAU,EAAE,OAAO,aACjE,aAAa,MAAM,SAAS,KAAK;AAErC,yBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAAG;AAC3C,sBAAI,YAAY,WAAW;AAC3B,4BAAU,OAAO,UAAU,QAAQ,UAAU;AAAA;AAGjD,uBAAO;AAAA;AAWX,oBAAM,SAAS,SAAS,QAAQ,QAAQ,SAAS;AAC7C,oBAAI,SAAS;AAEb,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO,IACd,WAAW,OAAO,SAAS,KAAK,QAAQ;AAC5C,sBAAK,YAAY,CAAC,WAAa,CAAC,YAAY;AACxC,2BAAO,KAAK;AAAA;AAGpB,uBAAO;AAAA;AAUX,oBAAM,QAAQ,SAAS,QAAQ,OAAO;AAClC,oBAAI,SAAS;AAEb,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,sBAAI,OAAO,OAAO;AAElB,sBAAI,OAAO,SAAS,KAAK,QAAQ,QAAQ;AACrC,6BAAS,IAAI,KAAK,MAAM,WAAW,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACtE,0BAAI,OAAO,KAAK,MAAM;AAEtB,0BAAI,OAAO,SAAS,KAAK,QAAQ,UAC1B,SAAS,SAAS,KAAK,UAAU,QAAQ;AAC5C,+BAAO,KAAK;AACZ;AAAA;AAAA;AAAA;AAAA;AAMhB,uBAAO;AAAA;AAAA;AAAA;AAAA,UAQR,SAAS,SAAQ,UAAS,qBAAqB;AActD,gBAAI,UAAS;AAEb,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,UAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAER,kBAAI,wBACA;AAEJ,kBAAI,OAAO,WAAW,aAAa;AAC/B,yCAAyB,OAAO,yBAAyB,OAAO,+BAC/B,OAAO,4BAA4B,OAAO;AAE3E,wCAAwB,OAAO,wBAAwB,OAAO,2BAC7B,OAAO,8BAA8B,OAAO;AAAA;AAGjF,kBAAI,CAAC,wBAAwB;AACzB,oBAAI;AAEJ,yCAAyB,SAAS,UAAS;AACvC,kCAAgB,WAAW,WAAW;AAClC,6BAAS,OAAO;AAAA,qBACjB,MAAO;AAAA;AAGd,wCAAwB,WAAW;AAC/B,+BAAa;AAAA;AAAA;AASrB,sBAAO,SAAS,SAAS,SAAS;AAC9B,oBAAI,WAAW;AAAA,kBACX,KAAK;AAAA,kBACL,YAAY;AAAA,kBACZ,iBAAiB;AAAA,kBACjB,kBAAkB;AAAA,kBAClB,cAAc;AAAA,kBACd,cAAc;AAAA,kBACd,UAAU;AAAA,kBACV,eAAe;AAAA,kBACf,gBAAgB;AAAA,kBAChB,SAAS;AAAA,kBACT,SAAS;AAAA;AAGb,oBAAI,SAAS,OAAO,OAAO,UAAU;AAErC,uBAAO,QAAQ,OAAO,SAAS,MAAO,OAAO;AAC7C,uBAAO,WAAW,OAAO,YAAY,MAAO,OAAO;AACnD,uBAAO,WAAW,OAAO,YAAY,MAAQ,QAAO,MAAM;AAC1D,uBAAO,MAAM,MAAO,OAAO;AAE3B,uBAAO;AAAA;AAQX,sBAAO,MAAM,SAAS,QAAQ,QAAQ;AAElC,oBAAI,OAAO,OAAO,uBAAuB,aAAa;AAClD,2BAAS;AACT,2BAAS,QAAO;AAAA;AAGpB,gBAAC,iBAAgB,MAAK;AAClB,yBAAO,iBAAiB,uBAAuB;AAE/C,sBAAI,QAAQ,OAAO,SAAS;AACxB,4BAAO,KAAK,QAAQ,QAAQ;AAAA;AAAA;AAIpC,uBAAO;AAAA;AAYX,sBAAO,OAAO,SAAS,QAAQ,QAAQ,MAAM;AACzC,oBAAI,SAAS,OAAO,QAChB,aAAa,GACb;AAGJ,oBAAI,QAAQ;AAAA,kBACR,WAAW,OAAO;AAAA;AAGtB,uBAAO,QAAQ,QAAQ,cAAc;AAErC,oBAAI,OAAO,SAAS;AAEhB,0BAAQ,OAAO;AAAA,uBACZ;AAEH,0BAAS,OAAO,OAAO,YAAa,OAAO;AAC3C,yBAAO,WAAW;AAGlB,yBAAO,aAAa,KAAK;AACzB,yBAAO,eAAe,OAAO,aAAa,MAAM,CAAC,OAAO;AACxD,0BAAQ,KAAK,IAAI,MAAM,MAAM,OAAO;AAGpC,0BAAQ,QAAQ,OAAO,WAAW,OAAO,WAAW;AACpD,0BAAQ,QAAQ,OAAO,WAAW,OAAO,WAAW;AAGpD,+BAAa,QAAQ,OAAO;AAG5B,yBAAO,QAAQ;AAAA;AAInB,oBAAI,OAAO,kBAAkB;AACzB,gCAAc,OAAO,YAAY,OAAO;AAE5C,oBAAI,OAAO,cAAc;AACrB,+BAAa;AAEjB,uBAAO,gBAAgB,OAAO;AAC9B,uBAAO,aAAa;AAGpB,uBAAO,gBAAgB;AACvB,oBAAI,OAAO,OAAO,oBAAoB,KAAM;AACxC,yBAAO,MAAM,OAAO,eAAiB,SAAO,OAAO,oBAAoB;AACvE,yBAAO,mBAAmB;AAC1B,yBAAO,eAAe;AAAA;AAG1B,uBAAO,QAAQ,QAAQ,QAAQ;AAG/B,uBAAO,QAAQ,QAAQ,gBAAgB;AACvC,wBAAO,OAAO,QAAQ,OAAO;AAC7B,uBAAO,QAAQ,QAAQ,eAAe;AAEtC,uBAAO,QAAQ,QAAQ,aAAa;AAAA;AASxC,sBAAO,OAAO,SAAS,QAAQ;AAC3B,sCAAsB,OAAO;AAAA;AASjC,sBAAO,QAAQ,SAAS,QAAQ,QAAQ;AACpC,wBAAO,IAAI,QAAQ;AAAA;AAAA;AAAA;AAAA,UAkGpB,SAAS,SAAQ,UAAS,qBAAqB;AActD,gBAAI,MAAM;AAEV,oBAAO,UAAU;AAEjB,gBAAI,YAAY,oBAAoB;AACpC,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,aAAa,OAAO;AAExB,YAAC,YAAW;AAUR,kBAAI,WAAW,SAAS,OAAO,OAAO;AAClC,uBAAO,UAAU,SAAS,OAAO;AAAA;AAGrC,yBAAW,KAAK,YAAY;AAAA;AAAA;AAAA,UAOzB,SAAS,SAAQ,UAAS,qBAAqB;AAYtD,gBAAI,MAAM;AAEV,oBAAO,UAAU;AAEjB,gBAAI,SAAS,oBAAoB;AACjC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAaR,kBAAI,iBAAiB,SAAS,MAAM,cAAc;AAC9C,oBAAI,OAAO,WAAW,eAAe,CAAE,iBAAgB,SAAS;AAC5D,yBAAO,KAAK;AAAA;AAIhB,oBAAI,GAAG,IAAI,OAAO,OAAO,SAAS,UAC9B,eAAe,aACf,WAAW,cAAc,SAAS,IAClC,IAAI,IAAI,SAAS,GAAG,IAAI,GAAG,IAAI;AAEnC,+BAAe,gBAAgB;AAE/B,oBAAI,WAAW,SAAS,IAAI,IAAI,aAAa;AAEzC,sBAAI,aAAa,cAAc,MAAM,KAAK,cAAc;AAGxD,sBAAI,CAAC,aAAa,MAAM,UAAU,KAAK,MAAM,UAAU,GAAG;AACtD,wBAAI,aAAa,YAAY;AACzB,2BAAK,UAAU;AACf,2BAAK,UAAU;AAAA,2BACZ;AACH,2BAAK;AACL,2BAAK;AAAA;AAGT,wBAAI,SAAQ;AAAA,sBACR,GAAG,KAAK;AAAA,sBACR,GAAG,KAAK;AAAA;AAIZ,wBAAI,cAAc,CAAC,WAAW;AAC1B,kCAAY;AAAA;AAGhB,2BAAO,KAAK;AAEZ,wBAAI,KAAK;AACT,wBAAI,KAAK;AAAA;AAAA;AAIjB,oBAAI,kBAAkB,SAAS,UAAS;AACpC,sBAAI,UAAU,SAAQ,oBAAoB;AAG1C,sBAAI,YAAY;AACZ;AAGJ,0BAAQ;AAAA,yBAEH;AAAA,yBACA;AAAA,yBACA;AAAA,yBACA;AAAA,yBACA;AAAA,yBACA;AACD,0BAAI,SAAQ;AACZ,0BAAI,SAAQ;AACZ;AAAA,yBACC;AACD,0BAAI,SAAQ;AACZ;AAAA,yBACC;AACD,0BAAI,SAAQ;AACZ;AAAA;AAGJ,2BAAS,GAAG,GAAG,SAAQ;AAAA;AAI3B,oBAAI,mBAAmB;AAGvB,wBAAQ,KAAK;AAGb,2BAAW;AACX,qBAAK,IAAI,GAAG,IAAI,KAAK,YAAY,eAAe,KAAK;AACjD,2BAAS,KAAK,KAAK,YAAY,QAAQ;AAE3C,gCAAgB,SAAS;AAGzB,uBAAO,SAAS,OAAO;AAEnB,iCAAe,KAAK,mBAAmB;AACvC,4BAAU,SAAS;AAGnB,sBAAI,WAAW,aAAa;AACxB,2BAAO,cAAc,UAAU,cAAc,MAAM;AAC/C,sCAAgB,cAAc;AAElC,kCAAc;AAAA;AAKlB,0BAAQ,QAAQ,oBAAoB;AAAA,yBAE/B;AAAA,yBACA;AAAA,yBACA;AAAA,yBACA;AAAA,yBACA;AACD,8BAAQ,KAAK,iBAAiB;AAC9B,+BAAS,MAAM,GAAG,MAAM,GAAG;AAC3B;AAAA;AAKJ,4BAAU;AAAA;AAId,qBAAK,IAAI,GAAG,KAAK,cAAc,QAAQ,IAAI,IAAI,EAAE;AAC7C,kCAAgB,cAAc;AAElC,uBAAO;AAAA;AAGX,kBAAI,qBAAqB,SAAS,MAAM;AAKpC,oBAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,KAAK,aACpC,IAAI,GAAG,IAAI,GAAG,MAAM,KAAK;AAE7B,yBAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,sBAAI,MAAM,KAAK,QAAQ,IACnB,UAAU,IAAI;AAElB,sBAAI,cAAc,KAAK,UAAU;AAC7B,wBAAI,OAAO;AAAK,0BAAI,IAAI;AACxB,wBAAI,OAAO;AAAK,0BAAI,IAAI;AAAA,yBACrB;AACH,wBAAI,QAAQ;AAAK,2BAAK,IAAI,IAAI;AAC9B,wBAAI,QAAQ;AAAK,2BAAK,IAAI,IAAI;AAC9B,wBAAI,QAAQ;AAAK,2BAAK,IAAI,IAAI;AAC9B,wBAAI,QAAQ;AAAK,2BAAK,IAAI,IAAI;AAC9B,wBAAI,OAAO;AAAK,2BAAK,IAAI;AACzB,wBAAI,OAAO;AAAK,2BAAK,IAAI;AAEzB,4BAAQ;AAAA,2BAEH;AACD,6BAAK,YAAY,KAAK,0BAA0B,GAAG,IAAI;AACvD;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,0BAA0B,GAAG,IAAI;AACvD;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,oCAAoC,IAAI;AAC9D;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,kCAAkC,IAAI;AAC5D;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,gCAAgC,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK;AAC7E;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,sCAAsC,GAAG,GAAG,IAAI,KAAK;AAC3E;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,oCAAoC,GAAG,GAAG,IAAI,KAAK;AACzE;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,0CAA0C,GAAG,IAAI;AACvE;AAAA,2BACC;AACD,6BAAK,YAAY,KAAK,uBAAuB,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,cAAc,IAAI,YAAY;AAChH;AAAA,2BACC;AAAA,2BACA;AACD,4BAAI;AACJ,4BAAI;AACJ;AAAA;AAAA;AAKR,sBAAI,WAAW,OAAO,WAAW,KAAK;AAClC,yBAAK;AACL,yBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASd,SAAS,SAAQ,UAAS,qBAAqB;AAgBtD,gBAAI,QAAQ;AAEZ,oBAAO,UAAU;AAEjB,gBAAI,aAAY,oBAAoB;AACpC,gBAAI,SAAS,oBAAoB;AAEjC,YAAC,YAAW;AAKR,oBAAM,SAAS,WAAU;AACzB,oBAAM,MAAM,WAAU;AACtB,oBAAM,SAAS,WAAU;AACzB,oBAAM,QAAQ,WAAU;AACxB,oBAAM,eAAe,WAAU;AAC/B,oBAAM,UAAU,WAAU;AAC1B,oBAAM,gBAAgB,WAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC9/UpC,2BAAyB,UAAU,aAAa;AAC9C,QAAI,CAAE,qBAAoB,cAAc;AACtC,YAAM,IAAI,UAAU;AAAA;AAAA;AAIxB,6BAA2B,QAAQ,OAAO;AACxC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,aAAa,MAAM;AACvB,iBAAW,aAAa,WAAW,cAAc;AACjD,iBAAW,eAAe;AAC1B,UAAI,WAAW;AAAY,mBAAW,WAAW;AACjD,aAAO,eAAe,QAAQ,WAAW,KAAK;AAAA;AAAA;AAIlD,wBAAsB,aAAa,YAAY,aAAa;AAC1D,QAAI;AAAY,wBAAkB,YAAY,WAAW;AACzD,QAAI;AAAa,wBAAkB,aAAa;AAChD,WAAO;AAAA;AAGT,uCAAqC,QAAQ;AAE3C,WAAO,CAAC,OAAO,QAAQ,MAAM;AAAA;AAG/B,kBAAgB,QAAQ;AACtB,QAAI,MAAM,OAAO;AACjB,QAAI,iBAAiB,iBAAiB;AACtC,QAAI,QAAQ,4BAA4B,eAAe,iBAAiB;AACxE,QAAI,SAAS,4BAA4B,eAAe,iBAAiB;AACzE,WAAO,aAAa,SAAU,SAAQ,KAAK;AAC3C,WAAO,aAAa,UAAW,UAAS,KAAK;AAAA;AAG/C,gCAA8B,KAAK,KAAK;AACtC,QAAI,iBAAiB,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK;AACzF,QAAI,eAAe,KAAK,WAAY,OAAM,OAAO;AACjD,WAAO,KAAK,MAAM,eAAe,KAAK,IAAI,IAAI,mBAAmB,KAAK,IAAI,IAAI;AAAA;AAGhF,sCAAoC,KAAK;AACvC,WAAO,IAAI,qBAAqB,GAAG,IAAI;AAAA;AAGzC,MAAI,mCAAmC;AACvC,MAAI,6BAA6B;AACjC,MAAI,6BAA6B;AACjC,MAAI,iCAAiC;AACrC,MAAI,uBAAuB;AAC3B,MAAI,qBAAqB;AACzB,MAAI,6BAA6B;AACjC,MAAI,6BAA6B;AACjC,MAAI,6BAA6B;AACjC,MAAI,6BAA6B;AACjC,MAAI,6BAA6B;AACjC,MAAI,6BAA6B;AACjC,MAAI,qBAAqB;AACzB,MAAI,qBAAqB;AACzB,MAAI,8BAA8B;AAClC,MAAI,4BAA4B;AAChC,MAAI,0BAA0B;AAC9B,MAAI,wBAAwB;AAC5B,MAAI,0BAA0B,CAAC,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW;AAE5G,qCAAmC,aAAa;AAC9C,QAAI,kBAAkB;AACtB,WAAO,KAAK,IAAI,eAAe,KAAK,IAAI;AAAA;AAG1C,MAAI,gBAA6B,2BAAY;AAC3C,4BAAuB,MAAM;AAC3B,sBAAgB,MAAM;AAEtB,UAAI,kBAAkB,KAAK,iBACvB,YAAY,KAAK,WACjB,iBAAiB,KAAK,gBACtB,iBAAiB,KAAK,gBACtB,SAAS,KAAK,QACd,YAAY,KAAK,WACjB,cAAc,KAAK;AACnB,WAAK;AACL,UAAI,YAAY,KAAK;AACzB,UAAI,sBAAsB,qBAAqB,4BAA4B,4BAA4B;AACvG,UAAI,eAAe,sBAAsB,0BAA0B;AACnE,WAAK,gBAAgB;AAAA,QACnB,GAAG;AAAA,QACH,GAAG;AAAA;AAEL,WAAK,sBAAsB,qBAAqB,4BAA4B,4BAA4B;AACxG,WAAK,gBAAgB,OAAO,UAAU,UAAU,SAAS,OAAO,qBAAqB,4BAA4B,4BAA4B,KAAK,0BAA0B;AAC5K,WAAK,uBAAuB,qBAAqB,4BAA4B,4BAA4B;AACzG,WAAK,SAAS;AAAA,QACZ,GAAG;AAAA,QACH,GAAG;AAAA;AAEL,WAAK,gBAAgB;AACrB,WAAK,gBAAgB,cAAc,SAAS,qBAAqB,GAAG,KAAK,KAAK,qBAAqB,MAAM,GAAG;AAC5G,WAAK,YAAY;AACjB,WAAK,qBAAqB,qBAAqB,GAAG,IAAI,KAAK;AAC3D,WAAK,yBAAyB;AAC9B,UAAI,QAAQ,cAAc,SAAS,qBAAqB,oBAAoB,sBAAsB,KAAK,KAAK,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,sBAAsB,KAAK,KAAK;AAC7L,WAAK,SAAS,KAAK,IAAI,KAAK,IAAI;AAChC,WAAK,SAAS,KAAK,IAAI,KAAK,IAAI;AAChC,UAAI,gBAAgB,qBAAqB,CAAC,6BAA6B;AACvE,UAAI,yBAAyB;AAAA,QAC3B,GAAG,gBAAgB,IAAK,eAAc,SAAS,CAAC,gBAAgB,iBAAiB,KAAK;AAAA,QACtF,GAAG,gBAAgB,IAAI,gBAAgB,KAAK;AAAA;AAE9C,WAAK,kBAAkB,OAAO,OAAO,IAAI;AACzC,WAAK,kBAAkB,OAAO,OAAO,IAAI;AACzC,WAAK,QAAQ,OAAO,UAAU,UAAU,SAAS,OAAO,2BAA2B;AACnF,WAAK,QAAQ,OAAO,SAAS,2BAA2B,UAAU;AAClE,WAAK,QAAQ,UAAU,SAAS,2BAA2B,aAAa;AACxE,WAAK,YAAY,IAAI,OAAO;AAC5B,WAAK,YAAY;AAAA;AAGnB,iBAAa,gBAAe,CAAC;AAAA,MAC3B,KAAK;AAAA,MACL,OAAO,cAAc,eAAe;AAClC,YAAI,kBAAkB,KAAK,iBACvB,SAAS,KAAK,QACd,QAAQ,KAAK,OACb,QAAQ,KAAK,OACb,gBAAgB,KAAK,eACrB,qBAAqB,KAAK,oBAC1B,YAAY,KAAK,WACjB,QAAQ,KAAK;AACjB,YAAI,MAAM,OAAO;AAEjB,YAAI,OAAO;AACT,wBAAc,YAAY;AAC1B,wBAAc;AACd,wBAAc,QAAQ,gBAAgB,IAAI,KAAK,gBAAgB,IAAI,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,eAAe,GAAG,IAAI,KAAK;AACnI,wBAAc;AAAA,mBACL,OAAO;AAChB,wBAAc;AACd,wBAAc,UAAU,MAAM,gBAAgB,GAAG,MAAM,gBAAgB;AACvE,wBAAc,OAAO;AACrB,wBAAc,UAAU,OAAO,CAAC,MAAM,QAAQ,GAAG,CAAC,MAAM,SAAS,GAAG,MAAM,OAAO,MAAM;AACvF,wBAAc;AAAA,mBACL,OAAO;AAChB,wBAAc,OAAO,GAAG,OAAO,WAAW;AAC1C,wBAAc;AACd,wBAAc,UAAU,MAAM,gBAAgB,GAAG,MAAM,gBAAgB;AACvE,wBAAc,OAAO;AACrB,wBAAc,YAAY;AAC1B,wBAAc,SAAS,OAAO,GAAG;AACjC,wBAAc;AAAA;AAAA;AAAA,OAGjB;AAAA,MACD,KAAK;AAAA,MACL,OAAO,wBAAwB,oBAAoB,aAAa;AAC9D,YAAI,gBAAgB,KAAK,eACrB,uBAAuB,KAAK,sBAC5B,sBAAsB,KAAK,qBAC3B,yBAAyB,KAAK,wBAC9B,gBAAgB,KAAK,eACrB,YAAY,KAAK,WACjB,YAAY,KAAK;AACrB,YAAI,yBAAyB,cAAc;AAC3C,YAAI,cAAc,IAAI;AAAqB,eAAK,cAAc,KAAK,uBAAuB;AAC1F,aAAK,gBAAgB,KAAK,cAAc,IAAK,eAAc,SAAS,CAAC,KAAK,SAAS,KAAK,UAAU;AAClG,aAAK,gBAAgB,IAAI,KAAK,gBAAgB,IAAI,cAAc,IAAI,KAAK,SAAS,yBAAyB,mCAAmC,KAAK,IAAI,wBAAwB,KAAK;AACpL,aAAK,iBAAiB,KAAK,SAAS,KAAK,QAAQ,OAAS,iCAAiC;AAC3F,YAAI,KAAK,gBAAgB;AAAG,eAAK,gBAAgB;AAEjD,YAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,eAAK,sBAAsB,KAAK,gBAAgB,qBAAsB,KAAI,KAAK;AAC/E;AAAA;AAGF,YAAI,2BAA2B,QAAQ;AACrC,eAAK,OAAO,KAAK,qBAAqB;AAEtC,cAAI,KAAK,OAAO,KAAK,GAAG;AACtB,iBAAK,OAAO,IAAI;AAChB,iBAAK,yBAAyB;AAAA;AAAA,eAE3B;AACL,eAAK,OAAO,KAAK,qBAAqB;AAEtC,cAAI,KAAK,OAAO,KAAK,KAAK,eAAe;AACvC,iBAAK,OAAO,IAAI,KAAK;AACrB,iBAAK,yBAAyB;AAAA;AAAA;AAAA;AAAA,OAInC;AAAA,MACD,KAAK;AAAA,MACL,OAAO,8BAA8B,cAAc;AACjD,eAAO,KAAK,gBAAgB,IAAI,eAAe;AAAA;AAAA;AAInD,WAAO;AAAA;AAGT,0BAAwB;AACtB,QAAI,SAAS,SAAS,cAAc;AACpC,WAAO,MAAM,WAAW;AACxB,WAAO,MAAM,QAAQ;AACrB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,MAAM;AACnB,WAAO,MAAM,OAAO;AACpB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,gBAAgB;AAC7B,aAAS,KAAK,YAAY;AAC1B,WAAO;AAAA;AAGT,mCAAiC,gBAAgB;AAC/C,QAAI,wBAAwB,eAAe,gBACvC,iBAAiB,0BAA0B,SAAS,uBAAuB,uBAC3E,yBAAyB,eAAe,gBACxC,iBAAiB,2BAA2B,SAAS,eAAe,oBAAqB,gBAAe,SAAS,wBAAwB,2BAA2B,wBACpK,yBAAyB,eAAe,gBACxC,iBAAiB,2BAA2B,SAAS,0BAA0B,wBAC/E,wBAAwB,eAAe,QACvC,SAAS,0BAA0B,SAAS,eAAe,WAAW,KAAK,uBAC3E,yBAAyB,eAAe,WACxC,YAAY,2BAA2B,SAAS,qBAAqB,wBACrE,wBAAwB,eAAe,QACvC,SAAS,0BAA0B,SAAS,KAAK;AAErD,QAAI,eAAe;AAAS,cAAQ,MAAM;AAC1C,QAAI,eAAe;AAAkB,cAAQ,MAAM;AACnD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAIJ,MAAI,gBAA6B,2BAAY;AAC3C,4BAAuB,eAAe;AACpC,UAAI,QAAQ;AAEZ,sBAAgB,MAAM;AAEtB,WAAK,gBAAgB;AACrB,WAAK,SAAS;AACd,WAAK,UAAU,IAAI,QAAQ,SAAU,oBAAoB;AACvD,eAAO,MAAM,iBAAiB;AAAA;AAAA;AAIlC,iBAAa,gBAAe,CAAC;AAAA,MAC3B,KAAK;AAAA,MACL,OAAO,mCAAmC;AACxC,eAAO,KAAK;AAAA;AAAA,OAEb;AAAA,MACD,KAAK;AAAA,MACL,OAAO,qBAAqB;AAC1B,YAAI;AAEJ,QAAC,gBAAe,KAAK,QAAQ,KAAK,MAAM,cAAc;AAAA;AAAA,OAEvD;AAAA,MACD,KAAK;AAAA,MACL,OAAO,oBAAoB;AACzB,YAAI;AAEJ,YAAI,KAAK,OAAO,QAAQ;AACtB,iBAAO;AAAA;AAGT,QAAC,MAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK;AACxE,eAAO;AAAA;AAAA,OAER;AAAA,MACD,KAAK;AAAA,MACL,OAAO,uBAAuB,MAAM,cAAc,wBAAwB;AACxE,YAAI,SAAS;AAEb,YAAI,YAAY,KAAK,WACjB,cAAc,KAAK;AACvB,aAAK,SAAS,KAAK,OAAO,OAAO,SAAU,OAAO;AAEhD,gBAAM,eAAe,WAAW;AAChC,gBAAM,KAAK,OAAO;AAElB,cAAI,CAAC,wBAAwB;AAC3B,mBAAO;AAAA;AAGT,iBAAO,MAAM,qBAAqB;AAAA;AAAA;AAAA;AAKxC,WAAO;AAAA;AAGT,MAAI,aAA0B,2BAAY;AACxC,2BAAsB;AACpB,UAAI,mBAAmB,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK;AAE3F,sBAAgB,MAAM;AAEtB,WAAK,wBAAwB;AAC7B,WAAK,SAAS,iBAAiB,UAAU;AACzC,WAAK,gBAAgB,KAAK,OAAO,WAAW;AAC5C,WAAK,iCAAiC;AACtC,WAAK,cAAc,IAAI,OAAO;AAC9B,WAAK,iBAAiB;AACtB,WAAK,OAAO,KAAK,KAAK,KAAK;AAC3B,4BAAsB,KAAK;AAAA;AAG7B,iBAAa,aAAY,CAAC;AAAA,MACxB,KAAK;AAAA,MACL,OAAO,gBAAgB;AACrB,aAAK,iCAAiC;AACtC,eAAO,KAAK;AACZ,YAAI,cAAc,IAAI,OAAO;AAC7B,YAAI,YAAY,cAAc,KAAK;AACnC,YAAI,eAAe,KAAK,OAAO;AAC/B,YAAI,yBAAyB,KAAK,iBAAiB,OAAO;AAC1D,aAAK,wBAAwB,KAAK,sBAAsB,OAAO,SAAU,OAAO;AAC9E,gBAAM,cAAc;AAAA,YAClB;AAAA,YACA;AAAA,aACC,cAAc;AAEjB,cAAI,CAAC,wBAAwB;AAC3B,mBAAO;AAAA;AAGT,iBAAO,CAAC,MAAM;AAAA;AAEhB,aAAK;AACL,aAAK,4BAA4B;AAAA;AAAA,OAElC;AAAA,MACD,KAAK;AAAA,MACL,OAAO,qCAAqC,aAAa;AACvD,YAAI,KAAK,gCAAgC;AAEvC;AAAA;AAGF,YAAI,KAAK,sBAAsB,SAAS,GAAG;AAEzC;AAAA;AAGF,aAAK,iCAAiC;AAEtC,aAAK,cAAc,eAAe,IAAI,OAAO;AAC7C,8BAAsB,KAAK;AAAA;AAAA,OAE5B;AAAA,MACD,KAAK;AAAA,MACL,OAAO,eAAe,KAAK;AACzB,eAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,cAAI,MAAM,IAAI;AAEd,cAAI,SAAS,WAAY;AACvB,oBAAQ;AAAA;AAGV,cAAI,UAAU,SAAU,GAAG;AACzB,mBAAO;AAAA;AAGT,cAAI,MAAM;AAEV,cAAI,IAAI,UAAU;AAChB,gBAAI,SAAS;AACb,oBAAQ;AAAA;AAAA;AAAA;AAAA,OAIb;AAAA,MACD,KAAK;AAAA,MACL,OAAO,qBAAqB,QAAQ;AAClC,YAAI,SAAS;AAEb,YAAI,OAAO,WAAW;AAAG,iBAAO,QAAQ,QAAQ;AAChD,YAAI,WAAW,OAAO,IAAI,SAAU,KAAK;AACvC,iBAAO,OAAO,MAAM;AAAA;AAEtB,eAAO,QAAQ,IAAI;AAAA;AAAA,OAEpB;AAAA,MACD,KAAK;AAAA,MACL,OAAO,uBAAuB;AAC5B,YAAI,SAAS;AAEb,YAAI,iBAAiB,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK;AAEzF,YAAI,wBAAwB,wBAAwB,iBAChD,iBAAiB,sBAAsB,gBACvC,iBAAiB,sBAAsB,gBACvC,iBAAiB,sBAAsB,gBACvC,SAAS,sBAAsB,QAC/B,YAAY,sBAAsB,WAClC,SAAS,sBAAsB;AAOnC,YAAI,aAAa,KAAK,OAAO;AAC7B,YAAI,cAAc,WAAW;AAC7B,YAAI,eAAe,WAAW;AAC9B,YAAI,YAAY,eAAe,IAAI;AACnC,YAAI,uBAAuB;AAAA,UACzB,GAAG;AAAA,UACH,GAAG;AAAA;AAEL,YAAI,wBAAwB;AAAA,UAC1B,GAAG;AAAA,UACH,GAAG;AAAA;AAEL,YAAI,gBAAgB,IAAI,cAAc,KAAK;AAE3C,aAAK,YAAY,QAAQ,KAAK,SAAU,WAAW;AACjD,mBAAS,IAAI,GAAG,IAAI,iBAAiB,GAAG,KAAK;AAC3C,gBAAI,qBAAqB,IAAI,cAAc;AAAA,cACzC,iBAAiB;AAAA,cACjB,WAAW;AAAA,cACX;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA;AAEF,gBAAI,oBAAoB,IAAI,cAAc;AAAA,cACxC,iBAAiB;AAAA,cACjB,WAAW;AAAA,cACX;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA;AAEF,0BAAc,UAAU,oBAAoB;AAAA;AAG9C,iBAAO,sBAAsB,KAAK;AAElC,iBAAO;AAAA;AAGT,eAAO,cAAc;AAAA;AAAA;AAIzB,WAAO;AAAA;AAGT,MAAO,sBAAQ;;;ACrcR,qBAAwC;AAAA,IAO7C,YAAY,MAA6B,IAAI;AANrC,sBAAW,IAAI,oBAAW;AAAA,QAChC,QAAQ,SAAS,eAAe;AAAA;AAE1B,qBAAwB;AAAA,QAC9B,SAAS,CAAC;AAAA;AAMZ,uBAAY,YAAY;AACtB,eAAO,KAAK,SAAS,YAAY,KAAK;AAAA;AAJtC,aAAO,OAAO,KAAK,SAAS;AAC5B,eAAS,KAAK,iBAAiB,SAAS,MAAM,KAAK;AAAA;AAAA,IAKrD,OAAO,UAAqB;AAC1B,YAAM,QAAQ,SAAS,OAAO,CAAC,OAAO,YAAY;AAChD,eAAO,KAAK,QAAQ,QAAQ,OAAO,CAAC,GAAG,QAAQ;AAC7C,cAAI,OAAO,QAAQ,UAAU;AAC3B,kBAAM,IAAI,OAAO,KAAK;AAAA;AAExB,kBAAQ,IAAI,QAAQ,KAAK,SAAS;AAClC,cAAI,QAAQ,KAAK,QAAQ,OAAO,SAAS,IAAI;AAC3C,mBAAO,IAAI;AAAA;AAEb,iBAAO;AAAA,WACN;AAAA,SACF;AACH,eAAS,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK;AAC5C,mBAAW,KAAK,WAAW,IAAI;AAAA;AAAA;AAAA;;;AC1CrC,yBAA0D;AAG1D,MAAM,YAAY;AAClB,MAAM,cAAc;AAAA,IAClB,UAAU;AAAA,IACV,QAAQ;AAAA,MACN,WAAW;AAAA;AAAA;AAiBf,MAAM,iBAA0C;AAAA,IAC9C,SAAS,CAAC;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,IACV,eAAe;AAAA,IACf,UAAU;AAAA;AAEZ,uBAAe;AAAA,IAMb,YACS,GACA,GACA,UACA,SACA,UACP;AALO;AACA;AACA;AACA;AACA;AAEP,WAAK,QAAQ,wBAAO,OAClB,GACA,GACA,QAAQ,MACR;AAAA,QAGE,aAAa;AAAA,QAGb,QAAQ;AAAA,UACN,QAAQ;AAAA,YACN,SAAS,QAAQ;AAAA,YACjB,QAAQ,QAAQ,UAAU;AAAA,YAC1B,QAAQ,QAAQ,UAAU;AAAA;AAAA;AAAA;AAIlC,WAAK,SAAS,WAAW,MAAM;AAC7B,iBAAS,KAAK;AAAA,SACb;AAAA;AAAA,QA9BD,OAAO;AACT,aAAO,KAAK;AAAA;AAAA,IA+Bd,SAAS;AACP,mBAAa,KAAK;AAClB,WAAK,SAAS,KAAK;AAAA;AAAA;AAGhB,sBAAyC;AAAA,IAO9C,YAAY,KAAoB;AANzB,wBAAa,OAAO;AACpB,yBAAc,OAAO;AACrB,oBAAS,wBAAO;AAEhB,qBAAyB,OAAO,OAAO,IAAI;AAC1C,oBAAqB;AAE3B,aAAO,OAAO,KAAK,SAAS;AAC5B,YAAM,SAAS,SAAS,eAAe;AACvC,WAAK,SAAS,wBAAO,OAAO;AAAA,QAC1B;AAAA,QACA,QAAQ,KAAK;AAAA,QACb,SAAS;AAAA,UACP,YAAY;AAAA,UACZ,OAAO,KAAK;AAAA,UACZ,QAAQ,KAAK;AAAA,UAEb,YAAY;AAAA;AAAA;AAmBhB,YAAM,WAAW,wBAAO,UAAU,CAAE,aAAY,IAAI,IAAI,KAAK,cAAc,GAAG,WAAW,KAAK,aAAa;AAC3G,YAAM,YAAY,wBAAO,UAAU,KAAK,aAAa,YAAY,IAAI,GAAG,KAAK,cAAc,GAAG,WAAW,KAAK,aAAa;AAC3H,YAAM,SAAS,wBAAO,UAAU,KAAK,aAAa,GAAG,KAAK,cAAc,YAAY,IAAI,GAAG,KAAK,YAAY,WAAW;AAEvH,iCAAU,IAAI,KAAK,OAAO,OAAO,CAAC,QAAQ,UAAU;AACpD,8BAAO,IAAI,KAAK;AAEhB,YAAM,SAAS,wBAAO;AACtB,8BAAO,IAAI,QAAQ,KAAK;AAExB,eAAS,KAAK,iBAAiB,SAAS,MAAM,KAAK;AAAA;AAAA,IAErD,OAAO;AACL,YAAM,IAAI,KAAK,WAAW,KAAK;AAC/B,YAAM,IAAI,KAAK,WAAW,KAAK,cAAc;AAC7C,YAAM,UAAU,KAAK,QAAQ,SAAS,KAAK,MAAM,KAAK,WAAW,KAAK,QAAQ,SAAS;AACvF,YAAM,OAAO,IAAI,SAAS,GAAG,GAAG,KAAK,QAAQ,YAAY,eAAe,UAAU,SAAS,CAAC,SAAS;AACnG,mCAAU,OAAO,KAAK,OAAO,OAAO;AAAA;AAEtC,WAAK,OAAO,QAAQ;AACpB,iCAAU,IAAI,KAAK,OAAO,OAAO,CAAC,KAAK;AAEvC,YAAM,MAAM,KAAK,QAAQ,YAAY,eAAe;AACpD,UAAI,KAAK,OAAO,SAAS,KAAK;AAC5B,cAAM,UAAU,KAAK,OAAO,OAAO,KAAK,KAAK,OAAO;AACpD,gBAAQ,QAAQ,CAAC,MAAM;AACrB,YAAE;AAAA;AAAA;AAAA;AAAA,IAIR,OAAO,UAAqB;AAC1B,YAAM,QAAQ,SAAS,OAAO,CAAC,OAAO,YAAY;AAChD,eAAO,KAAK,QAAQ,QAAQ,OAAO,CAAC,GAAG,QAAQ;AAC7C,cAAI,OAAO,QAAQ,UAAU;AAC3B,kBAAM,IAAI,OAAO,KAAK;AAAA;AAExB,gBAAM,MAAM,QAAQ,KAAK,QAAQ,MAAM,KAAK,SAAS;AACtD,iBAAO,IAAI;AAAA,WACT;AAAA,SACF;AACH,YAAM,MAAM,KAAK,QAAQ,iBAAiB,eAAe;AACzD,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,KAAK;AACpC,aAAK;AAAA;AAAA;AAAA;;;AClJJ,MAAM,UAAU;AAAA,IACrB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,qBAAqB,oBAAI;AAAA,IACzB,sBAAsB,oBAAI;AAAA,IAC1B,KAAK,UAAkB;AACrB,YAAM,UAAU,MAAM;AACpB,cAAM,UACH,KAAK,SAAO,IAAI,QAChB,KAAK,OAAM,QAAqB;AAC/B,gBAAM,EAAE,UAAU,cAAc;AAChC,cAAI,QAAQ,SAAS,UAAU,CAAC,YAAY;AAC1C,mBAAO,KAAK,YAAY,QAAQ,KAAK;AAAA;AAEvC,cAAI,UAAU,IAAI;AAChB,oBAAQ;AAAA;AAEV,gBAAM,cAAc,SAAS,MAAM,QAAQ;AAC3C,cAAI,YAAY,WAAW,GAAG;AAC5B,iBAAK,UAAU,YAAY,YAAY,SAAS,GAAG,KAAK;AACxD,iBAAK,gBAAgB;AAAA;AAEvB,eAAK,iBAAiB;AACtB,eAAK,SAAS,WAAW,SAAS;AAAA,WAEnC,MAAM,CAAC,MAAM;AACZ,kBAAQ,MAAM;AACd,eAAK,SAAS,WAAW,SAAS;AAAA;AAAA;AAGxC;AAAA;AAAA,IAEF,gBAAgB,UAAqB;AACnC,WAAK,oBAAoB,QAAQ,gBAAc;AAC7C,mBAAW;AAAA;AAAA;AAAA,IAGf,iBAAiB,WAAuB;AACtC,WAAK,qBAAqB,QAAQ,gBAAc;AAC9C,mBAAW;AAAA;AAAA;AAAA,IAGf,iBAAiB,YAA+B;AAC9C,WAAK,oBAAoB,IAAI,YAAY;AAAA;AAAA,IAE3C,kBAAkB,YAA+B;AAC/C,WAAK,oBAAoB,OAAO;AAAA;AAAA,IAElC,kBAAkB,YAAgC;AAChD,WAAK,qBAAqB,IAAI,YAAY;AAAA;AAAA,IAE5C,oBAAoB,YAAgC;AAClD,WAAK,qBAAqB,OAAO;AAAA;AAAA;;;ACxCrC,MAAM,cAAc;AACpB,yBAAiB;AAAA,IAGf,YAAmB,QAA4B,MAAwB,UAAsC;AAA1F;AAA4B;AAFvC,sBAA2B,SAAS,cAAc;AAGxD,YAAM,MAAM,IAAI;AAChB,UAAI,MAAM,KAAK;AACf,UAAI,KAAK,OAAO;AACd,YAAI,QAAQ,KAAK;AAAA;AAEnB,UAAI,KAAK,QAAQ;AACf,YAAI,SAAS,KAAK;AAAA;AAEpB,YAAM,IAAI,KAAK,KAAK,KAAK,MAAM,KAAK,WAAW,OAAO,aAAa,cAAc,cAAc;AAC/F,YAAM,IAAI,KAAK,KAAK,KAAK,MAAM,KAAK,WAAW,OAAO,cAAc,cAAc,cAAc;AAChG,WAAK,SAAS,YAAY;AAC1B,WAAK,SAAS,MAAM,YAAY,aAAa,QAAQ;AACrD,WAAK,SAAS,YAAY;AAC1B,WAAK,OAAO,YAAY,KAAK;AAC7B,WAAK,SAAS,WAAW,MAAM;AAC7B,aAAK;AAAA,SACJ,KAAK,YAAY;AAAA;AAAA,IAEtB,SAAS;AACP,oBAAc,KAAK;AACnB,UAAI,KAAK,UAAU;AACjB,aAAK,OAAO,YAAY,KAAK;AAE7B,aAAK,WAAW;AAAA;AAAA;AAAA;AAIf,qBAAwC;AAAA,IAO7C,YAAY,KAAmB;AANvB,sBAAyB;AAAA,QAC/B,OAAO;AAAA,QACP,UAAU;AAAA;AAEJ,wBAA0B,SAAS,eAAe;AAClD,oBAAsB;AAE5B,aAAO,OAAO,KAAK,UAAU;AAC7B,eAAS,KAAK,iBAAiB,SAAS,MAAM;AAC5C,cAAM,OAAO,KAAK,SAAS,MAAM,KAAK,MAAM,KAAK,WAAW,KAAK,SAAS,MAAM;AAChF,aAAK,SAAS;AAAA;AAAA;AAAA,IAGlB,SAAS,MAAwB;AAC/B,YAAM,IAAI,IAAI,WAAW,KAAK,YAAY,MAAM,CAAC,SAAS;AACxD,aAAK;AAAA;AAGP,UAAI,KAAK,MAAM;AACb,cAAM,QAAQ,KAAK,OAAO,UAAU,UAAQ,KAAK,SAAS;AAC1D,gBAAQ,IAAI;AACZ,YAAI,UAAU,IAAI;AAChB,gBAAM,UAAU,KAAK,OAAO,OAAO,OAAO;AAC1C,kBAAQ,QAAQ,CAAC,MAAM;AACrB,cAAE;AAAA;AAAA;AAAA;AAIR,WAAK,OAAO,QAAQ;AACpB,YAAM,MAAM,KAAK,SAAS,YAAY;AACtC,UAAI,KAAK,OAAO,SAAS,KAAK;AAC5B,cAAM,UAAU,KAAK,OAAO,OAAO,KAAK,KAAK,OAAO;AACpD,gBAAQ,QAAQ,CAAC,MAAM;AACrB,YAAE;AAAA;AAAA;AAAA;AAAA,IAIR,OAAO,UAA2B;AAChC,YAAM,OAA2B;AACjC,eAAS,QAAQ,CAAC,YAAY;AAC5B,cAAM,MAAM,KAAK,SAAS,MAAM,KAAK,CAAC,SAAS;AAC7C,iBAAO,KAAK,QAAQ,KAAK,CAAC,QAAQ;AAChC,gBAAI,OAAO,QAAQ,UAAU;AAC3B,oBAAM,IAAI,OAAO,KAAK;AAAA;AAExB,gBAAI,QAAQ,KAAK,QAAQ,OAAO,SAAS,IAAI;AAC3C,qBAAO;AAAA;AAET,mBAAO;AAAA;AAAA;AAGX,YAAI,KAAK;AACP,eAAK,KAAK;AAAA;AAAA;AAGd,cAAQ,IAAI;AACZ,UAAI,KAAK,WAAW,GAAG;AACrB,aAAK,QAAQ,UAAQ;AACnB,eAAK,SAAS;AAAA;AAAA;AAAA;AAAA;;;ACxFtB,MAAM,kBAAoC;AAAA,IACxC,UAAU;AAAA,IACV,KAAK;AAAA,MACH,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,QAAQ;AAAA;AAAA,IAEV,cAAc;AAAA,MACZ,SAAS,CAAC,MAAM;AAAA;AAAA,IAElB,eAAe;AAAA,MACb,SAAS,CAAC,MAAM;AAAA,MAChB,UAAU;AAAA,QACR;AAAA,UACE,KAAK;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA;AAAA;AAAA;AAAA,IAId,cAAc;AAAA,MACZ,OAAO;AAAA,MACP,UAAU;AAAA;AAAA;AAId,gBAAc,MAAiC,IAAI;AACjD,UAAM,UAAU,OAAO,OAAO,IAAI,iBAAiB;AACnD,UAAM,UAA6B;AACnC,QAAI,QAAQ,IAAI,QAAQ;AACtB,YAAM,SAAS,IAAI,OAAO,QAAQ;AAClC,cAAQ,KAAK;AAAA;AAEf,QAAI,QAAQ,IAAI,SAAS;AACvB,YAAM,UAAU,IAAI,QAAQ,QAAQ;AACpC,cAAQ,KAAK;AAAA;AAEf,QAAI,QAAQ,IAAI,QAAQ;AACtB,YAAM,SAAS,IAAI,OAAO,QAAQ;AAClC,cAAQ,KAAK;AAAA;AAEf,YAAQ,KAAK,QAAQ;AACrB,YAAQ,iBAAiB,CAAC,aAAwB;AAChD,cAAQ,QAAQ,SAAO;AACrB,YAAI,OAAO;AAAA;AAAA;AAAA;AAKjB,EAAC,OAAe,YAAY;AAAA,IAC1B,OAAO;AAAA;",
  "names": []
}
